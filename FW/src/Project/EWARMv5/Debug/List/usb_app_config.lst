###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     12/Dec/2015  15:19:58 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\usb_lib\usb_app_config.c            #
#    Command line =  "E:\BT Printer\FW\src\usb_lib\usb_app_config.c" -D       #
#                    DEBUG_VER -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Deb #
#                    ug\List\" -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug #
#                    \Obj\" --no_cse --no_unroll --no_inline                  #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\" -I    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\App\" -I     #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Drivers\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\"   #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\" #
#                     -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC- #
#                    CPU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCO #
#                    S\uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\. #
#                    .\uCOS\uCOS-II\Ports\" -I "E:\BT                         #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\usb_app_ #
#                    config.lst                                               #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\usb_app_c #
#                    onfig.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\usb_lib\usb_app_config.c
      1          /**
      2          * @file usb_config.c
      3          * @brief 配置USB模式的模块
      4          *
      5          * @version V0.0.1
      6          * @author kent.zhou
      7          * @date 2015年11月16日
      8          * @note
      9          * 
     10          * @copy
     11          *
     12          * 此代码为深圳合计电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     13          * 本公司以外的项目。本司保留一切追究权利。
     14          *
     15          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     16          */
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include <string.h>
     20          #include "usb_app_config.h"
     21          #include "stm32f10x_lib.h"
     22          #include "hw_config.h"
     23          #include "usb_init.h"
     24          #include "TimeBase.h"
     25          #include "usb_lib.h"
     26          #include "usb_pwr.h"
     27          #include "usb_desc.h"
     28          #include "uart.h"
     29          
     30          
     31          #if(USB_DEVICE_CONFIG & _USE_USB_MASS_STOARGE_DEVICE)
     32          unsigned char	g_mass_storage_device_type;
     33          #ifdef DUMMY_FAT_FS
     34          unsigned char	g_send_buff[512];
     35          #endif
     36          #endif
     37          
     38          
     39          #if(USB_DEVICE_CONFIG & _USE_USB_VIRTUAL_COMM_DEVICE)
     40          unsigned char buffer_out[512];
     41          unsigned int	count_out;
     42          #endif
     43          
     44          unsigned char				g_usb_type;
     45          extern u32 count_in;
     46          
     47          
     48          /*******************************************************************************
     49          * Function Name  : Set_USBClock
     50          * Description    : Configures USB Clock input (48MHz)
     51          * Input          : None.
     52          * Return         : None.
     53          *******************************************************************************/
     54          static void usb_SetClock(void)
     55          {
     56          	/* Enable GPIOA, GPIOD and USART1 clock */
     57          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD, ENABLE);
     58          
     59          	/* USBCLK = PLLCLK / 1.5 */
     60          	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
     61          	/* Enable USB clock */
     62          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
     63          }
     64          
     65          /*******************************************************************************
     66          * Function Name  : USB_Interrupts_Config
     67          * Description    : Configures the USB interrupts
     68          * Input          : None.
     69          * Return         : None.
     70          *******************************************************************************/
     71          static void usb_Interrupts_Config(void)
     72          {
     73          	NVIC_InitTypeDef NVIC_InitStructure;
     74          
     75          	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
     76          
     77          	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;
     78          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     79          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
     80          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     81          	NVIC_Init(&NVIC_InitStructure);
     82          
     83          	NVIC_InitStructure.NVIC_IRQChannel = USB_HP_CAN_TX_IRQChannel;
     84          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     85          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
     86          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     87          	NVIC_Init(&NVIC_InitStructure);
     88          }
     89          
     90          /*******************************************************************************
     91          * Function Name  : usb_cable_insert
     92          * Description    : detect the USB Cable wether insert
     93          * Input          : None.
     94          * Return         : false: not insert true: insert  
     95          *******************************************************************************/
     96          bool usb_cable_insert (void)
     97          {
     98          	//@todo....
     99          }
    100          
    101          
    102          /**
    103          * @brief 设备的初始化
    104          * @param[in] #define USB_VIRTUAL_PORT		1	//虚拟串口
    105          *			 #define USB_KEYBOARD			2	//USB键盘
    106          *			 #define USB_MASSSTORAGE		3	//大容量存储设备
    107          *			 #define USB_PRINTER			4	//USB打印机设备
    108          * @note 函数调用者保证device_type确实是已经实现的USB类
    109          */
    110          void usb_device_init(unsigned char device_type)
    111          {
    112          	if (device_type == USB_PRINTER)
    113          	{
    114          		MEMSET(usb_rec_buffer,0,USB_BUFFER_LEN);
    115          		ringbuffer_init(&spp_ringbuf[USB_PRINT_CHANNEL_OFFSET],usb_rec_buffer,USB_BUFFER_LEN);
    116          	}
    117          
    118          	if (g_usb_type != device_type)
    119          	{
    120          		g_usb_type = device_type;
    121          		usb_SetClock();
    122          		usb_Interrupts_Config();
    123          		USB_Init();
    124          	}
    125          }
    126          
    127          
    128          void usb_SendData(unsigned char *pData, int length)
    129          {
    130          	volatile int i = 0;
    131                  unsigned int	delay_cnt;
    132                  
    133          #if (USB_DEVICE_CONFIG & _USE_USB_VIRTUAL_COMM_DEVICE)        
    134          	int batch = length/VIRTUAL_COM_PORT_DATA_SIZE;
    135          	int res	  = length%VIRTUAL_COM_PORT_DATA_SIZE;
    136          #endif 
    137          	
    138          
    139          #if(USB_DEVICE_CONFIG & _USE_USB_KEYBOARD_DEVICE)
    140          	if (g_usb_type == USB_KEYBOARD)	//按键
    141          	{
    142          		count_in = length;
    143          		UserToPMABufferCopy(pData, GetEPTxAddr(ENDP1), count_in);
    144          		SetEPTxCount(ENDP1, count_in);
    145          		/* enable endpoint for transmission */
    146          		SetEPTxValid(ENDP1);
    147          		//StartDelay(600);	//3S的延时
    148          		delay_cnt = 300;
    149          		while (count_in != 0 && delay_cnt != 0 &&(bDeviceState == CONFIGURED))
    150          		{
    151          			delay_cnt--;
    152          			delay_ms(10);
    153          		}
    154          	}
    155          	else 
    156          #elif (USB_DEVICE_CONFIG & _USE_USB_VIRTUAL_COMM_DEVICE)
    157          	if(g_usb_type == USB_VIRTUAL_PORT)
    158          	{
    159          		for (i = 0; i < batch; i++)
    160          		{
    161          			count_in	= VIRTUAL_COM_PORT_DATA_SIZE;
    162          			UserToPMABufferCopy(pData+i*VIRTUAL_COM_PORT_DATA_SIZE, ENDP1_TXADDR, count_in);
    163          			SetEPTxCount(ENDP1, count_in);
    164          			SetEPTxValid(ENDP1);
    165          			//StartDelay(600);
    166          			delay_cnt = 300;
    167          			while (count_in != 0 && delay_cnt != 0 && (bDeviceState == CONFIGURED))
    168          			{
    169          				delay_cnt--;
    170          				delay_ms(10);
    171          			}
    172          		}
    173          		if (res > 0)
    174          		{
    175          			//最后一包
    176          			count_in	= res;
    177          			UserToPMABufferCopy(pData+batch*VIRTUAL_COM_PORT_DATA_SIZE, ENDP1_TXADDR, count_in);
    178          			SetEPTxCount(ENDP1, count_in);
    179          			SetEPTxValid(ENDP1);
    180          			//StartDelay(600);
    181          			delay_cnt = 300;
    182          			while (count_in != 0 && delay_cnt != 0 &&(bDeviceState == CONFIGURED))
    183          			{
    184          				delay_cnt--;
    185          				delay_ms(10);
    186          			}
    187          		}
    188          	}//Virtual port
    189          	else 
    190          #elif (USB_DEVICE_CONFIG & _USE_USB_MASS_STOARGE_DEVICE)
    191          #ifdef DUMMY_FAT_FS
    192          	if((g_usb_type == USB_MASSSTORAGE)&&(g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_DUMMY_FAT))
    193          	{
    194          		if (length > G_SEND_BUF_LENGTH)
    195          		{
    196          			length = G_SEND_BUF_LENGTH;
    197          		}
    198          		MEMCPY(g_send_buff,pData,length);
    199          	}//USB_Masstorage
    200          #endif
    201          #endif
    202                  ;
    203          }
    204          
    205          //int usb_test_connect(void)
    206          //{
    207          //	volatile int i = 0;
    208          //	unsigned char pData[2] = {0};
    209          //
    210          //	count_in = 1;
    211          //	UserToPMABufferCopy(pData, GetEPTxAddr(ENDP1), count_in);
    212          //	/* enable endpoint for transmission */
    213          //	SetEPTxValid(ENDP1);
    214          //	while (count_in != 0 && i < 100000)
    215          //	{
    216          //		i++;
    217          //	}
    218          //	if (count_in == 0)
    219          //	{
    220          //		return 0;
    221          //	}
    222          //	return -1;
    223          //}
    224          
    225          /*******************************************************************************
    226          * Function Name  : Get_SerialNum.
    227          * Description    : Create the serial number string descriptor.
    228          * Input          : None.
    229          * Output         : None.
    230          * Return         : None.
    231          *******************************************************************************/
    232          void usb_Get_SerialNum(void)
    233          {
    234          	u32 Device_Serial0, Device_Serial1, Device_Serial2;
    235          
    236          	Device_Serial0 = *(u32*)(0x1FFFF7E8);
    237          	Device_Serial1 = *(u32*)(0x1FFFF7EC);
    238          	Device_Serial2 = *(u32*)(0x1FFFF7F0);
    239          
    240          	if (Device_Serial0 != 0)
    241          	{
    242          		USB_APP_StringSerial[2] = (u8)(Device_Serial0 & 0x000000FF);
    243          		USB_APP_StringSerial[4] = (u8)((Device_Serial0 & 0x0000FF00) >> 8);
    244          		USB_APP_StringSerial[6] = (u8)((Device_Serial0 & 0x00FF0000) >> 16);
    245          		USB_APP_StringSerial[8] = (u8)((Device_Serial0 & 0xFF000000) >> 24);
    246          
    247          		USB_APP_StringSerial[10] = (u8)(Device_Serial1 & 0x000000FF);
    248          		USB_APP_StringSerial[12] = (u8)((Device_Serial1 & 0x0000FF00) >> 8);
    249          		USB_APP_StringSerial[14] = (u8)((Device_Serial1 & 0x00FF0000) >> 16);
    250          		USB_APP_StringSerial[16] = (u8)((Device_Serial1 & 0xFF000000) >> 24);
    251          
    252          		USB_APP_StringSerial[18] = (u8)(Device_Serial2 & 0x000000FF);
    253          		USB_APP_StringSerial[20] = (u8)((Device_Serial2 & 0x0000FF00) >> 8);
    254          		USB_APP_StringSerial[22] = (u8)((Device_Serial2 & 0x00FF0000) >> 16);
    255          		USB_APP_StringSerial[24] = (u8)((Device_Serial2 & 0xFF000000) >> 24);
    256          	}
    257          }

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     usb_Get_SerialNum          8
     usb_Interrupts_Config      8
     usb_SendData               8
     usb_SetClock               8
     usb_cable_insert           0
     usb_device_init            8


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     g_mass_storage_device_type    1
     g_usb_type                    1
     usb_SetClock                 28
     usb_Interrupts_Config        64
     usb_cable_insert              2
     usb_device_init              76
     usb_SendData                 10
     usb_Get_SerialNum           104

 
   2 bytes in section .bss
 284 bytes in section .text
 
 284 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: 3
