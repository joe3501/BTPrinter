###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     10/Dec/2015  18:37:25 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Project\main.c                      #
#    Command line =  "E:\BT Printer\FW\src\Project\main.c" -D DEBUG_VER -lcN  #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\" -o    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None -I "E:\BT  #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\main.lst #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\main.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Project\main.c
      1          /**
      2          * @file main.c
      3          * @brief 蓝牙打印机项目主程序
      4          *
      5          * @version V0.0.1
      6          * @author joe
      7          * @date 2015年11月12日
      8          * @note
      9          *		none
     10          *
     11          * @copy
     12          *
     13          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     14          * 本公司以外的项目。本司保留一切追究权利。
     15          *
     16          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     17          */
     18          
     19          /* Private Includes ------------------------------------------------------------------*/
     20          #include "stm32f10x_lib.h"
     21          #include <string.h>
     22          #include <stdlib.h>
     23          #include "hw_platform.h"
     24          #include "data_uart.h"
     25          #include "TimeBase.h"
     26          #include "Terminal_para.h"
     27          #include "usb_app_config.h"
     28          #include "res_spi.h"
     29          #include "Event.h"
     30          /* Private define ------------------------------------------------------------*/
     31          
     32          // Cortex System Control register address
     33          #define SCB_SysCtrl					((u32)0xE000ED10)
     34          // SLEEPDEEP bit mask
     35          #define SysCtrl_SLEEPDEEP_Set		((u32)0x00000004)
     36          
     37          #ifdef DEBUG_VER
     38          unsigned char	debug_buffer[2];
     39          unsigned int	debug_cnt;
     40          #endif
     41          
     42          
     43          /* Global variables ---------------------------------------------------------*/
     44          ErrorStatus			HSEStartUpStatus;							//Extern crystal OK Flag
     45          
     46          
     47          /* Private functions ---------------------------------------------------------*/
     48          static void Unconfigure_All(void);
     49          static void GPIO_AllAinConfig(void);
     50          void RCC_Configuration(void);
     51          
     52          /* External variables -----------------------------------------------*/
     53          extern	TTerminalPara			g_param;					//Terminal Param
     54          
     55          /*******************************************************************************
     56          * Function Name  : system_error_tip
     57          * Description    : 严重的系统错误提示
     58          *******************************************************************************/
     59          void system_error_tip(void)
     60          {
     61          	//@todo...
     62          
     63          	while(1);
     64          }
     65          
     66          /*******************************************************************************
     67          * Function Name  : enter_u_disk_mode
     68          * Description    : 进入U盘模式
     69          *******************************************************************************/
     70          void enter_u_disk_mode(void)
     71          {
     72          	int key_state = 0;
     73          	g_mass_storage_device_type = MASSTORAGE_DEVICE_TYPE_SPI_FLASH;
     74          	usb_device_init(USB_MASSSTORAGE);
     75          	//usb_Cable_Config(ENABLE);
     76          	
     77          	while(1)
     78          	{
     79          		delay_ms(50);
     80          		if(!KEY_FEED())
     81          		{
     82          			key_state++;
     83          		}
     84          		else
     85          		{
     86          			key_state = 0;
     87          		}
     88          		if( key_state == 20)		//退出USB模式，系统复位
     89          		{
     90          			//usb_Cable_Config(DISABLE);
     91          			NVIC_SETFAULTMASK();
     92          			NVIC_GenerateSystemReset();
     93          		}
     94          	}
     95          }
     96          
     97          /*******************************************************************************
     98          * Function Name  : main
     99          * Description    : Main program.
    100          * Input          : None
    101          * Output         : None
    102          * Return         : None
    103          *******************************************************************************/
    104          int main(void)
    105          {
    106          	int	ret,key_state;
    107          	/* System Clocks Configuration **********************************************/
    108          	RCC_Configuration(); 
    109          #ifdef RELEASE_VER
    110          	/* NVIC Configuration *******************************************************/
    111          	NVIC_SetVectorTable(NVIC_VectTab_FLASH, IAP_SIZE);		//需要加密的 bootcode
    112          #else	
    113          	/* NVIC Configuration *******************************************************/
    114          	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
    115          #endif
    116          
    117          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);		//定义整个系统的优先级分组为Group1，1位抢占优先级（2个级别的中断嵌套）	3位响应优先级
    118          	
    119          	// Clear SLEEPDEEP bit of Cortex System Control Register
    120          	*(vu32 *) SCB_SysCtrl &= ~SysCtrl_SLEEPDEEP_Set;
    121          
    122          	Unconfigure_All();
    123          	// 数据串口(调试口)初始化
    124          	data_uart_init();
    125                 
    126                  //while(1);
    127          
    128          #ifdef DEBUG_VER
    129          	//MEMSET(debug_buffer,0,8000*2);
    130          	//debug_cnt = 0;
    131          
    132          	printf("BTPrinter startup...\r\n");
    133          	if (HSEStartUpStatus == SUCCESS)
    134          	{
    135          		printf("HSE OK!\r\n");
    136          	}
    137          	else
    138          	{
    139          		printf("HSE Failed!\r\n");
    140          	}
    141          #endif
    142          
    143          	//初始化时基函数
    144          	TimeBase_Init();
    145          
    146          
    147          	//初始化按键模块
    148          	KeyScanInit();
    149          
    150          	key_state = 0;
    151          	if (!KEY_FEED())
    152          	{
    153          		key_state = 1;
    154          	}
    155          #ifdef HW_VER_LCD
    156          	//初始化LCD
    157          	//@todo...		//for debug
    158          #else
    159          	//初始化LED
    160          	//@todo...
    161          	delay_ms(10);	//for debug
    162          #endif
    163          
    164          	if (!KEY_FEED())
    165          	{
    166          		if (key_state == 1)
    167          		{
    168          			key_state = 2;
    169          		}
    170          	}
    171           
    172          	//初始化参数模块（SPI FLASH）
    173          	ret = ReadTerminalPara();
    174          	if (ret)
    175          	{
    176          		if (ret > 0 || ret == -4)
    177          		{
    178          			if (DefaultTerminalPara())
    179          			{
    180          				system_error_tip();	//严重的错误，系统停止继续运行，可能进入诊断模式
    181          			}
    182          		}
    183          		else
    184          		{
    185          			system_error_tip();	//严重的错误，系统停止继续运行，可能进入诊断模式
    186          		}
    187          	}
    188          
    189          	event_init();
    190          	
    191          	//检查系统的字库资源是否正确
    192          	res_upgrade();
    193          	ret = res_init();
    194          	if (ret != 0)
    195          	{
    196          		enter_u_disk_mode();
    197          	}
    198          	else
    199          	{
    200          		if (key_state == 2)
    201          		{
    202          			if (usb_cable_insert())
    203          			{
    204          				enter_u_disk_mode();
    205          			}
    206          			else
    207          			{
    208          				event_post(evtKeyDownHold2000msMode);
    209          			}
    210          		}
    211          	}
    212          
    213          	//初始化热敏打印头的控制IO及定时器
    214          	print_head_init();
    215          
    216          	//初始化蓝牙模块
    217          	BT816_init();
    218          
    219          	esc_init();
    220          
    221          	usb_device_init(USB_PRINTER);
    222          	//test_motor();
    223          
    224          	PaperStartSns();		//Systick跳动起来
    225          
    226          
    227          	while (1)
    228          	{
    229          		esc_p();		//等待串口接收到的数据，根据不同的数据进行相应的处理
    230          	}
    231          }
    232          
    233          /*******************************************************************************
    234          * Function Name  : RCC_Configuration
    235          * Description    : Configures the different system clocks.
    236          * Input          : None
    237          * Output         : None
    238          * Return         : None
    239          *******************************************************************************/
    240          void RCC_Configuration(void)
    241          {   
    242          	vu32 i=0;
    243          
    244          	/* RCC system reset(for debug purpose) */
    245          	RCC_DeInit();
    246          
    247          	/* Enable HSE							*/
    248          	RCC_HSEConfig(RCC_HSE_ON);
    249          	// 这里要做延时，才能兼容某些比较差的晶体，以便顺利起震	
    250          	for(i=0; i<200000; i++);
    251          
    252          	/* Wait till HSE is ready			*/
    253          	HSEStartUpStatus = RCC_WaitForHSEStartUp();
    254          
    255          	if(HSEStartUpStatus == SUCCESS)
    256          	{
    257          		/* Enable Prefetch Buffer		*/
    258          		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    259          
    260          		/* Flash 2 wait state			*/
    261          		FLASH_SetLatency(FLASH_Latency_2);
    262          
    263          		/* HCLK = SYSCLK					*/
    264          		RCC_HCLKConfig(RCC_SYSCLK_Div1); 
    265          
    266          		/* PCLK2 = HCLK					*/
    267          		RCC_PCLK2Config(RCC_HCLK_Div1); 
    268          
    269          		/* PCLK1 = HCLK/2					*/
    270          		RCC_PCLK1Config(RCC_HCLK_Div2);
    271          
    272          		/* PLLCLK = 12MHz * 6 = 72 MHz	*/
    273          		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
    274          
    275          		/* PLLCLK = 8MHz * 9 = 72 MHz	*/
    276          		//RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
    277          
    278          		/* Enable PLL						*/
    279          		RCC_PLLCmd(ENABLE);
    280          
    281          		/* Wait till PLL is ready		*/
    282          		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
    283          		{
    284          		}
    285          
    286          		/* Select PLL as system clock source */
    287          		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    288          
    289          		/* Wait till PLL is used as system clock source */
    290          		while(RCC_GetSYSCLKSource() != 0x08)
    291          		{
    292          		}
    293          	}
    294          }
    295          
    296          /*******************************************************************************
    297          * Function Name  : Unconfigure_All
    298          * Description    : set all the RCC data to the default values 
    299          *                  configure all the GPIO as input
    300          * Input          : None
    301          * Output         : None
    302          * Return         : None
    303          *******************************************************************************/
    304          static void Unconfigure_All(void)
    305          {
    306          	//RCC_DeInit();
    307          
    308          	/* RCC configuration */
    309          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ALL, DISABLE);
    310          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_ALL, DISABLE);
    311          
    312          	GPIO_AllAinConfig();
    313          }
    314          
    315          
    316          /*******************************************************************************
    317          * Function Name  : GPIO_AllAinConfig
    318          * Description    : Configure all GPIO port pins in Analog Input mode 
    319          *                  (floating input trigger OFF)
    320          * Input          : None
    321          * Output         : None
    322          * Return         : None
    323          *******************************************************************************/
    324          static void GPIO_AllAinConfig(void)
    325          {
    326          	GPIO_InitTypeDef GPIO_InitStructure;
    327          
    328          	/* Configure all GPIO port pins in Analog Input mode (floating input trigger OFF) */
    329          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    330          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    331          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    332          	GPIO_Init(GPIOA, &GPIO_InitStructure);
    333          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    334          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    335          	GPIO_Init(GPIOD, &GPIO_InitStructure);
    336          	GPIO_Init(GPIOE, &GPIO_InitStructure);
    337          }
    338          
    339          /************************************************
    340          * Function Name  : EnterLowPowerMode()
    341          ************************************************/
    342          void EnterLowPowerMode(void)
    343          {
    344          	//GPIO_InitTypeDef GPIO_InitStructure;
    345          	//BT816_enter_sleep();
    346          	stop_real_timer();
    347          
    348          	//但是需要开启PWR模块的时钟
    349          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); // Enable PWR clock
    350          
    351          	// enable Debug in Stop mode
    352          	//DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
    353          	
    354          	//进入低功耗模式
    355          	EXTI_ClearFlag(0xffff);
    356          	PWR_EnterSTOPMode(PWR_Regulator_ON, PWR_STOPEntry_WFI);
    357          }
    358          
    359          /************************************************
    360          * Function Name  : ExitLowPowerMode()
    361          ************************************************/
    362          void ExitLowPowerMode(void)
    363          {
    364          	//GPIO_InitTypeDef GPIO_InitStructure;
    365          	//重新配置时钟
    366          	RCC_Configuration();
    367          	//BT816_wakeup();
    368          	start_real_timer();
    369          }
    370          
    371          //关闭某一个中断
    372           void NVIC_DisableIRQ(unsigned char	irq_channel)
    373          {
    374          	NVIC_InitTypeDef							NVIC_InitStructure;
    375          	/* Enable the TIM3 Interrupt */
    376          	NVIC_InitStructure.NVIC_IRQChannel			= irq_channel;
    377          	NVIC_InitStructure.NVIC_IRQChannelCmd		= DISABLE;
    378          	NVIC_Init(&NVIC_InitStructure);
    379          }
    380          
    381          //使能某一个中断
    382           void NVIC_EnableIRQ(unsigned char	irq_channel)
    383          {
    384          	NVIC_InitTypeDef							NVIC_InitStructure;
    385          	/* Enable the TIM3 Interrupt */
    386          	NVIC_InitStructure.NVIC_IRQChannel			= irq_channel;
    387          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    388          	NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 0;
    389          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
    390          	NVIC_Init(&NVIC_InitStructure);
    391          }
    392          
    393          
    394          
    395          /*******************************************************************************
    396          * Function Name  : assert_failed
    397          * Description    : Reports the name of the source file and the source line number
    398          *                  where the assert_param error has occurred.
    399          * Input          : - file: pointer to the source file name
    400          *                  - line: assert_param error line source number
    401          * Output         : None
    402          * Return         : None
    403          *******************************************************************************/
    404          
    405          //void assert_failed(u8* file, u32 line)
    406          //{ 
    407          /* User can add his own implementation to report the file name and line number,
    408          ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    409          
    410          /* Infinite loop */
    411          //while (1)
    412          //{
    413          //}
    414          //}
    415          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
    416          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     EnterLowPowerMode      8
     ExitLowPowerMode       8
     GPIO_AllAinConfig      8
     NVIC_DisableIRQ        8
     NVIC_EnableIRQ         8
     RCC_Configuration      8
     Unconfigure_All        8
     enter_u_disk_mode      8
     main                   8
     system_error_tip       0


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     debug_buffer                              2
     debug_cnt                                 4
     HSEStartUpStatus                          1
     system_error_tip                          2
     enter_u_disk_mode                        60
     main                                    248
     RCC_Configuration                       136
     Unconfigure_All                          32
     GPIO_AllAinConfig                        80
     EnterLowPowerMode                        34
     ExitLowPowerMode                         12
     NVIC_DisableIRQ                          20
     NVIC_EnableIRQ                           32
     ??DataTable5                              4
     ??DataTable6                              4
     ?<Constant "BTPrinter startup...\r\n">   24
     ?<Constant "HSE OK!\r\n">                12
     ?<Constant "HSE Failed!\r\n">            16

 
   7 bytes in section .bss
  52 bytes in section .rodata
 664 bytes in section .text
 
 664 bytes of CODE  memory
  52 bytes of CONST memory
   7 bytes of DATA  memory

Errors: none
Warnings: 2
