###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     04/Dec/2015  12:04:08 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Project\main.c                      #
#    Command line =  "E:\BT Printer\FW\src\Project\main.c" -D DEBUG_VER -lcN  #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\" -o    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I "E:\BT      #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\main.lst #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\main.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Project\main.c
      1          /**
      2          * @file main.c
      3          * @brief 蓝牙打印机项目主程序
      4          *
      5          * @version V0.0.1
      6          * @author joe
      7          * @date 2015年11月12日
      8          * @note
      9          *		none
     10          *
     11          * @copy
     12          *
     13          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     14          * 本公司以外的项目。本司保留一切追究权利。
     15          *
     16          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     17          */
     18          
     19          /* Private Includes ------------------------------------------------------------------*/
     20          #include "stm32f10x_lib.h"
     21          #include <string.h>
     22          #include <stdlib.h>
     23          #include "hw_platform.h"
     24          #include "data_uart.h"
     25          #include "TimeBase.h"
     26          #include "Terminal_para.h"
     27          #include "usb_app_config.h"
     28          #include "res_spi.h"
     29          /* Private define ------------------------------------------------------------*/
     30          
     31          // Cortex System Control register address
     32          #define SCB_SysCtrl					((u32)0xE000ED10)
     33          // SLEEPDEEP bit mask
     34          #define SysCtrl_SLEEPDEEP_Set		((u32)0x00000004)
     35          
     36          #ifdef DEBUG_VER
     37          unsigned short	debug_buffer[8000];
     38          unsigned int	debug_cnt;
     39          #endif
     40          
     41          
     42          /* Global variables ---------------------------------------------------------*/
     43          ErrorStatus			HSEStartUpStatus;							//Extern crystal OK Flag
     44          
     45          
     46          /* Private functions ---------------------------------------------------------*/
     47          static void Unconfigure_All(void);
     48          static void GPIO_AllAinConfig(void);
     49          void RCC_Configuration(void);
     50          
     51          /* External variables -----------------------------------------------*/
     52          extern	TTerminalPara			g_param;					//Terminal Param
     53          
     54          /*******************************************************************************
     55          * Function Name  : system_error_tip
     56          * Description    : 严重的系统错误提示
     57          *******************************************************************************/
     58          void system_error_tip(void)
     59          {
     60          	//@todo...
     61          
     62          	while(1);
     63          }
     64          
     65          /*******************************************************************************
     66          * Function Name  : enter_u_disk_mode
     67          * Description    : 进入U盘模式
     68          *******************************************************************************/
     69          void enter_u_disk_mode(void)
     70          {
     71          	int key_state = 0;
     72          	g_mass_storage_device_type = MASSTORAGE_DEVICE_TYPE_SPI_FLASH;
     73          	usb_device_init(USB_MASSSTORAGE);
     74          	usb_Cable_Config(ENABLE);
     75          	
     76          	while(1)
     77          	{
     78          		delay_ms(50);
     79          		if(!KEY_FEED())
     80          		{
     81          			key_state++;
     82          		}
     83          		else
     84          		{
     85          			key_state = 0;
     86          		}
     87          		if( key_state == 20)		//退出USB模式，系统复位
     88          		{
     89          			usb_Cable_Config(DISABLE);
     90          			NVIC_SETFAULTMASK();
     91          			NVIC_GenerateSystemReset();
     92          		}
     93          	}
     94          }
     95          
     96          /*******************************************************************************
     97          * Function Name  : main
     98          * Description    : Main program.
     99          * Input          : None
    100          * Output         : None
    101          * Return         : None
    102          *******************************************************************************/
    103          int main(void)
    104          {
    105          	int	ret,key_state;
    106          	/* System Clocks Configuration **********************************************/
    107          	RCC_Configuration(); 
    108          #ifdef RELEASE_VER
    109          	/* NVIC Configuration *******************************************************/
    110          	NVIC_SetVectorTable(NVIC_VectTab_FLASH, IAP_SIZE);		//需要加密的 bootcode
    111          #else	
    112          	/* NVIC Configuration *******************************************************/
    113          	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
    114          #endif
    115          
    116          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);		//定义整个系统的优先级分组为Group1，1位抢占优先级（2个级别的中断嵌套）	3位响应优先级
    117          	
    118          	// Clear SLEEPDEEP bit of Cortex System Control Register
    119          	*(vu32 *) SCB_SysCtrl &= ~SysCtrl_SLEEPDEEP_Set;
    120          
    121          	Unconfigure_All();
    122          	// 数据串口(调试口)初始化
    123          	data_uart_init();
    124                 
    125                  //while(1);
    126          
    127          #ifdef DEBUG_VER
    128          	memset(debug_buffer,0,8000*2);
    129          	debug_cnt = 0;
    130          
    131          	printf("BTPrinter startup...\r\n");
    132          	if (HSEStartUpStatus == SUCCESS)
    133          	{
    134          		printf("HSE OK!\r\n");
    135          	}
    136          	else
    137          	{
    138          		printf("HSE Failed!\r\n");
    139          	}
    140          #endif
    141          
    142          	//初始化时基函数
    143          	TimeBase_Init();
    144          
    145          
    146          	//初始化按键模块
    147          	KeyScanInit();
    148          
    149          	key_state = 0;
    150          	if (!KEY_FEED())
    151          	{
    152          		key_state = 1;
    153          	}
    154          #ifdef HW_VER_LCD
    155          	//初始化LCD
    156          	//@todo...		//for debug
    157          #else
    158          	//初始化LED
    159          	//@todo...
    160          	delay_ms(10);	//for debug
    161          #endif
    162          
    163          	if (!KEY_FEED())
    164          	{
    165          		if (key_state == 1)
    166          		{
    167          			key_state = 2;
    168          		}
    169          	}
    170           
    171          	//初始化参数模块（SPI FLASH）
    172          	ret = ReadTerminalPara();
    173          	if (ret)
    174          	{
    175          		if (ret > 0 || ret == -4)
    176          		{
    177          			if (DefaultTerminalPara())
    178          			{
    179          				system_error_tip();	//严重的错误，系统停止继续运行，可能进入诊断模式
    180          			}
    181          		}
    182          		else
    183          		{
    184          			system_error_tip();	//严重的错误，系统停止继续运行，可能进入诊断模式
    185          		}
    186          	}
    187          
    188          	
    189          	//检查系统的字库资源是否正确
    190          	res_upgrade();
    191          	ret = res_init();
    192          
    193          	if ((key_state == 2) || (ret!=0))	//开机时长按进纸键或者检测到系统的字库资源不正确时，进入U盘模式
    194          	{
    195          		enter_u_disk_mode();
    196          	}
    197          	//初始化热敏打印头的控制IO及定时器
    198          	print_head_init();
    199          
    200          	//初始化蓝牙模块
    201          	BT816_init();
    202          
    203          	esc_init();
    204          
    205          	//test_motor();
    206          
    207          	PaperStartSns();		//Systick跳动起来
    208          
    209          
    210          	while (1)
    211          	{
    212          		esc_p();		//等待串口接收到的数据，根据不同的数据进行相应的处理
    213          	}
    214          }
    215          
    216          /*******************************************************************************
    217          * Function Name  : RCC_Configuration
    218          * Description    : Configures the different system clocks.
    219          * Input          : None
    220          * Output         : None
    221          * Return         : None
    222          *******************************************************************************/
    223          void RCC_Configuration(void)
    224          {   
    225          	vu32 i=0;
    226          
    227          	/* RCC system reset(for debug purpose) */
    228          	RCC_DeInit();
    229          
    230          	/* Enable HSE							*/
    231          	RCC_HSEConfig(RCC_HSE_ON);
    232          	// 这里要做延时，才能兼容某些比较差的晶体，以便顺利起震	
    233          	for(i=0; i<200000; i++);
    234          
    235          	/* Wait till HSE is ready			*/
    236          	HSEStartUpStatus = RCC_WaitForHSEStartUp();
    237          
    238          	if(HSEStartUpStatus == SUCCESS)
    239          	{
    240          		/* Enable Prefetch Buffer		*/
    241          		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    242          
    243          		/* Flash 2 wait state			*/
    244          		FLASH_SetLatency(FLASH_Latency_2);
    245          
    246          		/* HCLK = SYSCLK					*/
    247          		RCC_HCLKConfig(RCC_SYSCLK_Div1); 
    248          
    249          		/* PCLK2 = HCLK					*/
    250          		RCC_PCLK2Config(RCC_HCLK_Div1); 
    251          
    252          		/* PCLK1 = HCLK/2					*/
    253          		RCC_PCLK1Config(RCC_HCLK_Div2);
    254          
    255          		/* PLLCLK = 12MHz * 6 = 72 MHz	*/
    256          		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
    257          
    258          		/* PLLCLK = 8MHz * 9 = 72 MHz	*/
    259          		//RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
    260          
    261          		/* Enable PLL						*/
    262          		RCC_PLLCmd(ENABLE);
    263          
    264          		/* Wait till PLL is ready		*/
    265          		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
    266          		{
    267          		}
    268          
    269          		/* Select PLL as system clock source */
    270          		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    271          
    272          		/* Wait till PLL is used as system clock source */
    273          		while(RCC_GetSYSCLKSource() != 0x08)
    274          		{
    275          		}
    276          	}
    277          }
    278          
    279          /*******************************************************************************
    280          * Function Name  : Unconfigure_All
    281          * Description    : set all the RCC data to the default values 
    282          *                  configure all the GPIO as input
    283          * Input          : None
    284          * Output         : None
    285          * Return         : None
    286          *******************************************************************************/
    287          static void Unconfigure_All(void)
    288          {
    289          	//RCC_DeInit();
    290          
    291          	/* RCC configuration */
    292          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ALL, DISABLE);
    293          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_ALL, DISABLE);
    294          
    295          	GPIO_AllAinConfig();
    296          }
    297          
    298          
    299          /*******************************************************************************
    300          * Function Name  : GPIO_AllAinConfig
    301          * Description    : Configure all GPIO port pins in Analog Input mode 
    302          *                  (floating input trigger OFF)
    303          * Input          : None
    304          * Output         : None
    305          * Return         : None
    306          *******************************************************************************/
    307          static void GPIO_AllAinConfig(void)
    308          {
    309          	GPIO_InitTypeDef GPIO_InitStructure;
    310          
    311          	/* Configure all GPIO port pins in Analog Input mode (floating input trigger OFF) */
    312          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    313          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    314          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    315          	GPIO_Init(GPIOA, &GPIO_InitStructure);
    316          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    317          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    318          	GPIO_Init(GPIOD, &GPIO_InitStructure);
    319          	GPIO_Init(GPIOE, &GPIO_InitStructure);
    320          }
    321          
    322          /************************************************
    323          * Function Name  : EnterLowPowerMode()
    324          ************************************************/
    325          void EnterLowPowerMode(void)
    326          {
    327          	//GPIO_InitTypeDef GPIO_InitStructure;
    328          	//BT816_enter_sleep();
    329          	stop_real_timer();
    330          
    331          	//但是需要开启PWR模块的时钟
    332          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); // Enable PWR clock
    333          
    334          	// enable Debug in Stop mode
    335          	//DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
    336          	
    337          	//进入低功耗模式
    338          	EXTI_ClearFlag(0xffff);
    339          	PWR_EnterSTOPMode(PWR_Regulator_ON, PWR_STOPEntry_WFI);
    340          }
    341          
    342          /************************************************
    343          * Function Name  : ExitLowPowerMode()
    344          ************************************************/
    345          void ExitLowPowerMode(void)
    346          {
    347          	//GPIO_InitTypeDef GPIO_InitStructure;
    348          	//重新配置时钟
    349          	RCC_Configuration();
    350          	//BT816_wakeup();
    351          	start_real_timer();
    352          }
    353          
    354          //关闭某一个中断
    355           void NVIC_DisableIRQ(unsigned char	irq_channel)
    356          {
    357          	NVIC_InitTypeDef							NVIC_InitStructure;
    358          	/* Enable the TIM3 Interrupt */
    359          	NVIC_InitStructure.NVIC_IRQChannel			= irq_channel;
    360          	NVIC_InitStructure.NVIC_IRQChannelCmd		= DISABLE;
    361          	NVIC_Init(&NVIC_InitStructure);
    362          }
    363          
    364          //使能某一个中断
    365           void NVIC_EnableIRQ(unsigned char	irq_channel)
    366          {
    367          	NVIC_InitTypeDef							NVIC_InitStructure;
    368          	/* Enable the TIM3 Interrupt */
    369          	NVIC_InitStructure.NVIC_IRQChannel			= irq_channel;
    370          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    371          	NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 0;
    372          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
    373          	NVIC_Init(&NVIC_InitStructure);
    374          }
    375          
    376          
    377          
    378          /*******************************************************************************
    379          * Function Name  : assert_failed
    380          * Description    : Reports the name of the source file and the source line number
    381          *                  where the assert_param error has occurred.
    382          * Input          : - file: pointer to the source file name
    383          *                  - line: assert_param error line source number
    384          * Output         : None
    385          * Return         : None
    386          *******************************************************************************/
    387          
    388          //void assert_failed(u8* file, u32 line)
    389          //{ 
    390          /* User can add his own implementation to report the file name and line number,
    391          ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    392          
    393          /* Infinite loop */
    394          //while (1)
    395          //{
    396          //}
    397          //}
    398          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
    399          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     EnterLowPowerMode      8
     ExitLowPowerMode       8
     GPIO_AllAinConfig      8
     NVIC_DisableIRQ        8
     NVIC_EnableIRQ         8
     RCC_Configuration      8
     Unconfigure_All        8
     enter_u_disk_mode      8
     main                   8
     memset                 8
     system_error_tip       0


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     memset                                    20
     debug_buffer                           16000
     debug_cnt                                  4
     HSEStartUpStatus                           1
     system_error_tip                           2
     enter_u_disk_mode                         72
     main                                     244
     RCC_Configuration                        136
     Unconfigure_All                           32
     GPIO_AllAinConfig                         80
     EnterLowPowerMode                         34
     ExitLowPowerMode                          12
     NVIC_DisableIRQ                           20
     NVIC_EnableIRQ                            32
     ??DataTable5                               4
     ??DataTable6                               4
     ?<Constant "BTPrinter startup...\r\n">    24
     ?<Constant "HSE OK!\r\n">                 12
     ?<Constant "HSE Failed!\r\n">             16

 
 16 005 bytes in section .bss
     52 bytes in section .rodata
    692 bytes in section .text
 
    672 bytes of CODE  memory (+ 20 bytes shared)
     52 bytes of CONST memory
 16 005 bytes of DATA  memory

Errors: none
Warnings: none
