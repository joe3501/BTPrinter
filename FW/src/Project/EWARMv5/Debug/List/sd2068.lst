###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     19/May/2015  10:28:22 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\T6\FW\src\Drivers\sd2068.c                            #
#    Command line =  E:\T6\FW\src\Drivers\sd2068.c -lcN                       #
#                    E:\T6\FW\src\Project\EWARMv5\Debug\List\ -o              #
#                    E:\T6\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\T6\FW\src\Project\EWARMv5\..\ -I                      #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\App\ -I               #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\Drivers\ -I           #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\FatFs\ -I             #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I           #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I       #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I       #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports\   #
#                    -I E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Sourc #
#                    e\ -I E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-Probe\  #
#                    -I E:\T6\FW\src\Project\EWARMv5\..\..\usb_lib\ -I        #
#                    "D:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\T6\FW\src\Project\EWARMv5\Debug\List\sd2068.lst       #
#    Object file  =  E:\T6\FW\src\Project\EWARMv5\Debug\Obj\sd2068.o          #
#                                                                             #
#                                                                             #
###############################################################################

E:\T6\FW\src\Drivers\sd2068.c
      1          /**
      2           * @file ds2068
      3           * @brief DS2068驱动程序
      4           *
      5           * @version V0.0.2
      6           * @author zhongyh
      7           * @date 2010年2月
      8           *
      9           * @version V0.0.1
     10           * @author liyj
     11           * @date 2010年01月
     12           * @note
     13           *      1.SD2068寄存器的数据为BCD码存储，例如23秒，即为0x23
     14           *      2.
     15           *
     16           * @copy
     17           *
     18           * 此代码为深圳江波龙电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     19           * 本公司以外的项目。本司保留一切追究权利。
     20           *
     21           * <h1><center>&copy; COPYRIGHT 2010 netcom</center></h1>
     22           */
     23          
     24          #include "stm32f10x_lib.h"
     25          #include "sd2068.h"
     26          
     27          
     28          #define  READ_COMMAND			0x65
     29          #define  WRITE_COMMAND			0x64
     30          #define  ReviseTime				0x12
     31          
     32          #define Second_Address			0x00
     33          #define MINUTE_Address			0x01
     34          #define HOUR_Address			0x02
     35          #define WEEK_Address			0x03
     36          #define DAY_Address				0x04
     37          #define MONTH_Address			0x05
     38          #define YEAR_Address			0x06
     39          
     40          
     41          #define  SD2068A_SCL_HIGH()     GPIO_SetBits(GPIOE,GPIO_Pin_2) 
     42          #define  SD2068A_SCL_LOW()      GPIO_ResetBits(GPIOE,GPIO_Pin_2) 
     43          #define  SD2068A_SDA_HIGH()     GPIO_SetBits(GPIOE,GPIO_Pin_3) 
     44          #define  SD2068A_SDA_LOW()      GPIO_ResetBits(GPIOE,GPIO_Pin_3) 
     45          #define  SD2068A_SDA_GET()      GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_3)
     46          
     47          #define BCD2DEC(X)				(((X&0x70)>>4)*10 + (X&0x0F))	//用于将BCD码转成十进制的宏
     48          #define DEC2BCD(X)				((X/10)<<4 | (X%10))			//用于将十进制转成BCD码的宏
     49          
     50          
     51          static int SD2068A_WriteTimeOn(void);
     52          static int  SD2068A_WriteTimeOff(void);
     53          
     54          static void  SD2068A_PortInitial(void)
     55          {
     56          	GPIO_InitTypeDef					GPIO_InitStructure;
     57          
     58          	//SCL-----PE2,  SDA----PE3 , INT---- PB5,
     59          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE);
     60          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
     61          
     62          	GPIO_InitStructure.GPIO_Pin			= GPIO_Pin_2;
     63          	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
     64          	GPIO_InitStructure.GPIO_Mode		= GPIO_Mode_Out_PP;//推挽输出
     65          	GPIO_Init(GPIOE, &GPIO_InitStructure);
     66          
     67          	GPIO_InitStructure.GPIO_Pin			= GPIO_Pin_3;
     68          	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
     69          	GPIO_InitStructure.GPIO_Mode		= GPIO_Mode_Out_OD;//开漏输出
     70          	GPIO_Init(GPIOE, &GPIO_InitStructure);
     71          
     72          	GPIO_InitStructure.GPIO_Pin			= GPIO_Pin_5;
     73          	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
     74          	GPIO_InitStructure.GPIO_Mode		= GPIO_Mode_Out_OD;//开漏输出
     75          	GPIO_Init(GPIOB, &GPIO_InitStructure);
     76          }
     77          
     78          /* 将SDA设为输入					*/
     79          static void  SD2068A_SDA_IN(void)
     80          {
     81          	GPIO_InitTypeDef					GPIO_InitStructure;
     82          
     83          	GPIO_InitStructure.GPIO_Pin			= GPIO_Pin_3;
     84          	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
     85          	GPIO_InitStructure.GPIO_Mode		= GPIO_Mode_IPU;
     86          	GPIO_Init(GPIOE, &GPIO_InitStructure);
     87          }
     88          
     89          /* 将SDA设为输出					*/
     90          static void  SD2068A_SDA_OUT(void)
     91          {
     92          	GPIO_InitTypeDef					GPIO_InitStructure;
     93          
     94          	GPIO_InitStructure.GPIO_Pin			= GPIO_Pin_3;
     95          	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
     96          	GPIO_InitStructure.GPIO_Mode		= GPIO_Mode_Out_OD;//开漏输出
     97          	GPIO_Init(GPIOE, &GPIO_InitStructure);
     98          }
     99          
    100          /*
    101          void  SD2068A_DataInitial(unsigned char *TimeBuff)
    102          {
    103          	unsigned char						i;
    104          
    105          	SD2068_Time.Second = TimeBuff[0];
    106          	SD2068_Time.Minute = TimeBuff[1];
    107          	SD2068_Time.Hour   = TimeBuff[2];
    108          	SD2068_Time.Week   = TimeBuff[3];
    109          	SD2068_Time.Day    = TimeBuff[4];
    110          	SD2068_Time.Month  = TimeBuff[5];
    111          	SD2068_Time.Year   = TimeBuff[6];
    112          
    113          }
    114          */
    115          
    116          void  SD2068A_Initial(void)
    117          {
    118          	SD2068A_PortInitial();
    119          //	USART1_DataInitialFunction();
    120          //	SD2068A_DataInitial();
    121          //	SD2068A_SetTime();
    122          }
    123          
    124          
    125          static void  SD2068A_I2CWait(void)
    126          {
    127          	volatile unsigned char i;
    128          
    129          	for(i = 0;i<8;i++);
    130          }
    131          
    132          
    133          /***SCL处于高电平，SDA由高变低构成一个开始条件****/
    134          
    135          static int  SD2068A_I2CStart(void)
    136          {
    137          	SD2068A_SDA_OUT();
    138          	SD2068A_SDA_HIGH();
    139          	SD2068A_SCL_HIGH();
    140          	SD2068A_I2CWait();
    141          	if(!SD2068A_SDA_GET())  //SDA线为低电平则总线忙，退出
    142          	{
    143          		return -1;
    144          	}
    145          	SD2068A_SDA_LOW();
    146          	SD2068A_I2CWait();
    147          	while(SD2068A_SDA_GET())//SDA线为高电平则总线忙，退出
    148          	{
    149          		return -1;
    150          	}
    151          	SD2068A_SCL_LOW();
    152          	SD2068A_I2CWait();
    153          	return 0;
    154          }
    155          
    156          /******关闭I2C总线******************/
    157          static void  SD2068A_I2CStop(void)
    158          {
    159          	SD2068A_SDA_OUT();
    160          
    161          	SD2068A_SDA_LOW();
    162          	SD2068A_SCL_LOW();
    163          	SD2068A_I2CWait();
    164          	SD2068A_SCL_HIGH();
    165          	SD2068A_I2CWait();
    166          	SD2068A_SDA_HIGH();
    167          }
    168          
    169          /********发送ACK*****/
    170          static void  SD2068A_I2CAck(void)
    171          {
    172          	SD2068A_SDA_OUT();
    173          	SD2068A_SDA_LOW();
    174          	SD2068A_SCL_LOW();
    175          	SD2068A_I2CWait();
    176          	SD2068A_SCL_HIGH();
    177          	SD2068A_I2CWait();
    178          	SD2068A_SCL_LOW();
    179          
    180          }
    181          
    182          /******没有ACK*******/
    183          static void  SD2068A_I2CNoAck(void)
    184          {
    185          	SD2068A_SDA_OUT();
    186          	SD2068A_SDA_HIGH();
    187          	SD2068A_SCL_LOW();
    188          	SD2068A_I2CWait();
    189          	SD2068A_SCL_HIGH();
    190          	SD2068A_I2CWait();
    191          	SD2068A_SCL_LOW();
    192          
    193          }
    194          
    195          /*************读取ACK信号************返回1 有 ACK，0 = 无ACK***/
    196          static int SD2068A_I2CWaitAck(void)
    197          {
    198          	unsigned char ErrTime = 255;
    199          
    200          	SD2068A_SCL_LOW();
    201          	SD2068A_SDA_HIGH();
    202          	SD2068A_SDA_IN();
    203          
    204          	SD2068A_I2CWait();
    205          	SD2068A_SCL_HIGH();
    206          	SD2068A_I2CWait();
    207          	while(SD2068A_SDA_GET())
    208          	{
    209          		ErrTime--;
    210          		if(!ErrTime)
    211          		{
    212          			SD2068A_SCL_LOW();
    213          			return -1;
    214          		}
    215          	}
    216          	SD2068A_SCL_LOW();
    217          	return 0;
    218          }
    219          
    220          /************MCU向SD2068发送一个字节*************/
    221          static void  SD2068A_I2CSendByte(unsigned char WriteData)  //数据从高位到低位//
    222          {
    223          	volatile int x;
    224          	unsigned char i = 8;
    225          	while(i--)
    226          	{
    227          		SD2068A_SCL_LOW();
    228          
    229          		for(x=5;x>0;x--);
    230          
    231          		if(WriteData & 0x80)
    232          		{
    233          			SD2068A_SDA_HIGH();
    234          		}
    235          		else
    236          		{
    237          			SD2068A_SDA_LOW();
    238          		}
    239          		SD2068A_I2CWait();
    240          		SD2068A_SCL_HIGH();
    241          		SD2068A_I2CWait();
    242          		WriteData<<=1;
    243          	}
    244          	SD2068A_SCL_LOW();
    245          }
    246          
    247          /*********MCU从SD2068读入一字节*********/
    248          static unsigned char  SD2068A_I2CReceiveByte(void) //数据从高位到低位//
    249          {
    250          	unsigned char  ReadData = 0;
    251          	unsigned char	i = 8;
    252          
    253          	SD2068A_SDA_HIGH();			//设置SDA 为输入
    254          	while(i--)
    255          	{
    256          		ReadData<<=1;
    257          		SD2068A_SCL_LOW();
    258          		SD2068A_I2CWait();
    259          		SD2068A_I2CWait();
    260          		SD2068A_SCL_HIGH();
    261          		SD2068A_I2CWait();
    262          		SD2068A_I2CWait();
    263          		if(SD2068A_SDA_GET())
    264          		{
    265          			ReadData |= 0x01;
    266          		}
    267          	}
    268          	SD2068A_SCL_LOW();
    269          	return ReadData;
    270          }
    271          
    272          /******读SD2068实时数据寄存器******/
    273          /**
    274           * @brief 从2068中读取时间
    275           * @param[in] 
    276           * @return 
    277           * @note 
    278           */
    279          static int SD2068A_I2CReadDate(unsigned char *TimeBuff)
    280          {
    281          	unsigned char n;
    282          	if(SD2068A_I2CStart() != 0)
    283          	{
    284          		return -1;
    285          	}
    286          	SD2068A_I2CSendByte(READ_COMMAND);
    287          
    288          	if(SD2068A_I2CWaitAck() != 0)
    289          	{
    290          		SD2068A_I2CStop();
    291          		return -1;
    292          	}
    293          
    294          	for(n = 0;n<7;n++)
    295          	{
    296          		TimeBuff[n] = SD2068A_I2CReceiveByte();
    297          
    298          		if( n != 6)
    299          		{
    300          			SD2068A_I2CAck();
    301          		}
    302          	}
    303          	SD2068A_I2CNoAck();
    304          	SD2068A_I2CStop();
    305          	return 0;
    306          }
    307          
    308          /******写SD2068实时数据寄存器******/
    309          static int SD2068A_I2CWriteDate(unsigned char* WriteData)
    310          {
    311          	SD2068A_WriteTimeOn();
    312          
    313          	if(SD2068A_I2CStart() != 0)
    314          	{
    315          		return -1;
    316          	}
    317          
    318          	SD2068A_I2CSendByte(WRITE_COMMAND);
    319          
    320          	if( 0 != SD2068A_I2CWaitAck())
    321          	{
    322          		SD2068A_I2CStop();
    323          		return -1;
    324          	}
    325          
    326          	SD2068A_SDA_OUT();
    327          	SD2068A_I2CSendByte(Second_Address);  //设置写起始地址
    328          	SD2068A_I2CWaitAck();
    329          	SD2068A_SDA_OUT();
    330          	SD2068A_I2CSendByte(DEC2BCD(WriteData[0]));  //Second
    331          	SD2068A_I2CWaitAck();
    332          	SD2068A_SDA_OUT();
    333          	SD2068A_I2CSendByte(DEC2BCD(WriteData[1]));  //minute
    334          	SD2068A_I2CWaitAck();
    335          	SD2068A_SDA_OUT();
    336          	SD2068A_I2CSendByte(DEC2BCD(WriteData[2]) | 0x80);  //hour,24小时制
    337          	SD2068A_I2CWaitAck();
    338          	SD2068A_SDA_OUT();
    339          	SD2068A_I2CSendByte(DEC2BCD(WriteData[3]));  //week
    340          	SD2068A_I2CWaitAck();
    341          	SD2068A_SDA_OUT();
    342          	SD2068A_I2CSendByte(DEC2BCD(WriteData[4]));  //DAY
    343          	SD2068A_I2CWaitAck();
    344          	SD2068A_SDA_OUT();
    345          	SD2068A_I2CSendByte(DEC2BCD(WriteData[5]));  //MONTH
    346          	SD2068A_I2CWaitAck();
    347          	SD2068A_SDA_OUT();
    348          	SD2068A_I2CSendByte(DEC2BCD(WriteData[6]));  //year
    349          	SD2068A_I2CWaitAck();
    350          	SD2068A_I2CStop();
    351          
    352          	SD2068A_I2CStart();
    353          	SD2068A_I2CSendByte(WRITE_COMMAND);
    354          	SD2068A_I2CWaitAck();
    355          	SD2068A_SDA_OUT();
    356          	SD2068A_I2CSendByte(ReviseTime);//设置调整时间地址
    357          	SD2068A_I2CWaitAck();
    358          	SD2068A_SDA_OUT();
    359          	SD2068A_I2CSendByte(0x00);//零数字调整寄存器 
    360          	SD2068A_I2CWaitAck();
    361          	SD2068A_I2CStop();
    362          	SD2068A_WriteTimeOff();
    363          	return 0;
    364          }
    365          
    366          /******写SD2068允许程序******/
    367          static int SD2068A_WriteTimeOn(void)
    368          {
    369          	if(0 != SD2068A_I2CStart())
    370          	{ 
    371          		return -1;
    372          	}
    373          
    374          	SD2068A_I2CSendByte(WRITE_COMMAND);
    375          
    376          	if( 0 != SD2068A_I2CWaitAck())
    377          	{
    378          		SD2068A_I2CStop();
    379          		return -1;
    380          	}
    381          
    382          	SD2068A_SDA_OUT();
    383          	SD2068A_I2CSendByte(0x10);//设置写地址10H,CTR2
    384          	SD2068A_I2CWaitAck();
    385          
    386          	SD2068A_SDA_OUT();
    387          	SD2068A_I2CSendByte(0x80); //置WRTC1 = 1
    388          	SD2068A_I2CWaitAck();
    389          	SD2068A_I2CStop();
    390          
    391          	SD2068A_I2CStart();
    392          	SD2068A_I2CSendByte(WRITE_COMMAND);
    393          	SD2068A_I2CWaitAck();
    394          
    395          	SD2068A_SDA_OUT();
    396          	SD2068A_I2CSendByte(0x0f);//设置写地址0FH ,CTR1
    397          	SD2068A_I2CWaitAck();
    398          
    399          	SD2068A_SDA_OUT();
    400          	SD2068A_I2CSendByte(0x84);//置WRTC2，WRTC3 = 1
    401          	SD2068A_I2CWaitAck();
    402          	SD2068A_I2CStop();
    403          	return 0;
    404          }
    405          
    406          /******写SD2068禁止程序******/
    407          static int  SD2068A_WriteTimeOff(void)
    408          {
    409          	if(0 != SD2068A_I2CStart())
    410          	{
    411          		return -1;
    412          	}
    413          	SD2068A_I2CSendByte(WRITE_COMMAND);
    414          	if( 0 != SD2068A_I2CWaitAck())
    415          	{
    416          		SD2068A_I2CStop();
    417          		return -1;
    418          	}
    419          	SD2068A_SDA_OUT();
    420          	SD2068A_I2CSendByte(0x0f);//设置写地址0FH ,CTR1
    421          	SD2068A_I2CWaitAck();
    422          	SD2068A_SDA_OUT();
    423          	SD2068A_I2CSendByte(0X00);//置WRTC2，WRTC3 = 0
    424          	SD2068A_I2CWaitAck();
    425          	SD2068A_SDA_OUT();
    426          	SD2068A_I2CSendByte(0x00);//置WRTC1=0(10H地址)
    427          	SD2068A_I2CWaitAck();
    428          	SD2068A_I2CStop();
    429          	return 0;
    430          }
    431          
    432          /**
    433           * @brief 获取RTC中的时间,秒:分:时:周:日:月:年
    434           * @param[in] 
    435           * @return 0 获取时间成功
    436           *        -1 获取时间失败
    437           * @note 输出:
    438           */
    439          int  SD2068A_GetTime(unsigned char *TimeBuff)
    440          {
    441          	if(SD2068A_I2CReadDate(TimeBuff) != 0)
    442          	{
    443          		return -1;
    444          	}
    445          
    446          	// BCD转10进制
    447          	TimeBuff[0]				= BCD2DEC(TimeBuff[0]);	// 秒
    448          	TimeBuff[1]				= BCD2DEC(TimeBuff[1]);	// 分
    449          	TimeBuff[2]				= BCD2DEC(TimeBuff[2]);	// 时
    450          	TimeBuff[3]				= BCD2DEC(TimeBuff[3]);	// 周
    451          	TimeBuff[4]				= BCD2DEC(TimeBuff[4]);	// 日
    452          	TimeBuff[5]				= BCD2DEC(TimeBuff[5]); // 月
    453          	TimeBuff[6]				= BCD2DEC(TimeBuff[6]); // 年
    454          
    455          	return 0;
    456          
    457          }
    458          
    459          /**
    460           * @brief 设置RTC中的时间
    461           * @param[in] unsigned char *TimeBuff 格式 秒:分:时:周:日:月:年
    462           * @return 0 设置时间成功
    463           *        -1 设置时间失败
    464           * @note 输入：秒分时，周，日月年，十进制
    465           */
    466          int  SD2068A_SetTime(unsigned char *TimeBuff)
    467          {
    468          //	TimeBuff[0] = SD2068_Time.Second ;
    469          //	TimeBuff[1] = SD2068_Time.Minute ;
    470          //	TimeBuff[2] = SD2068_Time.Hour ;
    471          //	TimeBuff[3] = SD2068_Time.Week ;
    472          //	TimeBuff[4] = SD2068_Time.Day ;
    473          //	TimeBuff[5] = SD2068_Time.Month ;
    474          //	TimeBuff[6] = SD2068_Time.Year ;
    475          
    476          	return SD2068A_I2CWriteDate(TimeBuff);
    477          
    478          }
    479          
    480          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     SD2068A_GetTime             8
     SD2068A_I2CAck              8
     SD2068A_I2CNoAck            8
     SD2068A_I2CReadDate        16
     SD2068A_I2CReceiveByte     16
     SD2068A_I2CSendByte        16
     SD2068A_I2CStart            8
     SD2068A_I2CStop             8
     SD2068A_I2CWait             8
     SD2068A_I2CWaitAck          8
     SD2068A_I2CWriteDate        8
     SD2068A_Initial             8
     SD2068A_PortInitial         8
     SD2068A_SDA_IN              8
     SD2068A_SDA_OUT             8
     SD2068A_SetTime             8
     SD2068A_WriteTimeOff        8
     SD2068A_WriteTimeOn         8


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     SD2068A_PortInitial     104
     SD2068A_SDA_IN           30
     SD2068A_SDA_OUT          30
     SD2068A_Initial           8
     SD2068A_I2CWait          32
     SD2068A_I2CStart         90
     SD2068A_I2CStop          48
     SD2068A_I2CAck           48
     SD2068A_I2CNoAck         48
     SD2068A_I2CWaitAck       88
     SD2068A_I2CSendByte      96
     SD2068A_I2CReceiveByte   90
     SD2068A_I2CReadDate      84
     SD2068A_I2CWriteDate    388
     SD2068A_WriteTimeOn     122
     SD2068A_WriteTimeOff     90
     SD2068A_GetTime         206
     SD2068A_SetTime           8
     ??DataTable37             4

 
 1 614 bytes in section .text
 
 1 614 bytes of CODE memory

Errors: none
Warnings: none
