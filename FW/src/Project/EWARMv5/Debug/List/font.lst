###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     08/Dec/2015  16:55:06 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\App\font.c                          #
#    Command line =  "E:\BT Printer\FW\src\App\font.c" -D DEBUG_VER -lcN      #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\" -o    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I "E:\BT      #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\font.lst #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\font.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\App\font.c
      1          #include "Type.h"
      2          #include "Esc_p.h"
      3          #include "font.h"
      4          //#include "font8x16.h"
      5          #include "res_spi.h"
      6          #include "config.h"
      7          #include "DotFill.h"
      8          #include "basic_fun.h"
      9          #include <string.h>
     10          #include "stm32f10x_lib.h"
     11          // #define FONT_BYTE_SWAP
     12          //======================================================================================================
     13          //#define MAX_GBK_ADDR                0x183870
     14          //#define GB2312_16x16_START_ADDR     0x183870
     15          
     16          //////////////////////////////////////////////////////////////////////////////
     17          
     18          static void ByteSwap(uint8_t  *p, uint8_t len)
     19          {
     20          	uint8_t  ByteSwapTable[] =
     21          	{
     22          		0x00,0x80,0x40,0xC0,0x20,0xA0,0x60,0xE0,0x10,0x90,0x50,0xD0,0x30,0xB0,0x70,0xF0,
     23          		0x08,0x88,0x48,0xC8,0x28,0xA8,0x68,0xE8,0x18,0x98,0x58,0xD8,0x38,0xB8,0x78,0xF8,
     24          		0x04,0x84,0x44,0xC4,0x24,0xA4,0x64,0xE4,0x14,0x94,0x54,0xD4,0x34,0xB4,0x74,0xF4,
     25          		0x0C,0x8C,0x4C,0xCC,0x2C,0xAC,0x6C,0xEC,0x1C,0x9C,0x5C,0xDC,0x3C,0xBC,0x7C,0xFC,
     26          		0x02,0x82,0x42,0xC2,0x22,0xA2,0x62,0xE2,0x12,0x92,0x52,0xD2,0x32,0xB2,0x72,0xF2,
     27          		0x0A,0x8A,0x4A,0xCA,0x2A,0xAA,0x6A,0xEA,0x1A,0x9A,0x5A,0xDA,0x3A,0xBA,0x7A,0xFA,
     28          		0x06,0x86,0x46,0xC6,0x26,0xA6,0x66,0xE6,0x16,0x96,0x56,0xD6,0x36,0xB6,0x76,0xF6,
     29          		0x0E,0x8E,0x4E,0xCE,0x2E,0xAE,0x6E,0xEE,0x1E,0x9E,0x5E,0xDE,0x3E,0xBE,0x7E,0xFE,
     30          		0x01,0x81,0x41,0xC1,0x21,0xA1,0x61,0xE1,0x11,0x91,0x51,0xD1,0x31,0xB1,0x71,0xF1,
     31          		0x09,0x89,0x49,0xC9,0x29,0xA9,0x69,0xE9,0x19,0x99,0x59,0xD9,0x39,0xB9,0x79,0xF9,
     32          		0x05,0x85,0x45,0xC5,0x25,0xA5,0x65,0xE5,0x15,0x95,0x55,0xD5,0x35,0xB5,0x75,0xF5,
     33          		0x0D,0x8D,0x4D,0xCD,0x2D,0xAD,0x6D,0xED,0x1D,0x9D,0x5D,0xDD,0x3D,0xBD,0x7D,0xFD,
     34          		0x03,0x83,0x43,0xC3,0x23,0xA3,0x63,0xE3,0x13,0x93,0x53,0xD3,0x33,0xB3,0x73,0xF3,
     35          		0x0B,0x8B,0x4B,0xCB,0x2B,0xAB,0x6B,0xEB,0x1B,0x9B,0x5B,0xDB,0x3B,0xBB,0x7B,0xFB,
     36          		0x07,0x87,0x47,0xC7,0x27,0xA7,0x67,0xE7,0x17,0x97,0x57,0xD7,0x37,0xB7,0x77,0xF7,
     37          		0x0F,0x8F,0x4F,0xCF,0x2F,0xAF,0x6F,0xEF,0x1F,0x9F,0x5F,0xDF,0x3F,0xBF,0x7F,0xFF,
     38          	};
     39          
     40          	do
     41          	{
     42          		*p = ByteSwapTable[*p];
     43          		p++;
     44          	}while(--len);
     45          }
     46          //======================================================================================================
     47          //	字体加粗
     48          //======================================================================================================
     49          static void FontBold(uint8_t font)
     50          {
     51              uint32_t i,j,k;
     52          	if ((esc_sts[current_channel].bold) || (esc_sts[current_channel].double_strike))
     53          	{
     54                  switch(font)
     55                      {
     56                      case FONT_A_WIDTH:  // FONT A
     57                          for(i=FONT_A_WIDTH-1;i;i--)
     58                          {
     59                              for (j=0;j<FONT_A_HEIGHT/8;j++)
     60                              {
     61                                  k= 7;
     62                                  do{
     63                                      if(esc_sts[current_channel].font_buf.font_a[i-1][j]&(1<<k))
     64                                      {
     65                                         esc_sts[current_channel].font_buf.font_a[i][j] |=(1<<k);
     66                                      }
     67                                  }while(k--);
     68                              }
     69                          }
     70                          break;
     71                      case FONT_B_WIDTH:  // FONT B
     72                          for(i=FONT_B_WIDTH-1;i;i--)
     73                          {
     74                              for (j=0;j<FONT_B_HEIGHT/8;j++)
     75                              {
     76                                  k= 7;
     77                                  do{
     78                                      if(esc_sts[current_channel].font_buf.font_b[i-1][j]&(1<<k))
     79                                      {
     80                                         esc_sts[current_channel].font_buf.font_b[i][j] |=(1<<k);
     81                                      }
     82                                  }while(k--);
     83                              }
     84                          }
     85                          break;
     86                      case FONT_CN_A_WIDTH:  // FONT A
     87                          for(i=FONT_CN_A_WIDTH-1;i;i--)
     88                          {
     89                              for (j=0;j<FONT_CN_A_HEIGHT/8;j++)
     90                              {
     91                                  k= 7;
     92                                  do{
     93                                      if(esc_sts[current_channel].font_buf.font_cn_a[i-1][j]&(1<<k))
     94                                      {
     95                                         esc_sts[current_channel].font_buf.font_cn_a[i][j] |=(1<<k);
     96                                      }
     97                                  }while(k--);
     98                              }
     99                          }
    100                          break;
    101                      case FONT_CN_B_WIDTH:  // FONT B
    102                          for(i=FONT_CN_B_WIDTH-1;i;i--)
    103                          {
    104                              for (j=0;j<FONT_CN_B_HEIGHT/8;j++)
    105                              {
    106                                  k= 7;
    107                                  do{
    108                                      if(esc_sts[current_channel].font_buf.font_cn_b[i-1][j]&(1<<k))
    109                                      {
    110                                         esc_sts[current_channel].font_buf.font_cn_b[i][j] |=(1<<k);
    111                                      }
    112                                  }while(k--);
    113                              }
    114                          }
    115                          break;
    116                      }
    117          	}
    118          }
    119          
    120          //======================================================================================================
    121          //	字体放大
    122          //======================================================================================================
    123          extern void FontEnlarge(uint8_t *dot, uint8_t *buf, uint8_t row)          //纵向放大，变高
    124          {
    125          	uint8_t r, ratio;
    126          	uint8_t i, j;
    127          	uint16_t bit;
    128          	uint8_t c;
    129          
    130          	ratio = (esc_sts[current_channel].larger & 0x0f)+1;                          //高放大比例
    131          	if (ratio == 1)
    132          	{
    133          		memcpy(dot, buf, row);
    134          		return;
    135          	}
    136          	bit = 0;
    137          	//memset(dot, 0, row * (ratio+1));
    138          	memset(dot, 0, row * ratio);
    139          	for (i=0; i<row; i++)              //纵向有三个字节，每次一个一个字节取
    140          	{
    141          		c = *buf++;                   //51中数据是一个一个字节存的
    142          		j = 7;
    143          		do
    144          		{
    145          			if (c & (1 << j))
    146          			{
    147          				r = 0;
    148          				do
    149          				{
    150          					dot[bit >> 3] |= (1 << (7-(bit & 0x07)));
    151          					bit++;
    152          				}
    153          				while ((++r) < ratio);
    154          			}
    155          			else
    156          			{
    157          				bit += ratio;
    158          			}
    159          		}
    160          		while (j--);
    161          	}
    162          //	printf("fang da");
    163          }
    164          //======================================================================================================
    165          //	字体平滑
    166          //======================================================================================================
    167          static void FontSmoothing(uint8_t font)
    168          {
    169          	if (esc_sts[current_channel].smoothing_mode)
    170          	{
    171          
    172          	}
    173          }
    174          
    175          //======================================================================================================
    176          //	下划线
    177          //======================================================================================================
    178          //===> 从此函数可以推断出字模数据是从上往下扫描的，而且高位表示上面的点
    179          extern void FontUnderline(uint16_t start_col, uint16_t end_col)
    180          {
    181          	uint8_t c;
    182          
    183          	if ((esc_sts[current_channel].rotate) || (esc_sts[current_channel].revert))
    184          	{
    185          		return;
    186          	}
    187          	switch (esc_sts[current_channel].underline)
    188          	{
    189          	case 0x81:                    //细下划线
    190          		c = 0x01;
    191          		break;
    192          	case 0x82:                   //粗下划线
    193          		c = 0x03;
    194          		break;
    195          	case 0:
    196          	default:
    197          		return;
    198          	}
    199          
    200          	for (; (start_col < end_col) && (start_col < ARRAY_SIZE(esc_sts[current_channel].dot)); start_col++)
    201          	{
    202          		esc_sts[current_channel].dot[start_col][ARRAY_SIZE(esc_sts[current_channel].dot[0])-1] |= c;
    203          	}
    204          }
    205          //======================================================================================================
    206          //	反白显示
    207          //======================================================================================================
    208          static void FontRevertProc(uint8_t *p, uint16_t len)
    209          {
    210          	uint8_t i;
    211          
    212          	for (i=0; i<len; i++)
    213          	{
    214          		*p++ ^= 0xff;                                  //异或，如:1010 1100^1111 1111=0101 0011
    215          	}
    216          }
    217          
    218          static void FontRevert(uint8_t font)
    219          {
    220          	if (esc_sts[current_channel].revert)
    221          	{
    222          		switch (font)
    223          		{
    224          		case FONT_A_WIDTH:
    225          			FontRevertProc(&esc_sts[current_channel].font_buf.font_a[0][0], sizeof(esc_sts[current_channel].font_buf.font_a));
    226          			break;
    227          		case FONT_B_WIDTH:
    228          			FontRevertProc(&esc_sts[current_channel].font_buf.font_b[0][0], sizeof(esc_sts[current_channel].font_buf.font_b));
    229          			break;
    230          #if defined(GB18030) || defined(GBK) || defined(GB2312)
    231          		case FONT_CN_A_WIDTH:
    232          			FontRevertProc(&esc_sts[current_channel].font_buf.font_cn_a[0][0], sizeof(esc_sts[current_channel].font_buf.font_cn_a));
    233          			break;
    234          		case FONT_CN_B_WIDTH:
    235          			FontRevertProc(&esc_sts[current_channel].font_buf.font_cn_b[0][0], sizeof(esc_sts[current_channel].font_buf.font_cn_b));
    236          			break;
    237          #endif
    238          		}
    239          	}
    240          }
    241          //======================================================================================================
    242          //	旋转
    243          //======================================================================================================
    244          extern void FontCircumvolve(uint8_t *dot, uint8_t *buf, uint8_t row,uint8_t col,uint16_t angle)//把buf的缓冲区转换后送入dot缓冲区，row高度，col宽度
    245          {                               //在旋转九十和两百七十度时，我们的临时buffer要大一点
    246          	//uint8_t temp;
    247          	uint16_t bit;
    248          	uint16_t i,j,k;
    249              uint16_t max_rowbyte;
    250              max_rowbyte= (row+7)/8;
    251          	switch(angle)
    252          	{
    253          		case ANTITYPE:                                                     //原型
    254          			for(i=0;i<col;i++)
    255          	       		{
    256          				for(j=0;j<max_rowbyte;j++)
    257          				{
    258          					*dot=*buf;
    259          					dot++;
    260          					buf++;
    261          				}
    262          	      	 	}
    263          			 break;
    264          		case CIR_NINETY_DEGREE:                                    //顺旋转九十度
    265          			bit=0;
    266          			for(i=max_rowbyte;i>0;i--)
    267          			{
    268          				k=0;
    269          				do
    270          				{
    271          					for(j=0;j<col;j++)
    272          					{
    273          						if (buf[j*max_rowbyte+i-1] & (1<<k))
    274          						{
    275          							dot[bit>>3] |= (1<<(7-(bit&0x07)));
    276          						}
    277                                  			bit++;
    278          						if(j == (col-1))
    279          						{
    280          							if(col & 0x07)
    281          							{
    282          								bit=bit+(8-(col&0x07));
    283          							}
    284          						}
    285          					}
    286          				}while((++k)<8);
    287          			}
    288          			break;
    289          		case CIR_TWO_NINETY_DEGREE:                               //顺时钟旋转一百八十度
    290          			for(i=col;i>0;i--)
    291          			{
    292          				for(j=max_rowbyte;j>0;j--)
    293          				{
    294          					k=7;
    295          					do
    296          					{
    297          						if (buf[(i-1)*max_rowbyte+j-1] & (1<<k))
    298          						{
    299          							dot[(col-i)*max_rowbyte+(max_rowbyte-j)] |= (1<<(7-k));
    300          						}
    301          					}while(k--);
    302          
    303          				}
    304          			}
    305          			break;
    306          		case CIR_THREE_NINETY_DEGREE:                            //顺时钟旋转两百七十度
    307          			bit=0;
    308          			for(i=0;i<max_rowbyte;i++)
    309          			{
    310          				k=7;
    311          				do
    312          				{
    313          					for(j=col;j>0;j--)
    314          					{
    315          						if (buf[(j-1)*max_rowbyte+i] & (1<<k))
    316          						{
    317          							dot[bit>>3] |= (1<<(7-(bit&0x07)));
    318          						}
    319                                  			bit++;
    320          						if(j == 1)
    321          						{
    322          							bit=bit+(8-(col&0x07));
    323          						}
    324          					}
    325          				}while(k--);
    326          			}
    327          			break;
    328          		default :
    329          			break;
    330          	}
    331          
    332          }
    333          
    334          #if defined(GB18030) || defined(GBK) || defined(GB2312)
    335          #if 0
    336          static unsigned long gt (unsigned char c1, unsigned char c2, unsigned char c3, unsigned char c4)
    337          {
    338          	unsigned long h=0;
    339          
    340          	if (c2==0x7f) return (0);
    341          
    342          	if ((c1 >= 0xa1) && (c1 <= 0xab) && (c2 >= 0xa1)) //Section 1
    343          	{
    344          		h = (c1 - 0xa1) * 94 + (c2 - 0xa1);
    345          	}
    346          	else if ((c1 >= 0xa8) && (c1 <= 0xa9) && (c2 < 0xa1)) //Section 5
    347          	{
    348          		if (c2>0x7f)
    349          		{
    350          			c2--;
    351          		}
    352          		h = (c1-0xa8)*96 + (c2-0x40)+846;
    353          	}
    354          	if ((c1 >= 0xb0) && (c1 <= 0xf7) && (c2 >= 0xa1)) //Section 2
    355          	{
    356          		h = (c1 - 0xb0) * 94 + (c2 - 0xa1)+1038;
    357          	}
    358          	else if ((c1 < 0xa1) && (c1 >= 0x81)) //Section 3
    359          	{
    360          		if (c2 > 0x7f)
    361          		{
    362          			c2--;
    363          		}
    364          		h = (c1-0x81)*190 + (c2-0x40) + 1038 +6768;
    365          	}
    366          	else if ((c1>=0xaa) && (c2<0xa1)) //Section 4
    367          	{
    368          		if (c2 > 0x7f)
    369          		{
    370          			c2--;
    371          		}
    372          		h = (c1-0xaa)*96 + (c2-0x40) + 1038 +12848;
    373          	}
    374          	if ((c2 >= 0x30) && (c2 <= 0x39)) //Extended Section (With 4 BYTES InCode)
    375          	{
    376          		if ((c4 < 0x30) || (c4 > 0x39))
    377          		{
    378          			return (0);
    379          		}
    380          		h=(c3-0x81)*12600+(c4-0x39)*1260+(c1-0xee)*10+(c2-0x39)+22046;
    381          		if (h>=22046 && h<=22046+6530)
    382          		{
    383          			return(h);
    384          		}
    385          		else
    386          		{
    387          			return (0);
    388          		}
    389          	}
    390          	return(h);
    391          }
    392          #endif
    393          #endif
    394          //======================================================================================================
    395          //----chang
    396          #define CODE_PAGE_START_ADR     (0x3600UL)
    397          #define FONTEN_9X24_ADR         (0x50000UL)
    398          #define CODE_PAGE_START_ADR_9_24     (0X50A20UL)
    399          
    400          #if defined(CODEPAGE)
    401          
    402          static uint8_t ChToInternaionalCharSetIdx(uint8_t ch)
    403          {
    404              switch(ch)
    405              {
    406                  case 0x23:
    407                      return 0;
    408                  case 0x24:
    409                      return 1;
    410                  case 0x40:
    411                      return 2;
    412                  case 0x5B:
    413                      return 3;
    414                  case 0x5C:
    415                      return 4;
    416                  case 0x5D:
    417                      return 5;
    418                  case 0x5E:
    419                      return 6;
    420                  case 0x60:
    421                      return 7;
    422                  case 0x7B:
    423                      return 8;
    424                  case 0x7C:
    425                      return 9;
    426                  case 0x7D:
    427                      return 10;
    428                  case 0x7E:
    429                      return 11;
    430                  default:
    431                      return 0xff;
    432              }
    433          }
    434          #endif
    435          
    436          extern void GetEnglishFont(uint8_t ascii)
    437          {
    438          
    439          	uint8_t buf1[FONT_A_HEIGHT*((FONT_A_WIDTH+7)/8)];
    440          	switch (esc_sts[current_channel].font_en)
    441          	{
    442          	case FONT_A_WIDTH:	// FONT A
    443              //----chang
    444                    {
    445                      #if defined(CODEPAGE)
    446                      if(ChToInternaionalCharSetIdx(ascii)!= 0xff)
    447                      {
    448                          F25L_Read(((uint16_t)ChToInternaionalCharSetIdx(ascii))*FONT_A_WIDTH*((FONT_A_HEIGHT+7)/8) + esc_sts[current_channel].international_character_set*12UL*FONT_A_WIDTH*((FONT_A_HEIGHT+7)/8),
    449                                              esc_sts[current_channel].font_buf.font_a[0], sizeof(esc_sts[current_channel].font_buf.font_a));
    450                      }
    451                      else
    452                      #endif
    453                      {
    454                          #if defined(CODEPAGE)
    455                          if(ascii < 0x80)
    456                          {
    457                              F25L_Read((ascii)*FONT_A_WIDTH*((FONT_A_HEIGHT+7)/8) + font_en_addr, esc_sts[current_channel].font_buf.font_a[0], sizeof(esc_sts[current_channel].font_buf.font_a));       // get font from sflash
    458                          }
    459                          else
    460                          {
    461                              uint32_t adr;
    462                              adr = CODE_PAGE_START_ADR + esc_sts[current_channel].character_code_page *(0x80UL*sizeof(esc_sts[current_channel].font_buf.font_a))+ (ascii - 0x80)*sizeof(esc_sts[current_channel].font_buf.font_a);
    463                              F25L_Read(adr, esc_sts[current_channel].font_buf.font_a[0], sizeof(esc_sts[current_channel].font_buf.font_a));       // get font from sflash
    464          
    465                          }
    466              			// TODO: esc_sts[current_channel].international_character_set
    467                          #elif defined(FONT9x24)
    468                          if(ascii >= 0x20 && ascii<0x80)
    469                          {
    470                              memcpy(esc_sts[current_channel].font_buf.font_a, (const void*)(FontList[FNT_ASC_9_24].address)[ascii-0x20], sizeof(esc_sts[current_channel].font_buf.font_a));
    471                          }
    472                          else
    473                          {
    474                              memset(esc_sts[current_channel].font_buf.font_a, 0xff, sizeof(esc_sts[current_channel].font_buf.font_a));
    475                          }
    476                          #else
    477              			memcpy(esc_sts[current_channel].font_buf.font_a, (const unsigned char*)(FontList[FNT_ASC_12_24].address)+(ascii-0x20)*FontList[FNT_ASC_12_24].size, sizeof(esc_sts[current_channel].font_buf.font_a));
    478                          #endif
    479          	         	}
    480                    }
    481          		 break;
    482          	case FONT_B_WIDTH:	// FONT B
    483          		{
    484          			// TODO: esc_sts[current_channel].international_character_set
    485          			memcpy(esc_sts[current_channel].font_buf.font_b, (const unsigned char*)(FontList[FNT_ASC_8_16].address)+(ascii-0x20)*FontList[FNT_ASC_8_16].size, sizeof(esc_sts[current_channel].font_buf.font_b));
    486                      #ifdef ASCII9X24
    487                      LeftRightSwap(esc_sts[current_channel].font_buf.font_b[0], sizeof(esc_sts[current_channel].font_buf.font_b));
    488                      #endif
    489          		}
    490          		break;
    491          	}
    492          	FontBold(esc_sts[current_channel].font_en);
    493          	FontSmoothing(esc_sts[current_channel].font_cn);
    494          	FontRevert(esc_sts[current_channel].font_en);
    495          
    496          
    497          	// TODO: 需要考虑放大后的位图大小
    498          
    499          
    500          	switch (esc_sts[current_channel].font_en)
    501          	{
    502          	case FONT_A_WIDTH:	// FONT A
    503          		memset(buf1,0,sizeof(buf1));
    504          		if(esc_sts[current_channel].rotate==1||esc_sts[current_channel].rotate==3)
    505          		{
    506          			FontCircumvolve(&buf1[0], &esc_sts[current_channel].font_buf.font_a[0][0], FONT_A_HEIGHT,FONT_A_WIDTH,esc_sts[current_channel].rotate);
    507          			DotFillToBuf(&buf1[0], FONT_A_HEIGHT,( FONT_A_WIDTH+7)/8*8, 1);
    508          		}
    509          		else
    510          		{
    511          			FontCircumvolve(&buf1[0], &esc_sts[current_channel].font_buf.font_a[0][0],FONT_A_HEIGHT,FONT_A_WIDTH,esc_sts[current_channel].rotate);
    512          			DotFillToBuf(&buf1[0], FONT_A_WIDTH,( FONT_A_HEIGHT+7)/8*8, 1);
    513          		}
    514          		break;
    515          	case FONT_B_WIDTH:	// FONT B
    516          		DotFillToBuf(&esc_sts[current_channel].font_buf.font_b[0][0], FONT_B_WIDTH, FONT_B_HEIGHT, 1);
    517          		break;
    518          
    519              #if defined(CODEPAGE)
    520              case FONT_C_WIDTH:
    521                  DotFillToBuf(&esc_sts[current_channel].font_buf.font_c[0][0], FONT_C_WIDTH, FONT_C_HEIGHT, 1);
    522               #endif
    523          
    524          
    525          
    526          	}
    527          
    528          
    529          }
    530          //======================================================================================================
    531          #if defined(GB18030) || defined(GBK) || defined(GB2312)
    532          extern void GetChineseFont(uint8_t *c, uint8_t charset)
    533          {
    534          	//uint32_t loc;
    535          	uint8_t buf2[FONT_CN_A_HEIGHT*((FONT_CN_A_WIDTH+7)/8)];
    536          	switch (esc_sts[current_channel].font_cn)
    537          	{
    538          	case FONT_CN_A_WIDTH:
    539          		{
    540          			//switch (charset)
    541          			//{
    542          			//case CHINESE_FONT_GB2312:
    543          			//case CHINESE_FONT_GB13000:
    544          			//default:
    545          			//	loc = gt(c[0], c[1], 0, 0) * sizeof(esc_sts[current_channel].font_buf.font_cn_a);
    546          			//	break;
    547          			//case CHINESE_FONT_GB18030:
    548          			//	loc = gt(c[0], c[1], c[2], c[3]) * sizeof(esc_sts[current_channel].font_buf.font_cn_a);
    549          			//	break;
    550          			//}
    551          			font_data_read(FNT_CHN_24_24, c,esc_sts[current_channel].font_buf.font_cn_a[0], sizeof(esc_sts[current_channel].font_buf.font_cn_a));		// get font from sflash
    552          			//ByteSwap(esc_sts[current_channel].font_buf.font_cn_a[0], sizeof(esc_sts[current_channel].font_buf.font_cn_a));
    553          		}
    554          		break;
    555          	case FONT_CN_B_WIDTH:
    556          		{
    557          			// TODO: change flash offset
    558          			//loc = GB2312_16x16_START_ADDR + ((c[0]-0xA1)*(0xfe - 0xA0) + (c[1]-0xA1) )* sizeof(esc_sts[current_channel].font_buf.font_cn_b);//GB2312
    559          			font_data_read(FNT_CHN_16_16, c,esc_sts[current_channel].font_buf.font_cn_b[0], sizeof(esc_sts[current_channel].font_buf.font_cn_b));
    560          		}
    561          		break;
    562          	}
    563          	FontBold(esc_sts[current_channel].font_cn);
    564          	FontSmoothing(esc_sts[current_channel].font_cn);
    565          	FontRevert(esc_sts[current_channel].font_cn);
    566          	// TODO: 需要考虑放大后的位图大小
    567          	switch (esc_sts[current_channel].font_cn)
    568          	{
    569          	case FONT_CN_A_WIDTH:	// FONT A
    570          		memset(buf2,0,sizeof(buf2));
    571          		if(esc_sts[current_channel].rotate==1||esc_sts[current_channel].rotate==3)
    572          		{
    573          			FontCircumvolve(&buf2[0], &esc_sts[current_channel].font_buf.font_cn_a[0][0], FONT_CN_A_HEIGHT,FONT_CN_A_WIDTH,esc_sts[current_channel].rotate);
    574          			DotFillToBuf(&buf2[0], FONT_CN_A_HEIGHT,( FONT_CN_A_WIDTH+7)/8*8, 1);
    575          		}
    576          		else
    577          		{
    578          			FontCircumvolve(&buf2[0], &esc_sts[current_channel].font_buf.font_cn_a[0][0],FONT_CN_A_HEIGHT,FONT_CN_A_WIDTH,esc_sts[current_channel].rotate);
    579          			DotFillToBuf(&buf2[0], FONT_CN_A_WIDTH, ( FONT_CN_A_HEIGHT+7)/8*8, 1);
    580          		}
    581          		break;
    582          	case FONT_CN_B_WIDTH:	// FONT B
    583          		DotFillToBuf(&esc_sts[current_channel].font_buf.font_cn_b[0][0], FONT_CN_B_WIDTH, FONT_CN_B_HEIGHT, 1);
    584          		break;
    585          	}
    586          }
    587          #endif
    588          extern void GetEnglishHRIFont(uint8_t ascii)
    589          {
    590          	uint8_t larger;
    591          	larger = esc_sts[current_channel].larger;
    592          	esc_sts[current_channel].larger = 0;
    593          	switch(esc_sts[current_channel].font_en)
    594          	{
    595          	case FONT_A_WIDTH:	// FONT A
    596          #if defined(MP2_BLUETOOTH_DENMARK)
    597              F25L_Read((ascii)*FONT_A_WIDTH*((FONT_A_HEIGHT+7)/8) + font_en_addr, esc_sts[current_channel].font_buf.font_a[0], sizeof(esc_sts[current_channel].font_buf.font_a));       // get font from sflash
    598          #else
    599          
    600              #if defined(CODEPAGE)
    601              F25L_Read((ascii)*FONT_A_WIDTH*((FONT_A_HEIGHT+7)/8) + font_en_addr, esc_sts[current_channel].font_buf.font_a[0], sizeof(esc_sts[current_channel].font_buf.font_a));
    602              #else
    603          	memcpy(esc_sts[current_channel].font_buf.font_a, (const unsigned char*)(FontList[FNT_ASC_12_24].address)+(ascii-0x20)*FontList[FNT_ASC_12_24].size, sizeof(esc_sts[current_channel].font_buf.font_a));
    604              #endif
    605          #endif
    606          		break;
    607          	case FONT_B_WIDTH:	// FONT B
    608          		memcpy(esc_sts[current_channel].font_buf.font_b, (const unsigned char*)(FontList[FNT_ASC_8_16].address)+(ascii-0x20)*FontList[FNT_ASC_8_16].size, sizeof(esc_sts[current_channel].font_buf.font_b));
    609                  #ifdef ASCII9X24
    610                  LeftRightSwap(esc_sts[current_channel].font_buf.font_b[0], sizeof(esc_sts[current_channel].font_buf.font_b));
    611                  #endif
    612          		break;
    613          	}
    614          	switch(esc_sts[current_channel].font_en)
    615          	{
    616          	case FONT_A_WIDTH:	// FONT A
    617          		DotFillToBuf(&esc_sts[current_channel].font_buf.font_a[0][0], FONT_A_WIDTH, FONT_A_HEIGHT, 0);
    618          		break;
    619          	case FONT_B_WIDTH:	// FONT B
    620          		DotFillToBuf(&esc_sts[current_channel].font_buf.font_b[0][0], FONT_B_WIDTH, FONT_B_HEIGHT, 0);
    621          		break;
    622          	}
    623          	esc_sts[current_channel].larger = larger;
    624          }
    625          
    626          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     FontBold              24
     FontCircumvolve       24
     FontEnlarge           32
     FontRevert             8
     FontRevertProc         8
     FontSmoothing          0
     FontUnderline         16
     GetChineseFont        96
     GetEnglishFont        72
     GetEnglishHRIFont     16
     memcpy                 8
     memset                 8


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     memcpy              14
     memset              20
     FontBold           636
     FontEnlarge        192
     FontSmoothing        2
     FontUnderline      188
     FontRevertProc      36
     FontRevert         168
     FontCircumvolve    514
     GetEnglishFont     468
     GetChineseFont     406
     GetEnglishHRIFont  252
     ??DataTable121       4
     ??DataTable130       4
     ??DataTable131       4

 
 2 908 bytes in section .text
 
 2 874 bytes of CODE memory (+ 34 bytes shared)

Errors: none
Warnings: 1
