###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     10/Dec/2015  18:37:35 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\usb_lib\usb_regs.c                  #
#    Command line =  "E:\BT Printer\FW\src\usb_lib\usb_regs.c" -D DEBUG_VER   #
#                    -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\"  #
#                    -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None -I "E:\BT  #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\usb_regs #
#                    .lst                                                     #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\usb_regs. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\usb_lib\usb_regs.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : usb_regs.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.2.1
      5          * Date               : 09/22/2008
      6          * Description        : Interface functions to USB cell registers
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "usb_lib.h"
     18          
     19          /* Private typedef -----------------------------------------------------------*/
     20          /* Private define ------------------------------------------------------------*/
     21          /* Private macro -------------------------------------------------------------*/
     22          /* Private variables ---------------------------------------------------------*/
     23          /* Extern variables ----------------------------------------------------------*/
     24          /* Private function prototypes -----------------------------------------------*/
     25          /* Private functions ---------------------------------------------------------*/
     26          
     27          /*******************************************************************************
     28          * Function Name  : SetCNTR.
     29          * Description    : Set the CNTR register value.
     30          * Input          : wRegValue: new register value.
     31          * Output         : None.
     32          * Return         : None.
     33          *******************************************************************************/
     34          void SetCNTR(u16 wRegValue)
     35          {
     36            _SetCNTR(wRegValue);
     37          }
     38          
     39          /*******************************************************************************
     40          * Function Name  : GetCNTR.
     41          * Description    : returns the CNTR register value.
     42          * Input          : None.
     43          * Output         : None.
     44          * Return         : CNTR register Value.
     45          *******************************************************************************/
     46          u16 GetCNTR(void)
     47          {
     48            return(_GetCNTR());
     49          }
     50          
     51          /*******************************************************************************
     52          * Function Name  : SetISTR.
     53          * Description    : Set the ISTR register value.
     54          * Input          : wRegValue: new register value.
     55          * Output         : None.
     56          * Return         : None.
     57          *******************************************************************************/
     58          void SetISTR(u16 wRegValue)
     59          {
     60            _SetISTR(wRegValue);
     61          }
     62          
     63          /*******************************************************************************
     64          * Function Name  : GetISTR
     65          * Description    : Returns the ISTR register value.
     66          * Input          : None.
     67          * Output         : None.
     68          * Return         : ISTR register Value
     69          *******************************************************************************/
     70          u16 GetISTR(void)
     71          {
     72            return(_GetISTR());
     73          }
     74          
     75          /*******************************************************************************
     76          * Function Name  : GetFNR
     77          * Description    : Returns the FNR register value.
     78          * Input          : None.
     79          * Output         : None.
     80          * Return         : FNR register Value
     81          *******************************************************************************/
     82          u16 GetFNR(void)
     83          {
     84            return(_GetFNR());
     85          }
     86          
     87          /*******************************************************************************
     88          * Function Name  : SetDADDR
     89          * Description    : Set the DADDR register value.
     90          * Input          : wRegValue: new register value.
     91          * Output         : None.
     92          * Return         : None.
     93          *******************************************************************************/
     94          void SetDADDR(u16 wRegValue)
     95          {
     96            _SetDADDR(wRegValue);
     97          }
     98          
     99          /*******************************************************************************
    100          * Function Name  : GetDADDR
    101          * Description    : Returns the DADDR register value.
    102          * Input          : None.
    103          * Output         : None.
    104          * Return         : DADDR register Value
    105          *******************************************************************************/
    106          u16 GetDADDR(void)
    107          {
    108            return(_GetDADDR());
    109          }
    110          
    111          /*******************************************************************************
    112          * Function Name  : SetBTABLE
    113          * Description    : Set the BTABLE.
    114          * Input          : wRegValue: New register value.
    115          * Output         : None.
    116          * Return         : None.
    117          *******************************************************************************/
    118          void SetBTABLE(u16 wRegValue)
    119          {
    120            _SetBTABLE(wRegValue);
    121          }
    122          
    123          /*******************************************************************************
    124          * Function Name  : GetBTABLE.
    125          * Description    : Returns the BTABLE register value.
    126          * Input          : None. 
    127          * Output         : None.
    128          * Return         : BTABLE address.
    129          *******************************************************************************/
    130          u16 GetBTABLE(void)
    131          {
    132            return(_GetBTABLE());
    133          }
    134          
    135          /*******************************************************************************
    136          * Function Name  : SetENDPOINT
    137          * Description    : Setthe Endpoint register value.
    138          * Input          : bEpNum: Endpoint Number. 
    139          *                  wRegValue.
    140          * Output         : None.
    141          * Return         : None.
    142          *******************************************************************************/
    143          void SetENDPOINT(u8 bEpNum, u16 wRegValue)
    144          {
    145            _SetENDPOINT(bEpNum, wRegValue);
    146          }
    147          
    148          /*******************************************************************************
    149          * Function Name  : GetENDPOINT
    150          * Description    : Return the Endpoint register value.
    151          * Input          : bEpNum: Endpoint Number. 
    152          * Output         : None.
    153          * Return         : Endpoint register value.
    154          *******************************************************************************/
    155          u16 GetENDPOINT(u8 bEpNum)
    156          {
    157            return(_GetENDPOINT(bEpNum));
    158          }
    159          
    160          /*******************************************************************************
    161          * Function Name  : SetEPType
    162          * Description    : sets the type in the endpoint register.
    163          * Input          : bEpNum: Endpoint Number. 
    164          *                  wType: type definition.
    165          * Output         : None.
    166          * Return         : None.
    167          *******************************************************************************/
    168          void SetEPType(u8 bEpNum, u16 wType)
    169          {
    170            _SetEPType(bEpNum, wType);
    171          }
    172          
    173          /*******************************************************************************
    174          * Function Name  : GetEPType
    175          * Description    : Returns the endpoint type.
    176          * Input          : bEpNum: Endpoint Number. 
    177          * Output         : None.
    178          * Return         : Endpoint Type
    179          *******************************************************************************/
    180          u16 GetEPType(u8 bEpNum)
    181          {
    182            return(_GetEPType(bEpNum));
    183          }
    184          
    185          /*******************************************************************************
    186          * Function Name  : SetEPTxStatus
    187          * Description    : Set the status of Tx endpoint.
    188          * Input          : bEpNum: Endpoint Number. 
    189          *                  wState: new state.
    190          * Output         : None.
    191          * Return         : None.
    192          *******************************************************************************/
    193          void SetEPTxStatus(u8 bEpNum, u16 wState)
    194          {
    195            _SetEPTxStatus(bEpNum, wState);
    196          }
    197          
    198          /*******************************************************************************
    199          * Function Name  : SetEPRxStatus
    200          * Description    : Set the status of Rx endpoint.
    201          * Input          : bEpNum: Endpoint Number. 
    202          *                  wState: new state.
    203          * Output         : None.
    204          * Return         : None.
    205          *******************************************************************************/
    206          void SetEPRxStatus(u8 bEpNum, u16 wState)
    207          {
    208            _SetEPRxStatus(bEpNum, wState);
    209          }
    210          
    211          /*******************************************************************************
    212          * Function Name  : SetDouBleBuffEPStall
    213          * Description    : sets the status for Double Buffer Endpoint to STALL
    214          * Input          : bEpNum: Endpoint Number. 
    215          *                  bDir: Endpoint direction.
    216          * Output         : None.
    217          * Return         : None.
    218          *******************************************************************************/
    219          void SetDouBleBuffEPStall(u8 bEpNum, u8 bDir)
    220          {
    221            u16 Endpoint_DTOG_Status;
    222            Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
    223            if (bDir == EP_DBUF_OUT)
    224            { /* OUT double buffered endpoint */
    225              _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
    226            }
    227            else if (bDir == EP_DBUF_IN)
    228            { /* IN double buffered endpoint */
    229              _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
    230            }
    231          }
    232          
    233          /*******************************************************************************
    234          * Function Name  : GetEPTxStatus
    235          * Description    : Returns the endpoint Tx status.
    236          * Input          : bEpNum: Endpoint Number. 
    237          * Output         : None.
    238          * Return         : Endpoint TX Status
    239          *******************************************************************************/
    240          u16 GetEPTxStatus(u8 bEpNum)
    241          {
    242            return(_GetEPTxStatus(bEpNum));
    243          }
    244          
    245          /*******************************************************************************
    246          * Function Name  : GetEPRxStatus
    247          * Description    : Returns the endpoint Rx status.
    248          * Input          : bEpNum: Endpoint Number. 
    249          * Output         : None.
    250          * Return         : Endpoint RX Status
    251          *******************************************************************************/
    252          u16 GetEPRxStatus(u8 bEpNum)
    253          {
    254            return(_GetEPRxStatus(bEpNum));
    255          }
    256          
    257          /*******************************************************************************
    258          * Function Name  : SetEPTxValid
    259          * Description    : Valid the endpoint Tx Status.
    260          * Input          : bEpNum: Endpoint Number.  
    261          * Output         : None.
    262          * Return         : None.
    263          *******************************************************************************/
    264          void SetEPTxValid(u8 bEpNum)
    265          {
    266            _SetEPTxStatus(bEpNum, EP_TX_VALID);
    267          }
    268          
    269          /*******************************************************************************
    270          * Function Name  : SetEPRxValid
    271          * Description    : Valid the endpoint Rx Status.
    272          * Input          : bEpNum: Endpoint Number. 
    273          * Output         : None.
    274          * Return         : None.
    275          *******************************************************************************/
    276          void SetEPRxValid(u8 bEpNum)
    277          {
    278            _SetEPRxStatus(bEpNum, EP_RX_VALID);
    279          }
    280          
    281          /*******************************************************************************
    282          * Function Name  : SetEP_KIND
    283          * Description    : Clear the EP_KIND bit.
    284          * Input          : bEpNum: Endpoint Number. 
    285          * Output         : None.
    286          * Return         : None.
    287          *******************************************************************************/
    288          void SetEP_KIND(u8 bEpNum)
    289          {
    290            _SetEP_KIND(bEpNum);
    291          }
    292          
    293          /*******************************************************************************
    294          * Function Name  : ClearEP_KIND
    295          * Description    : set the  EP_KIND bit.
    296          * Input          : bEpNum: Endpoint Number. 
    297          * Output         : None.
    298          * Return         : None.
    299          *******************************************************************************/
    300          void ClearEP_KIND(u8 bEpNum)
    301          {
    302            _ClearEP_KIND(bEpNum);
    303          }
    304          /*******************************************************************************
    305          * Function Name  : Clear_Status_Out
    306          * Description    : Clear the Status Out of the related Endpoint
    307          * Input          : bEpNum: Endpoint Number. 
    308          * Output         : None.
    309          * Return         : None.
    310          *******************************************************************************/
    311          void Clear_Status_Out(u8 bEpNum)
    312          {
    313            _ClearEP_KIND(bEpNum);
    314          }
    315          /*******************************************************************************
    316          * Function Name  : Set_Status_Out
    317          * Description    : Set the Status Out of the related Endpoint
    318          * Input          : bEpNum: Endpoint Number. 
    319          * Output         : None.
    320          * Return         : None.
    321          *******************************************************************************/
    322          void Set_Status_Out(u8 bEpNum)
    323          {
    324            _SetEP_KIND(bEpNum);
    325          }
    326          /*******************************************************************************
    327          * Function Name  : SetEPDoubleBuff
    328          * Description    : Enable the double buffer feature for the endpoint. 
    329          * Input          : bEpNum: Endpoint Number. 
    330          * Output         : None.
    331          * Return         : None.
    332          *******************************************************************************/
    333          void SetEPDoubleBuff(u8 bEpNum)
    334          {
    335            _SetEP_KIND(bEpNum);
    336          }
    337          /*******************************************************************************
    338          * Function Name  : ClearEPDoubleBuff
    339          * Description    : Disable the double buffer feature for the endpoint. 
    340          * Input          : bEpNum: Endpoint Number. 
    341          * Output         : None.
    342          * Return         : None.
    343          *******************************************************************************/
    344          void ClearEPDoubleBuff(u8 bEpNum)
    345          {
    346            _ClearEP_KIND(bEpNum);
    347          }
    348          /*******************************************************************************
    349          * Function Name  : GetTxStallStatus
    350          * Description    : Returns the Stall status of the Tx endpoint.
    351          * Input          : bEpNum: Endpoint Number. 
    352          * Output         : None.
    353          * Return         : Tx Stall status.
    354          *******************************************************************************/
    355          u16 GetTxStallStatus(u8 bEpNum)
    356          {
    357            return(_GetTxStallStatus(bEpNum));
    358          }
    359          /*******************************************************************************
    360          * Function Name  : GetRxStallStatus
    361          * Description    : Returns the Stall status of the Rx endpoint. 
    362          * Input          : bEpNum: Endpoint Number. 
    363          * Output         : None.
    364          * Return         : Rx Stall status.
    365          *******************************************************************************/
    366          u16 GetRxStallStatus(u8 bEpNum)
    367          {
    368            return(_GetRxStallStatus(bEpNum));
    369          }
    370          /*******************************************************************************
    371          * Function Name  : ClearEP_CTR_RX
    372          * Description    : Clear the CTR_RX bit.
    373          * Input          : bEpNum: Endpoint Number. 
    374          * Output         : None.
    375          * Return         : None.
    376          *******************************************************************************/
    377          void ClearEP_CTR_RX(u8 bEpNum)
    378          {
    379            _ClearEP_CTR_RX(bEpNum);
    380          }
    381          /*******************************************************************************
    382          * Function Name  : ClearEP_CTR_TX
    383          * Description    : Clear the CTR_TX bit.
    384          * Input          : bEpNum: Endpoint Number. 
    385          * Output         : None.
    386          * Return         : None.
    387          *******************************************************************************/
    388          void ClearEP_CTR_TX(u8 bEpNum)
    389          {
    390            _ClearEP_CTR_TX(bEpNum);
    391          }
    392          /*******************************************************************************
    393          * Function Name  : ToggleDTOG_RX
    394          * Description    : Toggle the DTOG_RX bit.
    395          * Input          : bEpNum: Endpoint Number. 
    396          * Output         : None.
    397          * Return         : None.
    398          *******************************************************************************/
    399          void ToggleDTOG_RX(u8 bEpNum)
    400          {
    401            _ToggleDTOG_RX(bEpNum);
    402          }
    403          /*******************************************************************************
    404          * Function Name  : ToggleDTOG_TX
    405          * Description    : Toggle the DTOG_TX bit.
    406          * Input          : bEpNum: Endpoint Number. 
    407          * Output         : None.
    408          * Return         : None.
    409          *******************************************************************************/
    410          void ToggleDTOG_TX(u8 bEpNum)
    411          {
    412            _ToggleDTOG_TX(bEpNum);
    413          }
    414          /*******************************************************************************
    415          * Function Name  : ClearDTOG_RX.
    416          * Description    : Clear the DTOG_RX bit.
    417          * Input          : bEpNum: Endpoint Number. 
    418          * Output         : None.
    419          * Return         : None.
    420          *******************************************************************************/
    421          void ClearDTOG_RX(u8 bEpNum)
    422          {
    423            _ClearDTOG_RX(bEpNum);
    424          }
    425          /*******************************************************************************
    426          * Function Name  : ClearDTOG_TX.
    427          * Description    : Clear the DTOG_TX bit.
    428          * Input          : bEpNum: Endpoint Number. 
    429          * Output         : None.
    430          * Return         : None.
    431          *******************************************************************************/
    432          void ClearDTOG_TX(u8 bEpNum)
    433          {
    434            _ClearDTOG_TX(bEpNum);
    435          }
    436          /*******************************************************************************
    437          * Function Name  : SetEPAddress
    438          * Description    : Set the endpoint address.
    439          * Input          : bEpNum: Endpoint Number.
    440          *                  bAddr: New endpoint address.
    441          * Output         : None.
    442          * Return         : None.
    443          *******************************************************************************/
    444          void SetEPAddress(u8 bEpNum, u8 bAddr)
    445          {
    446            _SetEPAddress(bEpNum, bAddr);
    447          }
    448          /*******************************************************************************
    449          * Function Name  : GetEPAddress
    450          * Description    : Get the endpoint address.
    451          * Input          : bEpNum: Endpoint Number. 
    452          * Output         : None.
    453          * Return         : Endpoint address.
    454          *******************************************************************************/
    455          u8 GetEPAddress(u8 bEpNum)
    456          {
    457            return(_GetEPAddress(bEpNum));
    458          }
    459          /*******************************************************************************
    460          * Function Name  : SetEPTxAddr
    461          * Description    : Set the endpoint Tx buffer address.
    462          * Input          : bEpNum: Endpoint Number.
    463          *                  wAddr: new address. 
    464          * Output         : None.
    465          * Return         : None.
    466          *******************************************************************************/
    467          void SetEPTxAddr(u8 bEpNum, u16 wAddr)
    468          {
    469            _SetEPTxAddr(bEpNum, wAddr);
    470          }
    471          /*******************************************************************************
    472          * Function Name  : SetEPRxAddr
    473          * Description    : Set the endpoint Rx buffer address.
    474          * Input          : bEpNum: Endpoint Number.
    475          *                  wAddr: new address.
    476          * Output         : None.
    477          * Return         : None.
    478          *******************************************************************************/
    479          void SetEPRxAddr(u8 bEpNum, u16 wAddr)
    480          {
    481            _SetEPRxAddr(bEpNum, wAddr);
    482          }
    483          /*******************************************************************************
    484          * Function Name  : GetEPTxAddr
    485          * Description    : Returns the endpoint Tx buffer address.
    486          * Input          : bEpNum: Endpoint Number. 
    487          * Output         : None.
    488          * Return         : Rx buffer address. 
    489          *******************************************************************************/
    490          u16 GetEPTxAddr(u8 bEpNum)
    491          {
    492            return(_GetEPTxAddr(bEpNum));
    493          }
    494          /*******************************************************************************
    495          * Function Name  : GetEPRxAddr.
    496          * Description    : Returns the endpoint Rx buffer address.
    497          * Input          : bEpNum: Endpoint Number. 
    498          * Output         : None.
    499          * Return         : Rx buffer address.
    500          *******************************************************************************/
    501          u16 GetEPRxAddr(u8 bEpNum)
    502          {
    503            return(_GetEPRxAddr(bEpNum));
    504          }
    505          /*******************************************************************************
    506          * Function Name  : SetEPTxCount.
    507          * Description    : Set the Tx count.
    508          * Input          : bEpNum: Endpoint Number.
    509          *                  wCount: new count value.
    510          * Output         : None.
    511          * Return         : None.
    512          *******************************************************************************/
    513          void SetEPTxCount(u8 bEpNum, u16 wCount)
    514          {
    515            _SetEPTxCount(bEpNum, wCount);
    516          }
    517          /*******************************************************************************
    518          * Function Name  : SetEPCountRxReg.
    519          * Description    : Set the Count Rx Register value.
    520          * Input          : *pdwReg: point to the register.
    521          *                  wCount: the new register value.
    522          * Output         : None.
    523          * Return         : None.
    524          *******************************************************************************/
    525          void SetEPCountRxReg(u32 *pdwReg, u16 wCount)
    526          {
    527            _SetEPCountRxReg(dwReg, wCount);
    528          }
    529          /*******************************************************************************
    530          * Function Name  : SetEPRxCount
    531          * Description    : Set the Rx count.
    532          * Input          : bEpNum: Endpoint Number. 
    533          *                  wCount: the new count value.
    534          * Output         : None.
    535          * Return         : None.
    536          *******************************************************************************/
    537          void SetEPRxCount(u8 bEpNum, u16 wCount)
    538          {
    539            _SetEPRxCount(bEpNum, wCount);
    540          }
    541          /*******************************************************************************
    542          * Function Name  : GetEPTxCount
    543          * Description    : Get the Tx count.
    544          * Input          : bEpNum: Endpoint Number. 
    545          * Output         : None
    546          * Return         : Tx count value.
    547          *******************************************************************************/
    548          u16 GetEPTxCount(u8 bEpNum)
    549          {
    550            return(_GetEPTxCount(bEpNum));
    551          }
    552          /*******************************************************************************
    553          * Function Name  : GetEPRxCount
    554          * Description    : Get the Rx count.
    555          * Input          : bEpNum: Endpoint Number. 
    556          * Output         : None.
    557          * Return         : Rx count value.
    558          *******************************************************************************/
    559          u16 GetEPRxCount(u8 bEpNum)
    560          {
    561            return(_GetEPRxCount(bEpNum));
    562          }
    563          /*******************************************************************************
    564          * Function Name  : SetEPDblBuffAddr
    565          * Description    : Set the addresses of the buffer 0 and 1.
    566          * Input          : bEpNum: Endpoint Number.  
    567          *                  wBuf0Addr: new address of buffer 0. 
    568          *                  wBuf1Addr: new address of buffer 1.
    569          * Output         : None.
    570          * Return         : None.
    571          *******************************************************************************/
    572          void SetEPDblBuffAddr(u8 bEpNum, u16 wBuf0Addr, u16 wBuf1Addr)
    573          {
    574            _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
    575          }
    576          /*******************************************************************************
    577          * Function Name  : SetEPDblBuf0Addr
    578          * Description    : Set the Buffer 1 address.
    579          * Input          : bEpNum: Endpoint Number
    580          *                  wBuf0Addr: new address.
    581          * Output         : None.
    582          * Return         : None.
    583          *******************************************************************************/
    584          void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
    585          {
    586            _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
    587          }
    588          /*******************************************************************************
    589          * Function Name  : SetEPDblBuf1Addr
    590          * Description    : Set the Buffer 1 address.
    591          * Input          : bEpNum: Endpoint Number
    592          *                  wBuf1Addr: new address.
    593          * Output         : None.
    594          * Return         : None.
    595          *******************************************************************************/
    596          void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
    597          {
    598            _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
    599          }
    600          /*******************************************************************************
    601          * Function Name  : GetEPDblBuf0Addr
    602          * Description    : Returns the address of the Buffer 0.
    603          * Input          : bEpNum: Endpoint Number.
    604          * Output         : None.
    605          * Return         : None.
    606          *******************************************************************************/
    607          u16 GetEPDblBuf0Addr(u8 bEpNum)
    608          {
    609            return(_GetEPDblBuf0Addr(bEpNum));
    610          }
    611          /*******************************************************************************
    612          * Function Name  : GetEPDblBuf1Addr
    613          * Description    : Returns the address of the Buffer 1.
    614          * Input          : bEpNum: Endpoint Number.
    615          * Output         : None.
    616          * Return         : Address of the Buffer 1.
    617          *******************************************************************************/
    618          u16 GetEPDblBuf1Addr(u8 bEpNum)
    619          {
    620            return(_GetEPDblBuf1Addr(bEpNum));
    621          }
    622          /*******************************************************************************
    623          * Function Name  : SetEPDblBuffCount
    624          * Description    : Set the number of bytes for a double Buffer 
    625          *                  endpoint.
    626          * Input          : bEpNum,bDir, wCount
    627          * Output         : None.
    628          * Return         : None.
    629          *******************************************************************************/
    630          void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
    631          {
    632            _SetEPDblBuffCount(bEpNum, bDir, wCount);
    633          }
    634          /*******************************************************************************
    635          * Function Name  : SetEPDblBuf0Count
    636          * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
    637          *                  endpoint.
    638          * Input          : bEpNum, bDir,  wCount
    639          * Output         : None.
    640          * Return         : None.
    641          *******************************************************************************/
    642          void SetEPDblBuf0Count(u8 bEpNum, u8 bDir, u16 wCount)
    643          {
    644            _SetEPDblBuf0Count(bEpNum, bDir, wCount);
    645          }
    646          /*******************************************************************************
    647          * Function Name  : SetEPDblBuf1Count
    648          * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
    649          *                  endpoint.
    650          * Input          : bEpNum,  bDir,  wCount
    651          * Output         : None.
    652          * Return         : None.
    653          *******************************************************************************/
    654          void SetEPDblBuf1Count(u8 bEpNum, u8 bDir, u16 wCount)
    655          {
    656            _SetEPDblBuf1Count(bEpNum, bDir, wCount);
    657          }
    658          /*******************************************************************************
    659          * Function Name  : GetEPDblBuf0Count
    660          * Description    : Returns the number of byte received in the buffer 0 of a double
    661          *                  Buffer endpoint.
    662          * Input          : bEpNum: Endpoint Number.
    663          * Output         : None.
    664          * Return         : Endpoint Buffer 0 count
    665          *******************************************************************************/
    666          u16 GetEPDblBuf0Count(u8 bEpNum)
    667          {
    668            return(_GetEPDblBuf0Count(bEpNum));
    669          }
    670          /*******************************************************************************
    671          * Function Name  : GetEPDblBuf1Count
    672          * Description    : Returns the number of data received in the buffer 1 of a double
    673          *                  Buffer endpoint.
    674          * Input          : bEpNum: Endpoint Number.
    675          * Output         : None.
    676          * Return         : Endpoint Buffer 1 count.
    677          *******************************************************************************/
    678          u16 GetEPDblBuf1Count(u8 bEpNum)
    679          {
    680            return(_GetEPDblBuf1Count(bEpNum));
    681          }
    682          /*******************************************************************************
    683          * Function Name  : GetEPDblBufDir
    684          * Description    : gets direction of the double buffered endpoint
    685          * Input          : bEpNum: Endpoint Number. 
    686          * Output         : None.
    687          * Return         : EP_DBUF_OUT, EP_DBUF_IN,
    688          *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
    689          *******************************************************************************/
    690          EP_DBUF_DIR GetEPDblBufDir(u8 bEpNum)
    691          {
    692            if ((u16)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
    693              return(EP_DBUF_OUT);
    694            else if (((u16)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
    695              return(EP_DBUF_IN);
    696            else
    697              return(EP_DBUF_ERR);
    698          }
    699          /*******************************************************************************
    700          * Function Name  : FreeUserBuffer
    701          * Description    : free buffer used from the application realizing it to the line
    702                             toggles bit SW_BUF in the double buffered endpoint register
    703          * Input          : bEpNum, bDir
    704          * Output         : None.
    705          * Return         : None.
    706          *******************************************************************************/
    707          void FreeUserBuffer(u8 bEpNum, u8 bDir)
    708          {
    709            if (bDir == EP_DBUF_OUT)
    710            { /* OUT double buffered endpoint */
    711              _ToggleDTOG_TX(bEpNum);
    712            }
    713            else if (bDir == EP_DBUF_IN)
    714            { /* IN double buffered endpoint */
    715              _ToggleDTOG_RX(bEpNum);
    716            }
    717          }
    718          
    719          /*******************************************************************************
    720          * Function Name  : ToWord
    721          * Description    : merge two byte in a word.
    722          * Input          : bh: byte high, bl: bytes low.
    723          * Output         : None.
    724          * Return         : resulted word.
    725          *******************************************************************************/
    726          u16 ToWord(u8 bh, u8 bl)
    727          {
    728            u16 wRet;
    729            wRet = (u16)bl | ((u16)bh << 8);
    730            return(wRet);
    731          }
    732          /*******************************************************************************
    733          * Function Name  : ByteSwap
    734          * Description    : Swap two byte in a word.
    735          * Input          : wSwW: word to Swap.
    736          * Output         : None.
    737          * Return         : resulted word.
    738          *******************************************************************************/
    739          u16 ByteSwap(u16 wSwW)
    740          {
    741            u8 bTemp;
    742            u16 wRet;
    743            bTemp = (u8)(wSwW & 0xff);
    744            wRet =  (wSwW >> 8) | ((u16)bTemp << 8);
    745            return(wRet);
    746          }
    747          
    748          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ByteSwap                  0
     ClearDTOG_RX              0
     ClearDTOG_TX              0
     ClearEPDoubleBuff         0
     ClearEP_CTR_RX            0
     ClearEP_CTR_TX            0
     ClearEP_KIND              0
     Clear_Status_Out          0
     FreeUserBuffer            0
     GetBTABLE                 0
     GetCNTR                   0
     GetDADDR                  0
     GetENDPOINT               0
     GetEPAddress              0
     GetEPDblBuf0Addr          0
     GetEPDblBuf0Count         0
     GetEPDblBuf1Addr          0
     GetEPDblBuf1Count         0
     GetEPDblBufDir            0
     GetEPRxAddr               0
     GetEPRxCount              0
     GetEPRxStatus             0
     GetEPTxAddr               0
     GetEPTxCount              0
     GetEPTxStatus             0
     GetEPType                 0
     GetFNR                    0
     GetISTR                   0
     GetRxStallStatus          0
     GetTxStallStatus          0
     SetBTABLE                 0
     SetCNTR                   0
     SetDADDR                  0
     SetDouBleBuffEPStall     16
     SetENDPOINT               0
     SetEPAddress              0
     SetEPCountRxReg           0
     SetEPDblBuf0Addr          0
     SetEPDblBuf0Count         0
     SetEPDblBuf1Addr          0
     SetEPDblBuf1Count         0
     SetEPDblBuffAddr          8
     SetEPDblBuffCount         8
     SetEPDoubleBuff           0
     SetEPRxAddr               0
     SetEPRxCount              0
     SetEPRxStatus             0
     SetEPRxValid              0
     SetEPTxAddr               0
     SetEPTxCount              0
     SetEPTxStatus             0
     SetEPTxValid              0
     SetEPType                 0
     SetEP_KIND                0
     SetISTR                   0
     Set_Status_Out            0
     ToWord                    0
     ToggleDTOG_RX             0
     ToggleDTOG_TX             0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     SetCNTR                 8
     GetCNTR                 8
     SetISTR                 8
     GetISTR                 8
     GetFNR                 12
     SetDADDR                8
     GetDADDR                8
     SetBTABLE              14
     GetBTABLE              10
     SetENDPOINT            14
     GetENDPOINT            14
     SetEPType              32
     GetEPType              16
     SetEPTxStatus          58
     SetEPRxStatus          56
     SetDouBleBuffEPStall   62
     GetEPTxStatus          16
     GetEPRxStatus          16
     SetEPTxValid           44
     SetEPRxValid           44
     SetEP_KIND             36
     ClearEP_KIND           36
     Clear_Status_Out       36
     Set_Status_Out         36
     SetEPDoubleBuff        36
     ClearEPDoubleBuff      36
     GetTxStallStatus       30
     GetRxStallStatus       32
     ClearEP_CTR_RX         28
     ClearEP_CTR_TX         30
     ToggleDTOG_RX          34
     ToggleDTOG_TX          34
     ClearDTOG_RX           50
     ClearDTOG_TX           50
     SetEPAddress           38
     GetEPAddress           16
     SetEPTxAddr            30
     SetEPRxAddr            30
     GetEPTxAddr            24
     GetEPRxAddr            24
     SetEPTxCount           26
     SetEPCountRxReg        50
     SetEPRxCount           68
     GetEPTxCount           24
     GetEPRxCount           24
     SetEPDblBuffAddr       58
     SetEPDblBuf0Addr       28
     SetEPDblBuf1Addr       28
     GetEPDblBuf0Addr       22
     GetEPDblBuf1Addr       22
     SetEPDblBuffCount     210
     SetEPDblBuf0Count     102
     SetEPDblBuf1Count     102
     GetEPDblBuf0Count      24
     GetEPDblBuf1Count      24
     GetEPDblBufDir         58
     FreeUserBuffer         72
     ToWord                 12
     ByteSwap               16
     ??DataTable1            4
     ??DataTable3            4
     ??DataTable5            4
     ??DataTable81           4
     ??DataTable83           4
     ??DataTable105          4
     ??DataTable106          4
     ??DataTable107          4
     ??DataTable111          4

 
 2 128 bytes in section .text
 
 2 128 bytes of CODE memory

Errors: none
Warnings: none
