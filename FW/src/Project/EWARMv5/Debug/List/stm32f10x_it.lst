###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     02/Dec/2015  10:22:08 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Project\stm32f10x_it.c              #
#    Command line =  "E:\BT Printer\FW\src\Project\stm32f10x_it.c" -D         #
#                    DEBUG_VER -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Deb #
#                    ug\List\" -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug #
#                    \Obj\" --no_cse --no_unroll --no_inline                  #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\" -I      #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\App\" -I     #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Drivers\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\"   #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\" #
#                     -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC- #
#                    CPU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCO #
#                    S\uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\. #
#                    .\uCOS\uCOS-II\Ports\" -I "E:\BT                         #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\stm32f10 #
#                    x_it.lst                                                 #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\stm32f10x #
#                    _it.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Project\stm32f10x_it.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_it.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : Main Interrupt Service Routines.
      7          *                      This file provides template for all exceptions handler
      8          *                      and peripherals interrupt service routine.
      9          ********************************************************************************
     10          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     12          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     13          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     14          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     15          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "Type.h"
     20          #include "hw_platform.h"
     21          #include "stm32f10x_it.h"
     22          #include "PaperDetect.h"
     23          #include "TP.h"
     24          #include "BT816.h"
     25          #include "usb_int.h"
     26          
     27          /* Private typedef -----------------------------------------------------------*/
     28          /* Private define ------------------------------------------------------------*/
     29          /* Private macro -------------------------------------------------------------*/
     30          /* Private variables ---------------------------------------------------------*/
     31          /* Private function prototypes -----------------------------------------------*/
     32          /* Private functions ---------------------------------------------------------*/
     33          
     34          /*******************************************************************************
     35          * Function Name  : NMIException
     36          * Description    : This function handles NMI exception.
     37          * Input          : None
     38          * Output         : None
     39          * Return         : None
     40          *******************************************************************************/
     41          void NMIException(void)
     42          {
     43          }
     44          
     45          
     46          //然后在源程序里添加下面的函数代码: 
     47          // hard fault handler in C,  
     48          // with stack frame location as input parameter  
     49          void hard_fault_handler_c(unsigned int * hardfault_args)  
     50          {  
     51          	unsigned int stacked_r0;  
     52          	unsigned int stacked_r1;  
     53          	unsigned int stacked_r2;  
     54          	unsigned int stacked_r3;  
     55          	unsigned int stacked_r12;  
     56          	unsigned int stacked_lr;  
     57          	unsigned int stacked_pc;  
     58          	unsigned int stacked_psr;  
     59          	//unsigned char	str[15];
     60          
     61          	stacked_r0 = ((unsigned long) hardfault_args[0]);  
     62          	stacked_r1 = ((unsigned long) hardfault_args[1]);  
     63          	stacked_r2 = ((unsigned long) hardfault_args[2]);  
     64          	stacked_r3 = ((unsigned long) hardfault_args[3]);  
     65          
     66          	stacked_r12 = ((unsigned long) hardfault_args[4]);  
     67          	stacked_lr = ((unsigned long) hardfault_args[5]);  
     68          	stacked_pc = ((unsigned long) hardfault_args[6]);  
     69          	stacked_psr = ((unsigned long) hardfault_args[7]);  
     70          
     71          	//gui_SetFont(16);
     72          	printf ("[Hard fault handler]\n");  
     73          	//sprintf(str,"R0=%x",stacked_r0);
     74          	//gui_TextOut(0,0,str,0,1);
     75          	printf ("R0 = %x\n", stacked_r0); 
     76          	
     77                  
     78                  //sprintf(str,"R1=%x",stacked_r1);
     79          	//gui_TextOut(0,20,str,0,1);
     80          	printf ("R1 = %x\n", stacked_r1);
     81          	//sprintf(str,"R2=%x",stacked_r2);
     82          	//gui_TextOut(0,40,str,0,1);;  
     83          	printf ("R2 = %x\n", stacked_r2);
     84          	//sprintf(str,"R3=%x",stacked_r3);
     85          	//gui_TextOut(0,60,str,0,1);
     86          	printf ("R3 = %x\n", stacked_r3);
     87          	//sprintf(str,"R12=%x",stacked_r12);
     88          	//gui_TextOut(0,80,str,0,1);
     89          	printf ("R12 = %x\n", stacked_r12);  
     90          	//sprintf(str,"LR=%x",stacked_lr);
     91          	//gui_TextOut(0,100,str,0,1);
     92          	printf ("LR = %x\n", stacked_lr);
     93          	//sprintf(str,"PC=%x",stacked_pc);
     94          	//gui_TextOut(0,120,str,0,1);
     95          	printf ("PC = %x\n", stacked_pc);
     96          	//sprintf(str,"PSR=%x",stacked_psr);
     97          	//gui_TextOut(0,140,str,0,1);
     98          	printf ("PSR = %x\n", stacked_psr);  
     99          	printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));  
    100          	printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));  
    101          	printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));  
    102          	printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));  
    103          	printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));  
    104          
    105          
    106          	while(1) 
    107          	{ 
    108          		;; 
    109          	} 
    110          
    111          }  
    112          /*******************************************************************************
    113          * Function Name  : HardFaultException
    114          * Description    : This function handles Hard Fault exception.
    115          * Input          : None
    116          * Output         : None
    117          * Return         : None
    118          *******************************************************************************/
    119          void HardFaultException(void)
    120          {
    121            /* Go to infinite loop when Hard Fault exception occurs */
    122           // while (1)
    123           // {
    124          	// // gui_TextOut(0,0,"HardFault!",0);
    125          	////  while(1);
    126           // }
    127          	HARDFAULT_ISR_HANDLE_d();
    128          }
    129          
    130          //HardFault_Handler\ 
    131          //PROC 
    132          //;EXPORT  HardFault_Handler         [WEAK] 
    133          //;B                  . 
    134          //IMPORT hard_fault_handler_c  
    135          //TST LR, #4  
    136          //ITE EQ  
    137          //MRSEQ R0, MSP  
    138          //MRSNE R0, PSP  
    139          //B hard_fault_handler_c  
    140          //ENDP 
    141          
    142          /*******************************************************************************
    143          * Function Name  : MemManageException
    144          * Description    : This function handles Memory Manage exception.
    145          * Input          : None
    146          * Output         : None
    147          * Return         : None
    148          *******************************************************************************/
    149          void MemManageException(void)
    150          {
    151            /* Go to infinite loop when Memory Manage exception occurs */
    152            while (1)
    153            {
    154            }
    155          }
    156          
    157          /*******************************************************************************
    158          * Function Name  : BusFaultException
    159          * Description    : This function handles Bus Fault exception.
    160          * Input          : None
    161          * Output         : None
    162          * Return         : None
    163          *******************************************************************************/
    164          void BusFaultException(void)
    165          {
    166            /* Go to infinite loop when Bus Fault exception occurs */
    167            while (1)
    168            {
    169            }
    170          }
    171          
    172          /*******************************************************************************
    173          * Function Name  : UsageFaultException
    174          * Description    : This function handles Usage Fault exception.
    175          * Input          : None
    176          * Output         : None
    177          * Return         : None
    178          *******************************************************************************/
    179          void UsageFaultException(void)
    180          {
    181            /* Go to infinite loop when Usage Fault exception occurs */
    182            while (1)
    183            {
    184            }
    185          }
    186          
    187          /*******************************************************************************
    188          * Function Name  : DebugMonitor
    189          * Description    : This function handles Debug Monitor exception.
    190          * Input          : None
    191          * Output         : None
    192          * Return         : None
    193          *******************************************************************************/
    194          void DebugMonitor(void)
    195          {
    196          }
    197          
    198          /*******************************************************************************
    199          * Function Name  : SVCHandler
    200          * Description    : This function handles SVCall exception.
    201          * Input          : None
    202          * Output         : None
    203          * Return         : None
    204          *******************************************************************************/
    205          void SVCHandler(void)
    206          {
    207          }
    208          
    209          /*******************************************************************************
    210          * Function Name  : PendSVC
    211          * Description    : This function handles PendSVC exception.
    212          * Input          : None
    213          * Output         : None
    214          * Return         : None
    215          *******************************************************************************/
    216          void PendSVC(void)
    217          {
    218          }
    219          
    220          /*******************************************************************************
    221          * Function Name  : SysTickHandler
    222          * Description    : This function handles SysTick Handler.
    223          * Input          : None
    224          * Output         : None
    225          * Return         : None
    226          *******************************************************************************/
    227          void SysTickHandler(void)
    228          { 
    229          	SysTick_IRQ_Handle();
    230          }
    231          
    232          /*******************************************************************************
    233          * Function Name  : WWDG_IRQHandler
    234          * Description    : This function handles WWDG interrupt request.
    235          * Input          : None
    236          * Output         : None
    237          * Return         : None
    238          *******************************************************************************/
    239          void WWDG_IRQHandler(void)
    240          {
    241          }
    242          
    243          /*******************************************************************************
    244          * Function Name  : PVD_IRQHandler
    245          * Description    : This function handles PVD interrupt request.
    246          * Input          : None
    247          * Output         : None
    248          * Return         : None
    249          *******************************************************************************/
    250          void PVD_IRQHandler(void)
    251          {
    252          }
    253          
    254          /*******************************************************************************
    255          * Function Name  : TAMPER_IRQHandler
    256          * Description    : This function handles Tamper interrupt request. 
    257          * Input          : None
    258          * Output         : None
    259          * Return         : None
    260          *******************************************************************************/
    261          void TAMPER_IRQHandler(void)
    262          {
    263          }
    264          
    265          /*******************************************************************************
    266          * Function Name  : RTC_IRQHandler
    267          * Description    : This function handles RTC global interrupt request.
    268          * Input          : None
    269          * Output         : None
    270          * Return         : None
    271          *******************************************************************************/
    272          void RTC_IRQHandler(void)
    273          {
    274          }
    275          
    276          /*******************************************************************************
    277          * Function Name  : FLASH_IRQHandler
    278          * Description    : This function handles Flash interrupt request.
    279          * Input          : None
    280          * Output         : None
    281          * Return         : None
    282          *******************************************************************************/
    283          void FLASH_IRQHandler(void)
    284          {
    285          }
    286          
    287          /*******************************************************************************
    288          * Function Name  : RCC_IRQHandler
    289          * Description    : This function handles RCC interrupt request. 
    290          * Input          : None
    291          * Output         : None
    292          * Return         : None
    293          *******************************************************************************/
    294          void RCC_IRQHandler(void)
    295          {
    296          }
    297          
    298          /*******************************************************************************
    299          * Function Name  : EXTI0_IRQHandler
    300          * Description    : This function handles External interrupt Line 0 request.
    301          * Input          : None
    302          * Output         : None
    303          * Return         : None
    304          *******************************************************************************/
    305          void EXTI0_IRQHandler(void)
    306          {
    307          
    308          }
    309          
    310          /*******************************************************************************
    311          * Function Name  : EXTI1_IRQHandler
    312          * Description    : This function handles External interrupt Line 1 request.
    313          * Input          : None
    314          * Output         : None
    315          * Return         : None
    316          *******************************************************************************/
    317          void EXTI1_IRQHandler(void)
    318          {
    319          
    320          }
    321          
    322          /*******************************************************************************
    323          * Function Name  : EXTI2_IRQHandler
    324          * Description    : This function handles External interrupt Line 2 request.
    325          * Input          : None
    326          * Output         : None
    327          * Return         : None
    328          *******************************************************************************/
    329          void EXTI2_IRQHandler(void)
    330          {
    331          }
    332          
    333          /*******************************************************************************
    334          * Function Name  : EXTI3_IRQHandler
    335          * Description    : This function handles External interrupt Line 3 request.
    336          * Input          : None
    337          * Output         : None
    338          * Return         : None
    339          *******************************************************************************/
    340          void EXTI3_IRQHandler(void)
    341          {
    342          
    343          }
    344          
    345          /*******************************************************************************
    346          * Function Name  : EXTI4_IRQHandler
    347          * Description    : This function handles External interrupt Line 4 request.
    348          * Input          : None
    349          * Output         : None
    350          * Return         : None
    351          *******************************************************************************/
    352          void EXTI4_IRQHandler(void)
    353          {
    354          }
    355          
    356          /*******************************************************************************
    357          * Function Name  : DMA1_Channel1_IRQHandler
    358          * Description    : This function handles DMA1 Channel 1 interrupt request.
    359          * Input          : None
    360          * Output         : None
    361          * Return         : None
    362          *******************************************************************************/
    363          void DMA1_Channel1_IRQHandler(void)
    364          {
    365          }
    366          
    367          /*******************************************************************************
    368          * Function Name  : DMA1_Channel2_IRQHandler
    369          * Description    : This function handles DMA1 Channel 2 interrupt request.
    370          * Input          : None
    371          * Output         : None
    372          * Return         : None
    373          *******************************************************************************/
    374          void DMA1_Channel2_IRQHandler(void)
    375          {
    376          #if(BT_MODULE_CONFIG & USE_BT3_MODULE)
    377          	if (DMA_GetITStatus(DMA1_IT_TC2))
    378          	{
    379          		DMA_Cmd(DMA1_Channel2, DISABLE);
    380          	}
    381          	/* clear DMA flag */
    382          	DMA_ClearFlag(DMA1_FLAG_TC2 | DMA1_FLAG_TE2);
    383          #endif
    384          }
    385          
    386          /*******************************************************************************
    387          * Function Name  : DMA1_Channel3_IRQHandler
    388          * Description    : This function handles DMA1 Channel 3 interrupt request.
    389          * Input          : None
    390          * Output         : None
    391          * Return         : None
    392          *******************************************************************************/
    393          void DMA1_Channel3_IRQHandler(void)
    394          {
    395          }
    396          
    397          /*******************************************************************************
    398          * Function Name  : DMA1_Channel4_IRQHandler
    399          * Description    : This function handles DMA1 Channel 4 interrupt request.
    400          * Input          : None
    401          * Output         : None
    402          * Return         : None
    403          *******************************************************************************/
    404          void DMA1_Channel4_IRQHandler(void)
    405          {
    406          #if(BT_MODULE_CONFIG & USE_BT1_MODULE)
    407          	if (DMA_GetITStatus(DMA1_IT_TC4))
    408          	{
    409          		DMA_Cmd(DMA1_Channel4, DISABLE);
    410          	}
    411          	/* clear DMA flag */
    412          	DMA_ClearFlag(DMA1_FLAG_TC4 | DMA1_FLAG_TE4);
    413          #endif
    414          }
    415          
    416          /*******************************************************************************
    417          * Function Name  : DMA1_Channel5_IRQHandler
    418          * Description    : This function handles DMA1 Channel 5 interrupt request.
    419          * Input          : None
    420          * Output         : None
    421          * Return         : None
    422          *******************************************************************************/
    423          void DMA1_Channel5_IRQHandler(void)
    424          {
    425          }
    426          
    427          /*******************************************************************************
    428          * Function Name  : DMA1_Channel6_IRQHandler
    429          * Description    : This function handles DMA1 Channel 6 interrupt request.
    430          * Input          : None
    431          * Output         : None
    432          * Return         : None
    433          *******************************************************************************/
    434          void DMA1_Channel6_IRQHandler(void)
    435          {
    436          }
    437          
    438          /*******************************************************************************
    439          * Function Name  : DMA1_Channel7_IRQHandler
    440          * Description    : This function handles DMA1 Channel 7 interrupt request.
    441          * Input          : None
    442          * Output         : None
    443          * Return         : None
    444          *******************************************************************************/
    445          void DMA1_Channel7_IRQHandler(void)
    446          {
    447          #if(BT_MODULE_CONFIG & USE_BT2_MODULE)
    448          	if (DMA_GetITStatus(DMA1_IT_TC7))
    449          	{
    450          		DMA_Cmd(DMA1_Channel7, DISABLE);
    451          	}
    452          	/* clear DMA flag */
    453          	DMA_ClearFlag(DMA1_FLAG_TC7 | DMA1_FLAG_TE7);
    454          #endif
    455          }
    456          
    457          /*******************************************************************************
    458          * Function Name  : ADC1_2_IRQHandler
    459          * Description    : This function handles ADC1 and ADC2 global interrupts requests.
    460          * Input          : None
    461          * Output         : None
    462          * Return         : None
    463          *******************************************************************************/
    464          void ADC1_2_IRQHandler(void)
    465          {
    466          }
    467          
    468          /*******************************************************************************
    469          * Function Name  : USB_HP_CAN_TX_IRQHandler
    470          * Description    : This function handles USB High Priority or CAN TX interrupts 
    471          *                  requests.
    472          * Input          : None
    473          * Output         : None
    474          * Return         : None
    475          *******************************************************************************/
    476          void USB_HP_CAN_TX_IRQHandler(void)
    477          {
    478            CTR_HP();
    479          }
    480          
    481          /*******************************************************************************
    482          * Function Name  : USB_LP_CAN_RX0_IRQHandler
    483          * Description    : This function handles USB Low Priority or CAN RX0 interrupts 
    484          *                  requests.
    485          * Input          : None
    486          * Output         : None
    487          * Return         : None
    488          *******************************************************************************/
    489          void USB_LP_CAN_RX0_IRQHandler(void)
    490          {
    491            USB_Istr();
    492          }
    493          
    494          /*******************************************************************************
    495          * Function Name  : CAN_RX1_IRQHandler
    496          * Description    : This function handles CAN RX1 interrupt request.
    497          * Input          : None
    498          * Output         : None
    499          * Return         : None
    500          *******************************************************************************/
    501          void CAN_RX1_IRQHandler(void)
    502          {
    503          }
    504          
    505          /*******************************************************************************
    506          * Function Name  : CAN_SCE_IRQHandler
    507          * Description    : This function handles CAN SCE interrupt request.
    508          * Input          : None
    509          * Output         : None
    510          * Return         : None
    511          *******************************************************************************/
    512          void CAN_SCE_IRQHandler(void)
    513          {
    514          }
    515          
    516          /*******************************************************************************
    517          * Function Name  : EXTI9_5_IRQHandler
    518          * Description    : This function handles External lines 9 to 5 interrupt request.
    519          * Input          : None
    520          * Output         : None
    521          * Return         : None
    522          *******************************************************************************/
    523          void EXTI9_5_IRQHandler(void)
    524          {
    525          }
    526          
    527          /*******************************************************************************
    528          * Function Name  : TIM1_BRK_IRQHandler
    529          * Description    : This function handles TIM1 Break interrupt request.
    530          * Input          : None
    531          * Output         : None
    532          * Return         : None
    533          *******************************************************************************/
    534          void TIM1_BRK_IRQHandler(void)
    535          {
    536          }
    537          
    538          /*******************************************************************************
    539          * Function Name  : TIM1_UP_IRQHandler
    540          * Description    : This function handles TIM1 overflow and update interrupt 
    541          *                  request.
    542          * Input          : None
    543          * Output         : None
    544          * Return         : None
    545          *******************************************************************************/
    546          void TIM1_UP_IRQHandler(void)
    547          {
    548          }
    549          
    550          /*******************************************************************************
    551          * Function Name  : TIM1_TRG_COM_IRQHandler
    552          * Description    : This function handles TIM1 Trigger and commutation interrupts 
    553          *                  requests.
    554          * Input          : None
    555          * Output         : None
    556          * Return         : None
    557          *******************************************************************************/
    558          void TIM1_TRG_COM_IRQHandler(void)
    559          {
    560          }
    561          
    562          /*******************************************************************************
    563          * Function Name  : TIM1_CC_IRQHandler
    564          * Description    : This function handles TIM1 capture compare interrupt request.
    565          * Input          : None
    566          * Output         : None
    567          * Return         : None
    568          *******************************************************************************/
    569          void TIM1_CC_IRQHandler(void)
    570          {
    571          }
    572          
    573          /*******************************************************************************
    574          * Function Name  : TIM2_IRQHandler
    575          * Description    : This function handles TIM2 global interrupt request.
    576          * Input          : None
    577          * Output         : None
    578          * Return         : None
    579          *******************************************************************************/
    580          void TIM2_IRQHandler(void)
    581          {
    582              TIM2_UpdateISRHandler();
    583          }
    584          
    585          /*******************************************************************************
    586          * Function Name  : TIM3_IRQHandler
    587          * Description    : This function handles TIM3 global interrupt request.
    588          * Input          : None
    589          * Output         : None
    590          * Return         : None
    591          *******************************************************************************/
    592          void TIM3_IRQHandler(void)
    593          {
    594          	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
    595          	{
    596          		TIM3_IRQ_Handle();
    597          		//TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
    598          		 TIM3->SR = (u16)~TIM_IT_Update;
    599          	}
    600          }
    601          
    602          /*******************************************************************************
    603          * Function Name  : TIM4_IRQHandler
    604          * Description    : This function handles TIM4 global interrupt request.
    605          * Input          : None
    606          * Output         : None
    607          * Return         : None
    608          *******************************************************************************/
    609          void TIM4_IRQHandler(void)
    610          {
    611          }
    612          
    613          /*******************************************************************************
    614          * Function Name  : I2C1_EV_IRQHandler
    615          * Description    : This function handles I2C1 Event interrupt request.
    616          * Input          : None
    617          * Output         : None
    618          * Return         : None
    619          *******************************************************************************/
    620          void I2C1_EV_IRQHandler(void)
    621          {
    622          }
    623          
    624          /*******************************************************************************
    625          * Function Name  : I2C1_ER_IRQHandler
    626          * Description    : This function handles I2C1 Error interrupt request.
    627          * Input          : None
    628          * Output         : None
    629          * Return         : None
    630          *******************************************************************************/
    631          void I2C1_ER_IRQHandler(void)
    632          {
    633          }
    634          
    635          /*******************************************************************************
    636          * Function Name  : I2C2_EV_IRQHandler
    637          * Description    : This function handles I2C2 Event interrupt request.
    638          * Input          : None
    639          * Output         : None
    640          * Return         : None
    641          *******************************************************************************/
    642          void I2C2_EV_IRQHandler(void)
    643          {
    644          }
    645          
    646          /*******************************************************************************
    647          * Function Name  : I2C2_ER_IRQHandler
    648          * Description    : This function handles I2C2 Error interrupt request.
    649          * Input          : None
    650          * Output         : None
    651          * Return         : None
    652          *******************************************************************************/
    653          void I2C2_ER_IRQHandler(void)
    654          {
    655          }
    656          
    657          /*******************************************************************************
    658          * Function Name  : SPI1_IRQHandler
    659          * Description    : This function handles SPI1 global interrupt request.
    660          * Input          : None
    661          * Output         : None
    662          * Return         : None
    663          *******************************************************************************/
    664          void SPI1_IRQHandler(void)
    665          {
    666          }
    667          
    668          /*******************************************************************************
    669          * Function Name  : SPI2_IRQHandler
    670          * Description    : This function handles SPI2 global interrupt request.
    671          * Input          : None
    672          * Output         : None
    673          * Return         : None
    674          *******************************************************************************/
    675          void SPI2_IRQHandler(void)
    676          {
    677          }
    678          
    679          /*******************************************************************************
    680          * Function Name  : USART1_IRQHandler
    681          * Description    : This function handles USART1 global interrupt request.
    682          * Input          : None
    683          * Output         : None
    684          * Return         : None
    685          *******************************************************************************/
    686          void USART1_IRQHandler(void)
    687          {
    688          #if(BT_MODULE_CONFIG & USE_BT1_MODULE)
    689          	unsigned int temp = 0;    
    690          	if(USART_GetITStatus(USART1, USART_IT_IDLE) != RESET)  
    691          	{  
    692          		//USART_ClearFlag(USART1,USART_IT_IDLE);  
    693          		temp = USART1->SR;  
    694          		temp = USART1->DR; //清USART_IT_IDLE标志  
    695          		DMA_Cmd(DMA1_Channel5,DISABLE);  
    696          
    697          		temp = BT816_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel5);  
    698          
    699          		BT816_Channel1_RxISRHandler(BT816_recbuffer[BT1_MODULE],temp); 
    700          
    701          		//设置传输数据长度  
    702          		//DMA1_Channel5->CNDTR = BT816_RES_BUFFER_LEN; 
    703          
    704          
    705          		//打开DMA  
    706          		DMA_Cmd(DMA1_Channel5,ENABLE);  
    707          	}  
    708          	else if (USART_GetFlagStatus(USART1, USART_FLAG_ORE) != RESET)
    709          	{
    710          		USART_ReceiveData(USART1);
    711          	}
    712          #endif
    713          }
    714          
    715          /*******************************************************************************
    716          * Function Name  : USART2_IRQHandler
    717          * Description    : This function handles USART2 global interrupt request.
    718          * Input          : None
    719          * Output         : None
    720          * Return         : None
    721          *******************************************************************************/
    722          void USART2_IRQHandler(void)
    723          {
    724          #if(BT_MODULE_CONFIG & USE_BT2_MODULE)
    725          	unsigned int temp = 0;    
    726          	if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)  
    727          	{  
    728          		//USART_ClearFlag(USART2,USART_IT_IDLE);  
    729          		temp = USART2->SR;  
    730          		temp = USART2->DR; //清USART_IT_IDLE标志  
    731          		DMA_Cmd(DMA1_Channel6,DISABLE);  
    732          
    733          		temp = BT816_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel6);  
    734          
    735          		BT816_Channel2_RxISRHandler(BT816_recbuffer[BT2_MODULE],temp); 
    736          
    737          		//设置传输数据长度  
    738          		//DMA1_Channel6->CNDTR = BT816_RES_BUFFER_LEN; 
    739          
    740          
    741          		//打开DMA  
    742          		DMA_Cmd(DMA1_Channel6,ENABLE);  
    743          	}  
    744          	else if (USART_GetFlagStatus(USART2, USART_FLAG_ORE) != RESET)
    745          	{
    746          		USART_ReceiveData(USART2);
    747          	}
    748          #endif
    749          }
    750          
    751          /*******************************************************************************
    752          * Function Name  : USART3_IRQHandler
    753          * Description    : This function handles USART3 global interrupt request.
    754          * Input          : None
    755          * Output         : None
    756          * Return         : None
    757          *******************************************************************************/
    758          void USART3_IRQHandler(void)
    759          {
    760          #if(BT_MODULE_CONFIG & USE_BT3_MODULE)
    761          	unsigned int temp = 0;    
    762          	if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)  
    763          	{  
    764          		//USART_ClearFlag(USART3,USART_IT_IDLE);  
    765          		temp = USART3->SR;  
    766          		temp = USART3->DR; //清USART_IT_IDLE标志  
    767          		DMA_Cmd(DMA1_Channel3,DISABLE);  
    768          
    769          		temp = BT816_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel3);  
    770          
    771          		BT816_Channel3_RxISRHandler(BT816_recbuffer[BT3_MODULE],temp); 
    772          
    773          		//设置传输数据长度  
    774          		//DMA1_Channel3->CNDTR = BT816_RES_BUFFER_LEN; 
    775          
    776          
    777          		//打开DMA  
    778          		DMA_Cmd(DMA1_Channel3,ENABLE);  
    779          	}  
    780          	else if (USART_GetFlagStatus(USART3, USART_FLAG_ORE) != RESET)
    781          	{
    782          		USART_ReceiveData(USART3);
    783          	}
    784          #endif
    785          }
    786          
    787          /*******************************************************************************
    788          * Function Name  : EXTI15_10_IRQHandler
    789          * Description    : This function handles External lines 15 to 10 interrupt request.
    790          * Input          : None
    791          * Output         : None
    792          * Return         : None
    793          *******************************************************************************/
    794          void EXTI15_10_IRQHandler(void)
    795          {
    796          }
    797          
    798          /*******************************************************************************
    799          * Function Name  : RTCAlarm_IRQHandler
    800          * Description    : This function handles RTC Alarm interrupt request.
    801          * Input          : None
    802          * Output         : None
    803          * Return         : None
    804          *******************************************************************************/
    805          void RTCAlarm_IRQHandler(void)
    806          {
    807          }
    808          
    809          /*******************************************************************************
    810          * Function Name  : USBWakeUp_IRQHandler
    811          * Description    : This function handles USB WakeUp interrupt request.
    812          * Input          : None
    813          * Output         : None
    814          * Return         : None
    815          *******************************************************************************/
    816          void USBWakeUp_IRQHandler(void)
    817          {
    818          }
    819          
    820          /*******************************************************************************
    821          * Function Name  : TIM8_BRK_IRQHandler
    822          * Description    : This function handles TIM8 Break interrupt request.
    823          * Input          : None
    824          * Output         : None
    825          * Return         : None
    826          *******************************************************************************/
    827          void TIM8_BRK_IRQHandler(void)
    828          {
    829          }
    830          
    831          /*******************************************************************************
    832          * Function Name  : TIM8_UP_IRQHandler
    833          * Description    : This function handles TIM8 overflow and update interrupt 
    834          *                  request.
    835          * Input          : None
    836          * Output         : None
    837          * Return         : None
    838          *******************************************************************************/
    839          void TIM8_UP_IRQHandler(void)
    840          {
    841          }
    842          
    843          /*******************************************************************************
    844          * Function Name  : TIM8_TRG_COM_IRQHandler
    845          * Description    : This function handles TIM8 Trigger and commutation interrupts 
    846          *                  requests.
    847          * Input          : None
    848          * Output         : None
    849          * Return         : None
    850          *******************************************************************************/
    851          void TIM8_TRG_COM_IRQHandler(void)
    852          {
    853          }
    854          
    855          /*******************************************************************************
    856          * Function Name  : TIM8_CC_IRQHandler
    857          * Description    : This function handles TIM8 capture compare interrupt request.
    858          * Input          : None
    859          * Output         : None
    860          * Return         : None
    861          *******************************************************************************/
    862          void TIM8_CC_IRQHandler(void)
    863          {
    864          }
    865          
    866          /*******************************************************************************
    867          * Function Name  : ADC3_IRQHandler
    868          * Description    : This function handles ADC3 global interrupt request.
    869          * Input          : None
    870          * Output         : None
    871          * Return         : None
    872          *******************************************************************************/
    873          void ADC3_IRQHandler(void)
    874          {
    875          }
    876          
    877          /*******************************************************************************
    878          * Function Name  : FSMC_IRQHandler
    879          * Description    : This function handles FSMC global interrupt request.
    880          * Input          : None
    881          * Output         : None
    882          * Return         : None
    883          *******************************************************************************/
    884          void FSMC_IRQHandler(void)
    885          {
    886          }
    887          
    888          /*******************************************************************************
    889          * Function Name  : SDIO_IRQHandler
    890          * Description    : This function handles SDIO global interrupt request.
    891          * Input          : None
    892          * Output         : None
    893          * Return         : None
    894          *******************************************************************************/
    895          void SDIO_IRQHandler(void)
    896          {
    897          }
    898          
    899          /*******************************************************************************
    900          * Function Name  : TIM5_IRQHandler
    901          * Description    : This function handles TIM5 global interrupt request.
    902          * Input          : None
    903          * Output         : None
    904          * Return         : None
    905          *******************************************************************************/
    906          void TIM5_IRQHandler(void)
    907          {
    908          }
    909          
    910          /*******************************************************************************
    911          * Function Name  : SPI3_IRQHandler
    912          * Description    : This function handles SPI3 global interrupt request.
    913          * Input          : None
    914          * Output         : None
    915          * Return         : None
    916          *******************************************************************************/
    917          void SPI3_IRQHandler(void)
    918          {
    919          }
    920          
    921          /*******************************************************************************
    922          * Function Name  : UART4_IRQHandler
    923          * Description    : This function handles UART4 global interrupt request.
    924          * Input          : None
    925          * Output         : None
    926          * Return         : None
    927          *******************************************************************************/
    928          void UART4_IRQHandler(void)
    929          {
    930          #if(BT_MODULE_CONFIG & USE_BT4_MODULE)
    931          	unsigned int temp = 0;    
    932          	if(USART_GetITStatus(UART4, USART_IT_IDLE) != RESET)  
    933          	{  
    934          		DMA_Cmd(DMA2_Channel3,DISABLE);
    935          		//USART_ClearFlag(USART1,USART_IT_IDLE);  
    936          		temp = UART4->SR;  
    937          		temp = UART4->DR; //清USART_IT_IDLE标志  
    938          
    939          		temp = BT816_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA2_Channel3);  
    940          
    941          		BT816_Channel4_RxISRHandler(BT816_recbuffer[BT4_MODULE],temp); 
    942          
    943          		//设置传输数据长度  
    944          		//DMA2_Channel3->CNDTR = BT816_RES_BUFFER_LEN; 
    945          
    946          
    947          		//打开DMA  
    948          		DMA_Cmd(DMA2_Channel3,ENABLE);  
    949          	}  
    950          	else if (USART_GetFlagStatus(UART4, USART_FLAG_ORE) != RESET)
    951          	{
    952          		USART_ReceiveData(UART4);
    953          	}
    954          #endif
    955          }
    956          
    957          /*******************************************************************************
    958          * Function Name  : UART5_IRQHandler
    959          * Description    : This function handles UART5 global interrupt request.
    960          * Input          : None
    961          * Output         : None
    962          * Return         : None
    963          *******************************************************************************/
    964          void UART5_IRQHandler(void)
    965          {
    966          }
    967          
    968          /*******************************************************************************
    969          * Function Name  : TIM6_IRQHandler
    970          * Description    : This function handles TIM6 global interrupt request.
    971          * Input          : None
    972          * Output         : None
    973          * Return         : None
    974          *******************************************************************************/
    975          void TIM6_IRQHandler(void)
    976          {
    977          }
    978          
    979          /*******************************************************************************
    980          * Function Name  : TIM7_IRQHandler
    981          * Description    : This function handles TIM7 global interrupt request.
    982          * Input          : None
    983          * Output         : None
    984          * Return         : None
    985          *******************************************************************************/
    986          void TIM7_IRQHandler(void)
    987          {
    988          }
    989          
    990          /*******************************************************************************
    991          * Function Name  : DMA2_Channel1_IRQHandler
    992          * Description    : This function handles DMA2 Channel 1 interrupt request.
    993          * Input          : None
    994          * Output         : None
    995          * Return         : None
    996          *******************************************************************************/
    997          void DMA2_Channel1_IRQHandler(void)
    998          {
    999          }
   1000          
   1001          /*******************************************************************************
   1002          * Function Name  : DMA2_Channel2_IRQHandler
   1003          * Description    : This function handles DMA2 Channel 2 interrupt request.
   1004          * Input          : None
   1005          * Output         : None
   1006          * Return         : None
   1007          *******************************************************************************/
   1008          void DMA2_Channel2_IRQHandler(void)
   1009          {
   1010          }
   1011          
   1012          /*******************************************************************************
   1013          * Function Name  : DMA2_Channel3_IRQHandler
   1014          * Description    : This function handles DMA2 Channel 3 interrupt request.
   1015          * Input          : None
   1016          * Output         : None
   1017          * Return         : None
   1018          *******************************************************************************/
   1019          void DMA2_Channel3_IRQHandler(void)
   1020          {
   1021          }
   1022          
   1023          /*******************************************************************************
   1024          * Function Name  : DMA2_Channel4_5_IRQHandler
   1025          * Description    : This function handles DMA2 Channel 4 and DMA2 Channel 5
   1026          *                  interrupt request.
   1027          * Input          : None
   1028          * Output         : None
   1029          * Return         : None
   1030          *******************************************************************************/
   1031          void DMA2_Channel4_5_IRQHandler(void)
   1032          {
   1033          #if(BT_MODULE_CONFIG & USE_BT4_MODULE)
   1034          	if (DMA_GetITStatus(DMA2_IT_TC5))
   1035          	{
   1036          		DMA_Cmd(DMA2_Channel5, DISABLE);
   1037          	}
   1038          	/* clear DMA flag */
   1039          	DMA_ClearFlag(DMA2_FLAG_TC5 | DMA2_FLAG_TE5);
   1040          #endif
   1041          }
   1042          
   1043          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     ADC1_2_IRQHandler               0
     ADC3_IRQHandler                 0
     BusFaultException               0
     CAN_RX1_IRQHandler              0
     CAN_SCE_IRQHandler              0
     DMA1_Channel1_IRQHandler        0
     DMA1_Channel2_IRQHandler        8
     DMA1_Channel3_IRQHandler        0
     DMA1_Channel4_IRQHandler        8
     DMA1_Channel5_IRQHandler        0
     DMA1_Channel6_IRQHandler        0
     DMA1_Channel7_IRQHandler        8
     DMA2_Channel1_IRQHandler        0
     DMA2_Channel2_IRQHandler        0
     DMA2_Channel3_IRQHandler        0
     DMA2_Channel4_5_IRQHandler      8
     DebugMonitor                    0
     EXTI0_IRQHandler                0
     EXTI15_10_IRQHandler            0
     EXTI1_IRQHandler                0
     EXTI2_IRQHandler                0
     EXTI3_IRQHandler                0
     EXTI4_IRQHandler                0
     EXTI9_5_IRQHandler              0
     FLASH_IRQHandler                0
     FSMC_IRQHandler                 0
     HardFaultException              8
     I2C1_ER_IRQHandler              0
     I2C1_EV_IRQHandler              0
     I2C2_ER_IRQHandler              0
     I2C2_EV_IRQHandler              0
     MemManageException              0
     NMIException                    0
     PVD_IRQHandler                  0
     PendSVC                         0
     RCC_IRQHandler                  0
     RTCAlarm_IRQHandler             0
     RTC_IRQHandler                  0
     SDIO_IRQHandler                 0
     SPI1_IRQHandler                 0
     SPI2_IRQHandler                 0
     SPI3_IRQHandler                 0
     SVCHandler                      0
     SysTickHandler                  8
     TAMPER_IRQHandler               0
     TIM1_BRK_IRQHandler             0
     TIM1_CC_IRQHandler              0
     TIM1_TRG_COM_IRQHandler         0
     TIM1_UP_IRQHandler              0
     TIM2_IRQHandler                 8
     TIM3_IRQHandler                 8
     TIM4_IRQHandler                 0
     TIM5_IRQHandler                 0
     TIM6_IRQHandler                 0
     TIM7_IRQHandler                 0
     TIM8_BRK_IRQHandler             0
     TIM8_CC_IRQHandler              0
     TIM8_TRG_COM_IRQHandler         0
     TIM8_UP_IRQHandler              0
     UART4_IRQHandler                8
     UART5_IRQHandler                0
     USART1_IRQHandler               8
     USART2_IRQHandler               8
     USART3_IRQHandler               8
     USBWakeUp_IRQHandler            0
     USB_HP_CAN_TX_IRQHandler        8
     USB_LP_CAN_RX0_IRQHandler       8
     UsageFaultException             0
     WWDG_IRQHandler                 0
     hard_fault_handler_c           40


   Section sizes:

     Function/Label                       Bytes
     --------------                       -----
     NMIException                            2
     hard_fault_handler_c                  228
     HardFaultException                      8
     MemManageException                      2
     BusFaultException                       2
     UsageFaultException                     2
     DebugMonitor                            2
     SVCHandler                              2
     PendSVC                                 2
     SysTickHandler                          8
     WWDG_IRQHandler                         2
     PVD_IRQHandler                          2
     TAMPER_IRQHandler                       2
     RTC_IRQHandler                          2
     FLASH_IRQHandler                        2
     RCC_IRQHandler                          2
     EXTI0_IRQHandler                        2
     EXTI1_IRQHandler                        2
     EXTI2_IRQHandler                        2
     EXTI3_IRQHandler                        2
     EXTI4_IRQHandler                        2
     DMA1_Channel1_IRQHandler                2
     DMA1_Channel2_IRQHandler               32
     DMA1_Channel3_IRQHandler                2
     DMA1_Channel4_IRQHandler               36
     DMA1_Channel5_IRQHandler                2
     DMA1_Channel6_IRQHandler                2
     DMA1_Channel7_IRQHandler               36
     ADC1_2_IRQHandler                       2
     USB_HP_CAN_TX_IRQHandler                8
     USB_LP_CAN_RX0_IRQHandler               8
     CAN_RX1_IRQHandler                      2
     CAN_SCE_IRQHandler                      2
     EXTI9_5_IRQHandler                      2
     TIM1_BRK_IRQHandler                     2
     TIM1_UP_IRQHandler                      2
     TIM1_TRG_COM_IRQHandler                 2
     TIM1_CC_IRQHandler                      2
     TIM2_IRQHandler                         8
     TIM3_IRQHandler                        36
     TIM4_IRQHandler                         2
     I2C1_EV_IRQHandler                      2
     I2C1_ER_IRQHandler                      2
     I2C2_EV_IRQHandler                      2
     I2C2_ER_IRQHandler                      2
     SPI1_IRQHandler                         2
     SPI2_IRQHandler                         2
     USART1_IRQHandler                     108
     USART2_IRQHandler                     108
     USART3_IRQHandler                     108
     EXTI15_10_IRQHandler                    2
     RTCAlarm_IRQHandler                     2
     USBWakeUp_IRQHandler                    2
     TIM8_BRK_IRQHandler                     2
     TIM8_UP_IRQHandler                      2
     TIM8_TRG_COM_IRQHandler                 2
     TIM8_CC_IRQHandler                      2
     ADC3_IRQHandler                         2
     FSMC_IRQHandler                         2
     SDIO_IRQHandler                         2
     TIM5_IRQHandler                         2
     SPI3_IRQHandler                         2
     UART4_IRQHandler                      108
     UART5_IRQHandler                        2
     TIM6_IRQHandler                         2
     TIM7_IRQHandler                         2
     DMA2_Channel1_IRQHandler                2
     DMA2_Channel2_IRQHandler                2
     DMA2_Channel3_IRQHandler                2
     DMA2_Channel4_5_IRQHandler             40
     ?<Constant "[Hard fault handler]\n">   24
     ?<Constant "R0 = %x\n">                12
     ?<Constant "R1 = %x\n">                12
     ?<Constant "R2 = %x\n">                12
     ?<Constant "R3 = %x\n">                12
     ?<Constant "R12 = %x\n">               12
     ?<Constant "LR = %x\n">                12
     ?<Constant "PC = %x\n">                12
     ?<Constant "PSR = %x\n">               12
     ?<Constant "BFAR = %x\n">              12
     ?<Constant "CFSR = %x\n">              12
     ?<Constant "HFSR = %x\n">              12
     ?<Constant "DFSR = %x\n">              12
     ?<Constant "AFSR = %x\n">              12

 
 180 bytes in section .rodata
 990 bytes in section .text
 
 990 bytes of CODE  memory
 180 bytes of CONST memory

Errors: none
Warnings: 2
