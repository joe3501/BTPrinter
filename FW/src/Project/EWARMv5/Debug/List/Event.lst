###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     04/Dec/2015  18:22:03 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\App\Event.c                         #
#    Command line =  "E:\BT Printer\FW\src\App\Event.c" -D DEBUG_VER -lcN     #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\" -o    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I "E:\BT      #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\Event.ls #
#                    t                                                        #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\Event.o   #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\App\Event.c
      1          #include "Type.h"
      2          #include "Event.h"
      3          #include "TP.h"
      4          #include "basic_fun.h"
      5          #include "Esc_p.h"
      6          #include "ESC_POS_test.h"
      7          
      8          
      9          //======================================================================================================
     10          static volatile uint8_t evtHead;
     11          static uint8_t evtTail;
     12          static uint8_t evtQueue[64];
     13          //======================================================================================================
     14          
     15          //======================================================================================================
     16          extern void event_init(void)
     17          {
     18          	evtHead = evtTail = 0;
     19          }
     20          //======================================================================================================
     21          extern void event_post(uint8_t event)
     22          {
     23          	uint32_t head;
     24          
     25          	if(event)
     26          	{
     27                   // Disable Interrupts
     28          		head = evtHead;
     29          		evtHead = (head + 1) & (ARRAY_SIZE(evtQueue) - 1);
     30          		// restore flag
     31          
     32          		evtQueue[head] = event;
     33          	}
     34          }
     35          //======================================================================================================
     36          //======================================================================================================
     37          extern uint8_t event_pend(void)
     38          {
     39          	uint8_t event;
     40          
     41          	if(evtHead == evtTail)
     42          	{
     43          		return evtNULL;
     44          	}
     45          	event = evtQueue[evtTail];
     46          	evtTail = (evtTail + 1) & (ARRAY_SIZE(evtQueue) - 1);
     47          	return event;
     48          }
     49          //======================================================================================================
     50          extern void event_proc(void)
     51          {
     52          	int i;
     53          	switch(event_pend())
     54          	{
     55          	//-----------------------------------------------------------------
     56          	case evtKeyDownFeed:
     57          		//ESC_POS_test_esc();
     58          		ESC_POS_test_esc_special();
     59          		//TPPrintTestPage();
     60          		//TPFeedStart();
     61          		//TPSelfTest2();
     62          		break;
     63          	case evtKeyUpFeed:
     64          		//TPFeedStop();
     65          		break;
     66          	case evtKeyDownHold500msMode:
     67                  break;
     68          	case evtKeyDownMode:
     69          		#if 1
     70          		if(TPPrinterReady())
     71                  TPPrintTestPage();
     72          		#endif
     73          		break;
     74          	case evtKeyDownHold2000msMode:
     75          		if(TPPrinterReady())
     76                  TPPrintTestPage();
     77          		break;
     78          	case evtKeyUpMode:
     79          		break;
     80          	case evtKeyHoldMode:
     81          		break;
     82          	case evtKeyDownHold5000msMode:
     83          		break;
     84              case evtKeyDownHold7000msMode:
     85                  break;
     86          	case evtPaperOut:
     87          		for (i = 0; i< MAX_PT_CHANNEL;i++)
     88          		{
     89          			esc_sts[i].status4 |= (0x03<<5);
     90          		}
     91                  
     92          		break;
     93          	case evtPaperIn:
     94          		for (i = 0; i< MAX_PT_CHANNEL;i++)
     95          		{
     96          			esc_sts[i].status4 &= ~(0x03<<5);
     97          		}
     98                  Wake_up();
     99                  break;
    100              case evtBmDetect:
    101                  break;
    102              case evtGetRealTimeStatus4:
    103                 //Putchar(esc_sts.status4);
    104                  break;
    105          	case evtLifetest:
    106          	   break;
    107          	default:
    108          		break;
    109          	}
    110          }
    111          //======================================================================================================
    112          
    113          
    114          
    115          

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     event_init      0
     event_pend      0
     event_post      0
     event_proc      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     evtHead           1
     evtTail           1
     evtQueue         64
     event_init       12
     event_post       26
     event_pend       42
     event_proc      208
     ??DataTable5      4
     ??DataTable8      4
     ??DataTable10     4

 
  66 bytes in section .bss
 300 bytes in section .text
 
 300 bytes of CODE memory
  66 bytes of DATA memory

Errors: none
Warnings: none
