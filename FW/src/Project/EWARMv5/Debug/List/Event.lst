###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     12/Dec/2015  15:19:58 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\App\Event.c                         #
#    Command line =  "E:\BT Printer\FW\src\App\Event.c" -D DEBUG_VER -lcN     #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\" -o    #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I "E:\BT    #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\Event.ls #
#                    t                                                        #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\Event.o   #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\App\Event.c
      1          #include "Type.h"
      2          #include "Event.h"
      3          #include "TP.h"
      4          #include "basic_fun.h"
      5          #include "Esc_p.h"
      6          #include "ESC_POS_test.h"
      7          #include "uart.h"
      8          
      9          
     10          //======================================================================================================
     11          static volatile uint8_t evtHead;
     12          static uint8_t evtTail;
     13          static uint8_t evtQueue[64];
     14          //======================================================================================================
     15          
     16          //======================================================================================================
     17          extern void event_init(void)
     18          {
     19          	evtHead = evtTail = 0;
     20          }
     21          //======================================================================================================
     22          extern void event_post(uint8_t event)
     23          {
     24          	uint32_t head;
     25          
     26          	if(event)
     27          	{
     28                   // Disable Interrupts
     29          		head = evtHead;
     30          		evtHead = (head + 1) & (ARRAY_SIZE(evtQueue) - 1);
     31          		// restore flag
     32          
     33          		evtQueue[head] = event;
     34          	}
     35          }
     36          //======================================================================================================
     37          //======================================================================================================
     38          extern uint8_t event_pend(void)
     39          {
     40          	uint8_t event;
     41          
     42          	if(evtHead == evtTail)
     43          	{
     44          		return evtNULL;
     45          	}
     46          	event = evtQueue[evtTail];
     47          	evtTail = (evtTail + 1) & (ARRAY_SIZE(evtQueue) - 1);
     48          	return event;
     49          }
     50          //======================================================================================================
     51          extern void event_proc(void)
     52          {
     53          	int i;
     54          	switch(event_pend())
     55          	{
     56          	//-----------------------------------------------------------------
     57          	case evtKeyDownFeed:
     58          		//ESC_POS_test_esc();
     59          		//ESC_POS_test_esc_special();
     60          		//TPPrintTestPage();
     61          		//TPFeedStart();
     62                    if(TPPrinterReady())
     63                    {
     64                      TPSelfTest2();
     65                    }
     66          		
     67          		break;
     68          	case evtKeyUpFeed:
     69          		TPFeedStop();
     70          		break;
     71          	case evtKeyDownHold500msMode:
     72                  break;
     73          	case evtKeyDownMode:
     74          		#if 1
     75          		if(TPPrinterReady())
     76                  TPPrintTestPage();
     77          		#endif
     78          		break;
     79          	case evtKeyDownHold2000msMode:
     80          		if(TPPrinterReady())
     81                  TPPrintTestPage();
     82          		break;
     83          	case evtKeyUpMode:
     84          		break;
     85          	case evtKeyHoldMode:
     86          		break;
     87          	case evtKeyDownHold5000msMode:
     88          		break;
     89              case evtKeyDownHold7000msMode:
     90                  break;
     91          	case evtPaperOut:
     92          		ESC_STS_STATUS_SET_FLAG(0x03,5);
     93          		break;
     94          	case evtPaperIn:
     95          		ESC_STS_STATUS_RESET_FLAG(0x03,5);
     96                  Wake_up();
     97                  break;
     98              case evtBmDetect:
     99                  break;
    100              case evtGetRealTimeStatus4:
    101                 //Putchar(esc_sts.status4);
    102                  break;
    103          	case evtLifetest:
    104          	   break;
    105          	default:
    106          		break;
    107          	}
    108          }
    109          //======================================================================================================
    110          
    111          
    112          
    113          

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     event_init      0
     event_pend      0
     event_post      0
     event_proc      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     evtHead           1
     evtTail           1
     evtQueue         64
     event_init       12
     event_post       26
     event_pend       42
     event_proc      168
     ??DataTable5      4
     ??DataTable8      4
     ??DataTable10     4

 
  66 bytes in section .bss
 260 bytes in section .text
 
 260 bytes of CODE memory
  66 bytes of DATA memory

Errors: none
Warnings: 2
