###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     30/Sep/2015  17:04:37 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\uCOS\uCOS-II\Ports\os_cpu_c.c            #
#    Command line =  E:\H520B\FW\src\uCOS\uCOS-II\Ports\os_cpu_c.c -D         #
#                    DEBUG_VER -lcN E:\H520B\FW\src\Project\EWARMv5\Debug\Lis #
#                    t\ -o E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\         #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I             #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\os_cpu_c.lst  #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\os_cpu_c.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\uCOS\uCOS-II\Ports\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_CPU_C.C
     13          * Version   : V2.86
     14          * By        : Jean J. Labrosse
     15          *             Brian Nagel
     16          *
     17          * For       : ARMv7M Cortex-M3
     18          * Mode      : Thumb2
     19          * Toolchain : IAR EWARM
     20          *********************************************************************************************************
     21          */
     22          
     23          #define  OS_CPU_GLOBALS
     24          #include <ucos_ii.h>
     25          #include "stm32f10x_lib.h"
     26          
     27          /*
     28          *********************************************************************************************************
     29          *                                          LOCAL VARIABLES
     30          *********************************************************************************************************
     31          */
     32          
     33          #if OS_TMR_EN > 0
     34          static  INT16U  OSTmrCtr;
     35          #endif
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                          SYS TICK DEFINES
     40          *********************************************************************************************************
     41          */
     42          
     43          #define  OS_CPU_CM3_NVIC_ST_CTRL    (*((volatile INT32U *)0xE000E010))   /* SysTick Ctrl & Status Reg. */
     44          #define  OS_CPU_CM3_NVIC_ST_RELOAD  (*((volatile INT32U *)0xE000E014))   /* SysTick Reload  Value Reg. */
     45          #define  OS_CPU_CM3_NVIC_ST_CURRENT (*((volatile INT32U *)0xE000E018))   /* SysTick Current Value Reg. */
     46          #define  OS_CPU_CM3_NVIC_ST_CAL     (*((volatile INT32U *)0xE000E01C))   /* SysTick Cal     Value Reg. */
     47          #define  OS_CPU_CM3_NVIC_PRIO_ST    (*((volatile INT8U  *)0xE000ED23))   /* SysTick Handler Prio  Reg. */
     48          
     49          #define  OS_CPU_CM3_NVIC_ST_CTRL_COUNT                    0x00010000     /* Count flag.                */
     50          #define  OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC                  0x00000004     /* Clock Source.              */
     51          #define  OS_CPU_CM3_NVIC_ST_CTRL_INTEN                    0x00000002     /* Interrupt enable.          */
     52          #define  OS_CPU_CM3_NVIC_ST_CTRL_ENABLE                   0x00000001     /* Counter mode.              */
     53          #define  OS_CPU_CM3_NVIC_PRIO_MIN                               0xFF     /* Min handler prio.          */
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                       OS INITIALIZATION HOOK
     58          *                                            (BEGINNING)
     59          *
     60          * Description: This function is called by OSInit() at the beginning of OSInit().
     61          *
     62          * Arguments  : none
     63          *
     64          * Note(s)    : 1) Interrupts should be disabled during this call.
     65          *********************************************************************************************************
     66          */
     67          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
     68          void  OSInitHookBegin (void)
     69          {
     70          #if OS_TMR_EN > 0
     71              OSTmrCtr = 0;
     72          #endif
     73          }
     74          #endif
     75          
     76          /*
     77          *********************************************************************************************************
     78          *                                       OS INITIALIZATION HOOK
     79          *                                               (END)
     80          *
     81          * Description: This function is called by OSInit() at the end of OSInit().
     82          *
     83          * Arguments  : none
     84          *
     85          * Note(s)    : 1) Interrupts should be disabled during this call.
     86          *********************************************************************************************************
     87          */
     88          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
     89          void  OSInitHookEnd (void)
     90          {
     91          }
     92          #endif
     93          
     94          /*
     95          *********************************************************************************************************
     96          *                                          TASK CREATION HOOK
     97          *
     98          * Description: This function is called when a task is created.
     99          *
    100          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
    101          *
    102          * Note(s)    : 1) Interrupts are disabled during this call.
    103          *********************************************************************************************************
    104          */
    105          #if OS_CPU_HOOKS_EN > 0
    106          void  OSTaskCreateHook (OS_TCB *ptcb)
    107          {
    108          #if OS_APP_HOOKS_EN > 0
    109              App_TaskCreateHook(ptcb);
    110          #else
    111              (void)ptcb;                                  /* Prevent compiler warning                           */
    112          #endif
    113          }
    114          #endif
    115          
    116          
    117          /*
    118          *********************************************************************************************************
    119          *                                           TASK DELETION HOOK
    120          *
    121          * Description: This function is called when a task is deleted.
    122          *
    123          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
    124          *
    125          * Note(s)    : 1) Interrupts are disabled during this call.
    126          *********************************************************************************************************
    127          */
    128          #if OS_CPU_HOOKS_EN > 0
    129          void  OSTaskDelHook (OS_TCB *ptcb)
    130          {
    131          #if OS_APP_HOOKS_EN > 0
    132              App_TaskDelHook(ptcb);
    133          #else
    134              (void)ptcb;                                  /* Prevent compiler warning                           */
    135          #endif
    136          }
    137          #endif
    138          
    139          /*
    140          *********************************************************************************************************
    141          *                                             IDLE TASK HOOK
    142          *
    143          * Description: This function is called by the idle task.  This hook has been added to allow you to do
    144          *              such things as STOP the CPU to conserve power.
    145          *
    146          * Arguments  : none
    147          *
    148          * Note(s)    : 1) Interrupts are enabled during this call.
    149          *********************************************************************************************************
    150          */
    151          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
    152          void  OSTaskIdleHook (void)
    153          {
    154          #if OS_APP_HOOKS_EN > 0
    155              App_TaskIdleHook();
    156          #endif
    157          	if(OSPrioCur != OS_LOWEST_PRIO)
    158          	{
    159          		OSPrioCur = OS_LOWEST_PRIO;
    160          	}
    161          }
    162          #endif
    163          
    164          /*
    165          *********************************************************************************************************
    166          *                                           STATISTIC TASK HOOK
    167          *
    168          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your
    169          *              application to add functionality to the statistics task.
    170          *
    171          * Arguments  : none
    172          *********************************************************************************************************
    173          */
    174          
    175          #if OS_CPU_HOOKS_EN > 0
    176          void  OSTaskStatHook (void)
    177          {
    178          #if OS_APP_HOOKS_EN > 0
    179              App_TaskStatHook();
    180          #endif
    181          }
    182          #endif
    183          
    184          /*
    185          *********************************************************************************************************
    186          *                                        INITIALIZE A TASK'S STACK
    187          *
    188          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    189          *              stack frame of the task being created.  This function is highly processor specific.
    190          *
    191          * Arguments  : task          is a pointer to the task code
    192          *
    193          *              p_arg         is a pointer to a user supplied data area that will be passed to the task
    194          *                            when the task first executes.
    195          *
    196          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    197          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then
    198          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    199          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    200          *                            of the stack.
    201          *
    202          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    203          *                            (see uCOS_II.H for OS_TASK_OPT_xxx).
    204          *
    205          * Returns    : Always returns the location of the new top-of-stack once the processor registers have
    206          *              been placed on the stack in the proper order.
    207          *
    208          * Note(s)    : 1) Interrupts are enabled when your task starts executing.
    209          *              2) All tasks run in Thread mode, using process stack.
    210          *********************************************************************************************************
    211          */
    212          
    213          OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
    214          {
    215              OS_STK *stk;
    216          
    217          
    218              (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    219              stk       = ptos;                            /* Load stack pointer                                 */
    220          
    221                                                           /* Registers stacked as if auto-saved on exception    */
    222              *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
    223              *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
    224              *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
    225              *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
    226              *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
    227              *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
    228              *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
    229              *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
    230          
    231                                                           /* Remaining registers saved on process stack         */
    232              *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
    233              *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
    234              *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
    235              *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
    236              *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
    237              *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
    238              *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
    239              *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
    240          
    241              return (stk);
    242          }
    243          
    244          /*
    245          *********************************************************************************************************
    246          *                                           TASK SWITCH HOOK
    247          *
    248          * Description: This function is called when a task switch is performed.  This allows you to perform other
    249          *              operations during a context switch.
    250          *
    251          * Arguments  : none
    252          *
    253          * Note(s)    : 1) Interrupts are disabled during this call.
    254          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    255          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    256          *                 task being switched out (i.e. the preempted task).
    257          *********************************************************************************************************
    258          */
    259          #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
    260          void  OSTaskSwHook (void)
    261          {
    262          #if OS_APP_HOOKS_EN > 0
    263              App_TaskSwHook();
    264          #endif
    265          }
    266          #endif
    267          
    268          /*
    269          *********************************************************************************************************
    270          *                                           OS_TCBInit() HOOK
    271          *
    272          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    273          *
    274          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    275          *
    276          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    277          *********************************************************************************************************
    278          */
    279          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
    280          void  OSTCBInitHook (OS_TCB *ptcb)
    281          {
    282          #if OS_APP_HOOKS_EN > 0
    283              App_TCBInitHook(ptcb);
    284          #else
    285              (void)ptcb;                                  /* Prevent compiler warning                           */
    286          #endif
    287          }
    288          #endif
    289          
    290          /*
    291          *********************************************************************************************************
    292          *                                               TICK HOOK
    293          *
    294          * Description: This function is called every tick.
    295          *
    296          * Arguments  : none
    297          *
    298          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    299          *********************************************************************************************************
    300          */
    301          #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
    302          void  OSTimeTickHook (void)
    303          {
    304          #if OS_APP_HOOKS_EN > 0
    305              App_TimeTickHook();
    306          #endif
    307          
    308          #if OS_TMR_EN > 0
    309              OSTmrCtr++;
    310              if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
    311                  OSTmrCtr = 0;
    312                  OSTmrSignal();
    313              }
    314          #endif
    315          }
    316          #endif
    317          
    318          /*
    319          *********************************************************************************************************
    320          *                                         OS_CPU_SysTickHandler()
    321          *
    322          * Description: Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick
    323          *              interrupt.
    324          *
    325          * Arguments  : none.
    326          *
    327          * Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
    328          *********************************************************************************************************
    329          */
    330          
    331          void  OS_CPU_SysTickHandler (void)
    332          {
    333              OS_CPU_SR  cpu_sr;
    334          
    335          
    336              OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
    337              OSIntNesting++;
    338              OS_EXIT_CRITICAL();
    339          
    340              OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
    341          
    342              OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
    343          }
    344          
    345          /*
    346          *********************************************************************************************************
    347          *                                          OS_CPU_SysTickInit()
    348          *
    349          * Description: Initialize the SysTick.
    350          *
    351          * Arguments  : none.
    352          *
    353          * Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
    354          *********************************************************************************************************
    355          */
    356          
    357          void  OS_CPU_SysTickInit (void)
    358          {
    359              static  RCC_ClocksTypeDef  rcc_clocks;
    360              INT32U  cnts;
    361          
    362              RCC_GetClocksFreq(&rcc_clocks);
    363          
    364              cnts						= (INT32U)rcc_clocks.HCLK_Frequency / OS_TICKS_PER_SEC;
    365          
    366              OS_CPU_CM3_NVIC_ST_RELOAD	= (cnts - 1);
    367                                                           /* Set prio of SysTick handler to min prio.           */
    368              OS_CPU_CM3_NVIC_PRIO_ST		= OS_CPU_CM3_NVIC_PRIO_MIN;
    369                                                           /* Enable timer.                                      */
    370              OS_CPU_CM3_NVIC_ST_CTRL		|= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
    371                                                           /* Enable timer interrupt.                            */
    372              OS_CPU_CM3_NVIC_ST_CTRL		|= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
    373          }

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     OSInitHookBegin            0
     OSInitHookEnd              0
     OSTCBInitHook              0
     OSTaskCreateHook           0
     OSTaskDelHook              0
     OSTaskIdleHook             0
     OSTaskStatHook             0
     OSTaskStkInit              0
     OSTaskSwHook               0
     OSTimeTickHook             0
     OS_CPU_SysTickHandler      8
     OS_CPU_SysTickInit         8


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     OSInitHookBegin          2
     OSInitHookEnd            2
     OSTaskCreateHook         2
     OSTaskDelHook            2
     OSTaskIdleHook          20
     OSTaskStatHook           2
     OSTaskStkInit          124
     OSTaskSwHook             2
     OSTCBInitHook            2
     OSTimeTickHook           2
     OS_CPU_SysTickHandler   36
     OS_CPU_SysTickInit      72
     rcc_clocks              20

 
  20 bytes in section .bss
 268 bytes in section .text
 
 268 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
