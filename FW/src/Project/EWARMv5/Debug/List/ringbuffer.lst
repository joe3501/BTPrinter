###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     01/Dec/2015  17:25:22 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Drivers\ringbuffer.c                #
#    Command line =  "E:\BT Printer\FW\src\Drivers\ringbuffer.c" -D           #
#                    DEBUG_VER -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Deb #
#                    ug\List\" -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug #
#                    \Obj\" --no_cse --no_unroll --no_inline                  #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\" -I      #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\App\" -I     #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Drivers\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\"   #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\" #
#                     -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC- #
#                    CPU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCO #
#                    S\uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\. #
#                    .\uCOS\uCOS-II\Ports\" -I "E:\BT                         #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\ringbuff #
#                    er.lst                                                   #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\ringbuffe #
#                    r.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Drivers\ringbuffer.c
      1          /*
      2           * File      : ringbuffer.c
      3           * This file is part of RT-Thread RTOS
      4           * COPYRIGHT (C) 2012, RT-Thread Development Team
      5           *
      6           *  This program is free software; you can redistribute it and/or modify
      7           *  it under the terms of the GNU General Public License as published by
      8           *  the Free Software Foundation; either version 2 of the License, or
      9           *  (at your option) any later version.
     10           *
     11           *  This program is distributed in the hope that it will be useful,
     12           *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     13           *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     14           *  GNU General Public License for more details.
     15           *
     16           *  You should have received a copy of the GNU General Public License along
     17           *  with this program; if not, write to the Free Software Foundation, Inc.,
     18           *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
     19           *
     20           * Change Logs:
     21           * Date           Author       Notes
     22           * 2012-09-30     Bernard      first version.
     23           * 2013-05-08     Grissiom     reimplement
     24           */
     25          
     26          #include "ringbuffer.h"
     27          #include "basic_fun.h"
     28          #include <string.h>
     29          
     30          
     31          void ringbuffer_init(struct ringbuffer *rb,
     32                                  uint8_t           *pool,
     33                                  int32_t            size)
     34          {
     35              ASSERT(rb != NULL);
     36              ASSERT(size > 0);
     37          
     38              /* initialize read and write index */
     39              rb->read_mirror = rb->read_index = 0;
     40              rb->write_mirror = rb->write_index = 0;
     41          
     42              /* set buffer pool and size */
     43              rb->buffer_ptr = pool;
     44              rb->buffer_size = ALIGN_DOWN(size, ALIGN_SIZE);
     45          }
     46          
     47          /**
     48           * put a block of data into ring buffer
     49           */
     50          size_t ringbuffer_put(struct ringbuffer *rb,
     51                                      const uint8_t     *ptr,
     52                                      uint32_t           length)
     53          {
     54              uint32_t size;
     55          
     56              ASSERT(rb != NULL);
     57          
     58              /* whether has enough space */
     59              size = ringbuffer_space_len(rb);
     60          
     61              /* no space */
     62              if (size == 0)
     63                  return 0;
     64          
     65              /* drop some data */
     66              if (size < length)
     67                  length = size;
     68          
     69              if (rb->buffer_size - rb->write_index > length)
     70              {
     71                  /* read_index - write_index = empty space */
     72                  memcpy(&rb->buffer_ptr[rb->write_index], ptr, length);
     73                  /* this should not cause overflow because there is enough space for
     74                   * length of data in current mirror */
     75                  rb->write_index += length;
     76                  return length;
     77              }
     78          
     79              memcpy(&rb->buffer_ptr[rb->write_index],
     80                     &ptr[0],
     81                     rb->buffer_size - rb->write_index);
     82              memcpy(&rb->buffer_ptr[0],
     83                     &ptr[rb->buffer_size - rb->write_index],
     84                     length - (rb->buffer_size - rb->write_index));
     85          
     86              /* we are going into the other side of the mirror */
     87              rb->write_mirror = ~rb->write_mirror;
     88              rb->write_index = length - (rb->buffer_size - rb->write_index);
     89          
     90              return length;
     91          }
     92          
     93          /**
     94           * put a block of data into ring buffer
     95           *
     96           * When the buffer is full, it will discard the old data.
     97           */
     98          size_t ringbuffer_put_force(struct ringbuffer *rb,
     99                                      const uint8_t     *ptr,
    100                                      uint32_t           length)
    101          {
    102              enum ringbuffer_state old_state;
    103          
    104              ASSERT(rb != NULL);
    105          
    106              old_state = ringbuffer_status(rb);
    107          
    108              if (length > rb->buffer_size)
    109                  length = rb->buffer_size;
    110          
    111              if (rb->buffer_size - rb->write_index > length)
    112              {
    113                  /* read_index - write_index = empty space */
    114                  memcpy(&rb->buffer_ptr[rb->write_index], ptr, length);
    115                  /* this should not cause overflow because there is enough space for
    116                   * length of data in current mirror */
    117                  rb->write_index += length;
    118          
    119                  if (old_state == RINGBUFFER_FULL)
    120                      rb->read_index = rb->write_index;
    121          
    122                  return length;
    123              }
    124          
    125              memcpy(&rb->buffer_ptr[rb->write_index],
    126                     &ptr[0],
    127                     rb->buffer_size - rb->write_index);
    128              memcpy(&rb->buffer_ptr[0],
    129                     &ptr[rb->buffer_size - rb->write_index],
    130                     length - (rb->buffer_size - rb->write_index));
    131          
    132              /* we are going into the other side of the mirror */
    133              rb->write_mirror = ~rb->write_mirror;
    134              rb->write_index = length - (rb->buffer_size - rb->write_index);
    135          
    136              if (old_state == RINGBUFFER_FULL)
    137              {
    138                  rb->read_mirror = ~rb->read_mirror;
    139                  rb->read_index = rb->write_index;
    140              }
    141          
    142              return length;
    143          }
    144          
    145          /**
    146           *  get data from ring buffer
    147           */
    148          size_t ringbuffer_get(struct ringbuffer *rb,
    149                                      uint8_t           *ptr,
    150                                      uint32_t           length)
    151          {
    152              size_t size;
    153          
    154              ASSERT(rb != NULL);
    155          
    156              /* whether has enough data  */
    157              size = ringbuffer_data_len(rb);
    158          
    159              /* no data */
    160              if (size == 0)
    161                  return 0;
    162          
    163              /* less data */
    164              if (size < length)
    165                  length = size;
    166          
    167              if (rb->buffer_size - rb->read_index > length)
    168              {
    169                  /* copy all of data */
    170                  memcpy(ptr, &rb->buffer_ptr[rb->read_index], length);
    171                  /* this should not cause overflow because there is enough space for
    172                   * length of data in current mirror */
    173                  rb->read_index += length;
    174                  return length;
    175              }
    176          
    177              memcpy(&ptr[0],
    178                     &rb->buffer_ptr[rb->read_index],
    179                     rb->buffer_size - rb->read_index);
    180              memcpy(&ptr[rb->buffer_size - rb->read_index],
    181                     &rb->buffer_ptr[0],
    182                     length - (rb->buffer_size - rb->read_index));
    183          
    184              /* we are going into the other side of the mirror */
    185              rb->read_mirror = ~rb->read_mirror;
    186              rb->read_index = length - (rb->buffer_size - rb->read_index);
    187          
    188              return length;
    189          }
    190          
    191          /**
    192           * put a character into ring buffer
    193           */
    194          size_t ringbuffer_putchar(struct ringbuffer *rb, const uint8_t ch)
    195          {
    196              ASSERT(rb != NULL);
    197          
    198              /* whether has enough space */
    199              if (!ringbuffer_space_len(rb))
    200                  return 0;
    201          
    202              rb->buffer_ptr[rb->write_index] = ch;
    203          
    204              /* flip mirror */
    205              if (rb->write_index == rb->buffer_size-1)
    206              {
    207                  rb->write_mirror = ~rb->write_mirror;
    208                  rb->write_index = 0;
    209              }
    210              else
    211              {
    212                  rb->write_index++;
    213              }
    214          
    215              return 1;
    216          }
    217          
    218          /**
    219           * put a character into ring buffer
    220           *
    221           * When the buffer is full, it will discard one old data.
    222           */
    223          size_t ringbuffer_putchar_force(struct ringbuffer *rb, const uint8_t ch)
    224          {
    225              enum ringbuffer_state old_state;
    226          
    227              ASSERT(rb != NULL);
    228          
    229              old_state = ringbuffer_status(rb);
    230          
    231              rb->buffer_ptr[rb->write_index] = ch;
    232          
    233              /* flip mirror */
    234              if (rb->write_index == rb->buffer_size-1)
    235              {
    236                  rb->write_mirror = ~rb->write_mirror;
    237                  rb->write_index = 0;
    238                  if (old_state == RINGBUFFER_FULL)
    239                  {
    240                      rb->read_mirror = ~rb->read_mirror;
    241                      rb->read_index = rb->write_index;
    242                  }
    243              }
    244              else
    245              {
    246                  rb->write_index++;
    247                  if (old_state == RINGBUFFER_FULL)
    248                      rb->read_index = rb->write_index;
    249              }
    250          
    251              return 1;
    252          }
    253          
    254          /**
    255           * get a character from a ringbuffer
    256           */
    257          size_t ringbuffer_getchar(struct ringbuffer *rb, uint8_t *ch)
    258          {
    259              ASSERT(rb != NULL);
    260          
    261              /* ringbuffer is empty */
    262              if (!ringbuffer_data_len(rb))
    263                  return 0;
    264          
    265              /* put character */
    266              *ch = rb->buffer_ptr[rb->read_index];
    267          
    268              if (rb->read_index == rb->buffer_size-1)
    269              {
    270                  rb->read_mirror = ~rb->read_mirror;
    271                  rb->read_index = 0;
    272              }
    273              else
    274              {
    275                  rb->read_index++;
    276              }
    277          
    278          	
    279          
    280              return 1;
    281          }
    282          
    283          void ringbuffer_reset(struct ringbuffer *rb)
    284          {
    285          	/* initialize read and write index */
    286          	rb->read_mirror = rb->read_index = 0;
    287          	rb->write_mirror = rb->write_index = 0;
    288          }
    289          

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     memcpy                        8
     ringbuffer_data_len           8
     ringbuffer_get               16
     ringbuffer_getchar           16
     ringbuffer_init              16
     ringbuffer_put               24
     ringbuffer_put_force         24
     ringbuffer_putchar           16
     ringbuffer_putchar_force     16
     ringbuffer_reset              0
     ringbuffer_status             0


   Section sizes:

     Function/Label                             Bytes
     --------------                             -----
     ringbuffer_status                            40
     ringbuffer_data_len                          68
     memcpy                                       14
     ringbuffer_init                              96
     ringbuffer_put                              194
     ringbuffer_put_force                        244
     ringbuffer_get                              186
     ringbuffer_putchar                          100
     ringbuffer_putchar_force                    150
     ringbuffer_getchar                          100
     ringbuffer_reset                             34
     ??DataTable13                                 4
     ??DataTable14                                 4
     ?<Constant "rb != NULL">                     12
     ?<Constant "E:\\BT Printer\\FW\\src\\...">   44
     ?<Constant "size > 0">                       12

 
    68 bytes in section .rodata
 1 234 bytes in section .text
 
 1 220 bytes of CODE  memory (+ 14 bytes shared)
    68 bytes of CONST memory

Errors: none
Warnings: none
