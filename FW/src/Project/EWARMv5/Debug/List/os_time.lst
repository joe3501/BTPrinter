###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     30/Sep/2015  17:04:44 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\uCOS\uCOS-II\Source\os_time.c            #
#    Command line =  E:\H520B\FW\src\uCOS\uCOS-II\Source\os_time.c -D         #
#                    DEBUG_VER -lcN E:\H520B\FW\src\Project\EWARMv5\Debug\Lis #
#                    t\ -o E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\         #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I             #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\os_time.lst   #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\os_time.o      #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\uCOS\uCOS-II\Source\os_time.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                             TIME MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_TIME.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.86
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                DELAY TASK 'n' TICKS   (n from 0 to 65535)
     31          *
     32          * Description: This function is called to delay execution of the currently running task until the
     33          *              specified number of system ticks expires.  This, of course, directly equates to delaying
     34          *              the current task for some time to expire.  No delay will result If the specified delay is
     35          *              0.  If the specified delay is greater than 0 then, a context switch will result.
     36          *
     37          * Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
     38          *                        Note that by specifying 0, the task will not be delayed.
     39          *
     40          * Returns    : none
     41          *********************************************************************************************************
     42          */
     43          
     44          void  OSTimeDly (INT16U ticks)
     45          {
     46              INT8U      y;
     47          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     48              OS_CPU_SR  cpu_sr = 0;
     49          #endif
     50          
     51          
     52          
     53              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     54                  return;
     55              }
     56              if (ticks > 0) {                             /* 0 means no delay!                                  */
     57                  OS_ENTER_CRITICAL();
     58                  y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
     59                  OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
     60                  if (OSRdyTbl[y] == 0) {
     61                      OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     62                  }
     63                  OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
     64                  OS_EXIT_CRITICAL();
     65                  OS_Sched();                              /* Find next task to run!                             */
     66              }
     67          }
     68          /*$PAGE*/
     69          /*
     70          *********************************************************************************************************
     71          *                                     DELAY TASK FOR SPECIFIED TIME
     72          *
     73          * Description: This function is called to delay execution of the currently running task until some time
     74          *              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
     75          *              MILLISECONDS instead of ticks.
     76          *
     77          * Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
     78          *              minutes   specifies the number of minutes (max. 59)
     79          *              seconds   specifies the number of seconds (max. 59)
     80          *              milli     specifies the number of milliseconds (max. 999)
     81          *
     82          * Returns    : OS_ERR_NONE
     83          *              OS_ERR_TIME_INVALID_MINUTES
     84          *              OS_ERR_TIME_INVALID_SECONDS
     85          *              OS_ERR_TIME_INVALID_MS
     86          *              OS_ERR_TIME_ZERO_DLY
     87          *              OS_ERR_TIME_DLY_ISR
     88          *
     89          * Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
     90          *              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
     91          *              set to 0.  The actual delay is rounded to the nearest tick.
     92          *********************************************************************************************************
     93          */
     94          
     95          #if OS_TIME_DLY_HMSM_EN > 0
     96          INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
     97          {
     98              INT32U ticks;
     99              INT16U loops;
    100          
    101          
    102              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    103                  return (OS_ERR_TIME_DLY_ISR);
    104              }
    105          #if OS_ARG_CHK_EN > 0
    106              if (hours == 0) {
    107                  if (minutes == 0) {
    108                      if (seconds == 0) {
    109                          if (ms == 0) {
    110                              return (OS_ERR_TIME_ZERO_DLY);
    111                          }
    112                      }
    113                  }
    114              }
    115              if (minutes > 59) {
    116                  return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    117              }
    118              if (seconds > 59) {
    119                  return (OS_ERR_TIME_INVALID_SECONDS);
    120              }
    121              if (ms > 999) {
    122                  return (OS_ERR_TIME_INVALID_MS);
    123              }
    124          #endif
    125                                                           /* Compute the total number of clock ticks required.. */
    126                                                           /* .. (rounded to the nearest tick)                   */
    127              ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    128                    + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    129              loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    130              ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    131              OSTimeDly((INT16U)ticks);
    132              while (loops > 0) {
    133                  OSTimeDly((INT16U)32768u);
    134                  OSTimeDly((INT16U)32768u);
    135                  loops--;
    136              }
    137              return (OS_ERR_NONE);
    138          }
    139          #endif
    140          /*$PAGE*/
    141          /*
    142          *********************************************************************************************************
    143          *                                         RESUME A DELAYED TASK
    144          *
    145          * Description: This function is used resume a task that has been delayed through a call to either
    146          *              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
    147          *              task that is waiting for an event with timeout.  This would make the task look
    148          *              like a timeout occurred.
    149          *
    150          *              Also, you cannot resume a task that has called OSTimeDlyHMSM() with a combined time that
    151          *              exceeds 65535 clock ticks.  In other words, if the clock tick runs at 100 Hz then, you will
    152          *              not be able to resume a delayed task that called OSTimeDlyHMSM(0, 10, 55, 350) or higher:
    153          *
    154          *                  (10 Minutes * 60 + 55 Seconds + 0.35) * 100 ticks/second.
    155          *
    156          * Arguments  : prio                      specifies the priority of the task to resume
    157          *
    158          * Returns    : OS_ERR_NONE               Task has been resumed
    159          *              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
    160          *                                        (i.e. >= OS_LOWEST_PRIO)
    161          *              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
    162          *              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a Mutex.
    163          *********************************************************************************************************
    164          */
    165          
    166          #if OS_TIME_DLY_RESUME_EN > 0
    167          INT8U  OSTimeDlyResume (INT8U prio)
    168          {
    169              OS_TCB    *ptcb;
    170          #if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    171              OS_CPU_SR  cpu_sr = 0;
    172          #endif
    173          
    174          
    175          
    176              if (prio >= OS_LOWEST_PRIO) {
    177                  return (OS_ERR_PRIO_INVALID);
    178              }
    179              OS_ENTER_CRITICAL();
    180              ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    181              if (ptcb == (OS_TCB *)0) {
    182                  OS_EXIT_CRITICAL();
    183                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    184              }
    185              if (ptcb == OS_TCB_RESERVED) {
    186                  OS_EXIT_CRITICAL();
    187                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    188              }
    189              if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    190                  OS_EXIT_CRITICAL();
    191                  return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    192              }
    193          
    194              ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    195              if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    196                  ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    197                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    198              } else {
    199                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    200              }
    201              if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    202                  OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    203                  OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    204                  OS_EXIT_CRITICAL();
    205                  OS_Sched();                                            /* See if this is new highest priority  */
    206              } else {
    207                  OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    208              }
    209              return (OS_ERR_NONE);
    210          }
    211          #endif
    212          /*$PAGE*/
    213          /*
    214          *********************************************************************************************************
    215          *                                         GET CURRENT SYSTEM TIME
    216          *
    217          * Description: This function is used by your application to obtain the current value of the 32-bit
    218          *              counter which keeps track of the number of clock ticks.
    219          *
    220          * Arguments  : none
    221          *
    222          * Returns    : The current value of OSTime
    223          *********************************************************************************************************
    224          */
    225          
    226          #if OS_TIME_GET_SET_EN > 0
    227          INT32U  OSTimeGet (void)
    228          {
    229              INT32U     ticks;
    230          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    231              OS_CPU_SR  cpu_sr = 0;
    232          #endif
    233          
    234          
    235          
    236              OS_ENTER_CRITICAL();
    237              ticks = OSTime;
    238              OS_EXIT_CRITICAL();
    239              return (ticks);
    240          }
    241          #endif
    242          
    243          /*
    244          *********************************************************************************************************
    245          *                                            SET SYSTEM CLOCK
    246          *
    247          * Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
    248          *
    249          * Arguments  : ticks      specifies the new value that OSTime needs to take.
    250          *
    251          * Returns    : none
    252          *********************************************************************************************************
    253          */
    254          
    255          #if OS_TIME_GET_SET_EN > 0
    256          void  OSTimeSet (INT32U ticks)
    257          {
    258          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    259              OS_CPU_SR  cpu_sr = 0;
    260          #endif
    261          
    262          
    263          
    264              OS_ENTER_CRITICAL();
    265              OSTime = ticks;
    266              OS_EXIT_CRITICAL();
    267          }
    268          #endif

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     OSTimeDly            8
     OSTimeDlyHMSM       16
     OSTimeDlyResume      8
     OSTimeGet           16
     OSTimeSet           16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     OSTimeDly        108
     OSTimeDlyHMSM    162
     OSTimeDlyResume  176
     OSTimeGet         24
     OSTimeSet         24
     ??DataTable6       4
     ??DataTable8       4
     ??DataTable10      4
     ??DataTable12      4

 
 510 bytes in section .text
 
 510 bytes of CODE memory

Errors: none
Warnings: none
