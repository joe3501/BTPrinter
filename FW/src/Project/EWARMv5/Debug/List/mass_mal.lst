###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     12/Dec/2015  15:20:02 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\usb_lib\mass_mal.c                  #
#    Command line =  "E:\BT Printer\FW\src\usb_lib\mass_mal.c" -D DEBUG_VER   #
#                    -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\"  #
#                    -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I "E:\BT    #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\mass_mal #
#                    .lst                                                     #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\mass_mal. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\usb_lib\mass_mal.c
      1          /******************** (C) COPYRIGHT 2010 STMicroelectronics ********************
      2          * File Name          : mass_mal.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.1.1
      5          * Date               : 04/07/2010
      6          * Description        : Medium Access Layer interface
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "usb_app_config.h"
     18          #if(USB_DEVICE_CONFIG & _USE_USB_MASS_STOARGE_DEVICE)
     19          #include "mass_mal.h"
     20          //#include "spi_sd.h"
     21          #include "stm32f10x_sdio.h"
     22          #include "spi_flash.h"
     23          
     24          #ifdef DUMMY_FAT_FS
     25          #include "dummy_fat16_data.h"
     26          #include <string.h>
     27          #endif
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          u32 Mass_Memory_Size[2];
     34          u32 Mass_Block_Size[2];
     35          u32 Mass_Block_Count[2];
     36          volatile u32 Status = 0;
     37          
     38          
     39          //extern SD_CardInfo							SDIO_Info;
     40          
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          /*******************************************************************************
     44          * Function Name  : MAL_Init
     45          * Description    : Initializes the Media on the STM32
     46          * Input          : None
     47          * Output         : None
     48          * Return         : None
     49          *******************************************************************************/
     50          u16 MAL_Init(u8 lun)
     51          {
     52            u16 status = MAL_OK;
     53          
     54            switch (lun)
     55            {
     56              case 0:
     57          //      if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_MSD)
     58          //      {
     59          //              Status = SD_Init();
     60          //      Status = SD_GetCardInfo(&SDCardInfo);
     61          //      Status = SD_SelectDeselect((u32) (SDCardInfo.RCA << 16));
     62          //      Status = SD_EnableWideBusOperation(SDIO_BusWide_4b);
     63           //     Status = SD_SetDeviceMode(SD_DMA_MODE);
     64          
     65                //SPI_SD_Init();
     66           //     }
     67          
     68                break;
     69              default:
     70                return MAL_FAIL;
     71            }
     72            return status;
     73          }
     74          /*******************************************************************************
     75          * Function Name  : MAL_Write
     76          * Description    : Write sectors
     77          * Input          : None
     78          * Output         : None
     79          * Return         : None
     80          *******************************************************************************/
     81          //u16 MAL_Write(u8 lun, u32 Memory_Offset, u32 *Writebuff, u16 Transfer_Length)
     82          u16 MAL_Write(u8 lun, u32 Memory_Offset, u8 *Writebuff, u16 Transfer_Length)
     83          {
     84             unsigned char *pBuf = (unsigned char*)Writebuff;
     85          #ifdef DUMMY_FAT_FS
     86          	int i;
     87          #endif
     88            switch (lun)
     89            {
     90              case 0:
     91          		if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_DUMMY_FAT)
     92          		{
     93          			#ifdef DUMMY_FAT_FS
     94          				if ((Memory_Offset >= DB_FILE_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (DB_FILE_LBA*Mass_Block_Size[lun]+IF_FILE_SIZE)))
     95          				{
     96          					//写接口文件
     97          					//通过如下方法将接收到的命令数据送往命令缓冲区
     98          					for (i = 0; i < Transfer_Length;i++)
     99          					{
    100          						if(PCUsart_InByte(pBuf[i]))
    101          						{
    102          							break;
    103          						}
    104          					}
    105          				}
    106          
    107          				break;
    108          			#endif
    109          		}
    110          		else if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_SPI_FLASH)
    111          		{
    112          			if ((Memory_Offset >= FAT_FLASH_SIZE)||((Memory_Offset+Transfer_Length)>FAT_FLASH_SIZE))
    113          			{
    114          				return MAL_FAIL;
    115          			}
    116          
    117          			Status = spi_flash_write(fatfs_sector_offset+Memory_Offset/512,pBuf,1);
    118          			if (Status)
    119          			{
    120          				return MAL_FAIL;
    121          			}
    122          			break;
    123          		}
    124          		//else
    125          		//{
    126          		//	Status = SD_WriteBlock(Memory_Offset, Writebuff, Transfer_Length);
    127          		//	if ( Status != SD_OK )
    128          		//	{
    129          		//		return MAL_FAIL;
    130          		//	}      
    131          		//	//SPI_SD_WriteBlock((u8*)Writebuff, Memory_Offset, Transfer_Length);
    132          		//	break;
    133          		//}
    134              default:
    135                return MAL_FAIL;
    136            }
    137            return MAL_OK;
    138          }
    139          
    140          /*******************************************************************************
    141          * Function Name  : MAL_Read
    142          * Description    : Read sectors
    143          * Input          : None
    144          * Output         : None
    145          * Return         : Buffer pointer
    146          *******************************************************************************/
    147          //u16 MAL_Read(u8 lun, u32 Memory_Offset, u32 *Readbuff, u16 Transfer_Length)
    148          u16 MAL_Read(u8 lun, u32 Memory_Offset, u8 *Readbuff, u16 Transfer_Length)
    149          {
    150            switch (lun)
    151            {
    152              case 0:
    153          		if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_DUMMY_FAT)
    154          		{
    155          			#ifdef DUMMY_FAT_FS
    156          				if (Memory_Offset < (MBR_LBA*Mass_Block_Size[lun]+512))
    157          				{
    158          					MEMCPY(Readbuff,dummy_MBR+Memory_Offset-MBR_LBA*Mass_Block_Size[lun],Transfer_Length);
    159          				}
    160          				else if ((Memory_Offset >= DBR_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (DBR_LBA*Mass_Block_Size[lun]+512)))
    161          				{
    162          					MEMCPY(Readbuff,dummy_DBR+Memory_Offset-DBR_LBA*Mass_Block_Size[lun],Transfer_Length);
    163          				}
    164          				else if ((Memory_Offset >= FAT1_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (FAT1_LBA*Mass_Block_Size[lun]+512)))
    165          				{
    166          					MEMCPY(Readbuff,dummy_FAT+Memory_Offset-FAT1_LBA*Mass_Block_Size[lun],Transfer_Length);
    167          				}
    168          				else if ((Memory_Offset >= FAT2_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (FAT2_LBA*Mass_Block_Size[lun]+512)))
    169          				{
    170          					MEMCPY(Readbuff,dummy_FAT+Memory_Offset-FAT2_LBA*Mass_Block_Size[lun],Transfer_Length);
    171          				}
    172          				else if ((Memory_Offset >= FDT_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (FDT_LBA*Mass_Block_Size[lun]+512)))
    173          				{
    174          					MEMCPY(Readbuff,dummy_FDT+Memory_Offset-FDT_LBA*Mass_Block_Size[lun],Transfer_Length);
    175          				}
    176          				else if ((Memory_Offset >= DB_FILE_LBA*Mass_Block_Size[lun])&&(Memory_Offset < (DB_FILE_LBA*Mass_Block_Size[lun]+IF_FILE_SIZE)))
    177          				{
    178          					MEMCPY(Readbuff,g_send_buff + Memory_Offset-DB_FILE_LBA*Mass_Block_Size[lun],Transfer_Length);
    179          				}
    180          				else
    181          				{
    182          					MEMSET(Readbuff,0,Transfer_Length);
    183          				}
    184          				break;
    185          			#endif
    186          		}
    187          		else if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_SPI_FLASH)
    188          		{
    189          			Status = spi_flash_post_write();
    190          			if (Status)
    191          			{
    192          				return MAL_FAIL;
    193          			}
    194          
    195          			if ((Memory_Offset >= FAT_FLASH_SIZE)||((Memory_Offset+Transfer_Length)>FAT_FLASH_SIZE))
    196          			{
    197          				return MAL_FAIL;
    198          			}
    199          
    200          			spi_flash_raddr(fatfs_sector_offset*512+Memory_Offset, Transfer_Length,(unsigned char*)Readbuff);
    201                      break;
    202          		}
    203          		//else
    204          		//{
    205          		//	Status = SD_ReadBlock(Memory_Offset, Readbuff, Transfer_Length);
    206          		//	if ( Status != SD_OK )
    207          		//	{
    208          		//		return MAL_FAIL;
    209          		//	}
    210          		//	//SPI_SD_ReadBlock((u8*)Readbuff, Memory_Offset, Transfer_Length);
    211          		//	break;
    212          		//}
    213              default:
    214                return MAL_FAIL;
    215            }
    216            return MAL_OK;
    217          }
    218          
    219          /*******************************************************************************
    220          * Function Name  : MAL_GetStatus
    221          * Description    : Get status
    222          * Input          : None
    223          * Output         : None
    224          * Return         : None
    225          *******************************************************************************/
    226          u16 MAL_GetStatus (u8 lun)
    227          {
    228          
    229          #if 1
    230            //u32 DeviceSizeMul = 0, NumberOfBlocks = 0;
    231          
    232            //u32 temp_block_mul = 0;
    233          //  SD_CSD MSD_csd;
    234            //u32 DeviceSizeMul = 0;
    235          
    236          
    237          
    238            if (lun == 0)
    239            {
    240          	  if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_DUMMY_FAT)
    241          	  {
    242          		#ifdef DUMMY_FAT_FS  
    243          		  Mass_Block_Count[0] = 0x1e500;	//dummy
    244          		  Mass_Block_Size[0] = 512;			//dummy
    245          		  Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
    246          		  return MAL_OK;
    247          		#endif
    248          	  }
    249          	  else if (g_mass_storage_device_type == MASSTORAGE_DEVICE_TYPE_SPI_FLASH)
    250          	  {
    251          			Mass_Block_Count[0] = get_spi_flash_capacity();
    252          			Mass_Block_Size[0] = 512;
    253          			Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
    254          			if (spi_flash_post_write())
    255          			{
    256          				return MAL_FAIL;
    257          			}
    258          			return MAL_OK;
    259          	  }
    260          //	  else
    261          //	  {
    262          //		  if (SD_Init() == SD_OK)
    263          //		  {
    264          //			  SD_GetCardInfo(&SDCardInfo);
    265          //			  SD_SelectDeselect((u32) (SDCardInfo.RCA << 16));
    266          //			  DeviceSizeMul = (SDCardInfo.SD_csd.DeviceSizeMul + 2);
    267          //
    268          //			  if(SDCardInfo.CardType == SDIO_HIGH_CAPACITY_SD_CARD)
    269          //			  {
    270          //				  Mass_Block_Count[0] = (SDCardInfo.SD_csd.DeviceSize + 1) * 1024;
    271          //			  }
    272          //			  else
    273          //			  {
    274          //				  NumberOfBlocks  = ((1 << (SDCardInfo.SD_csd.RdBlockLen)) / 512);
    275          //				  Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (NumberOfBlocks/2));
    276          //			  }
    277          //			  Mass_Block_Size[0]  = 512;
    278          //
    279          //			  Status = SD_SelectDeselect((u32) (SDCardInfo.RCA << 16)); 
    280          //			  Status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
    281          //			  if ( Status != SD_OK )
    282          //			  {
    283          //				  return MAL_FAIL;
    284          //			  }
    285          //
    286          //			  Status = SD_SetDeviceMode(SD_DMA_MODE);         
    287          //			  if ( Status != SD_OK )
    288          //			  {
    289          //				  return MAL_FAIL;
    290          //			  }  
    291          //			   return MAL_OK;
    292          //		  }
    293          #if 0
    294          			  SPI_SD_GetCSDRegister(&MSD_csd);
    295          			  DeviceSizeMul = MSD_csd.DeviceSizeMul + 2;
    296          			  temp_block_mul = (1 << MSD_csd.RdBlockLen)/ 512;
    297          			  Mass_Block_Count[0] = ((MSD_csd.DeviceSize + 1) * (1 << (DeviceSizeMul))) * temp_block_mul;
    298          			  Mass_Block_Size[0] = 512;
    299          			  //Mass_Memory_Size[0] = (Mass_Block_Count[0] * Mass_Block_Size[0]);
    300          
    301          			  Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
    302          			  return MAL_OK;
    303          #endif
    304          //	  }
    305          
    306            }
    307            return MAL_FAIL;
    308          #endif
    309          }
    310          
    311          #endif
    312          
    313          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     MAL_GetStatus      8
     MAL_Init           0
     MAL_Read          16
     MAL_Write          8


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     Mass_Memory_Size    8
     Mass_Block_Size     8
     Mass_Block_Count    8
     Status              4
     MAL_Init           18
     MAL_Write          88
     MAL_Read          102
     MAL_GetStatus      88
     ??DataTable8        4
     ??DataTable9        4
     ??DataTable11       4

 
  28 bytes in section .bss
 308 bytes in section .text
 
 308 bytes of CODE memory
  28 bytes of DATA memory

Errors: none
Warnings: 1
