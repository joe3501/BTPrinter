###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     10/Dec/2015  18:37:22 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Drivers\TimeBase.c                  #
#    Command line =  "E:\BT Printer\FW\src\Drivers\TimeBase.c" -D DEBUG_VER   #
#                    -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\"  #
#                    -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None -I "E:\BT  #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\TimeBase #
#                    .lst                                                     #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\TimeBase. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Drivers\TimeBase.c
      1          /**
      2           * @file  Timebase.c
      3           * @brief use TIM2 to generate a time base 
      4           * @version 1.0
      5           * @author kent.zhou
      6           * @date 2015年10月10日
      7           * @note
      8          */
      9          #include "stm32f10x_lib.h" 
     10          #include "hw_platform.h"
     11          #include "TimeBase.h"
     12          #include <assert.h>
     13          
     14          
     15          static TimerIsrHook	timer_isr_hook;
     16          
     17          /**
     18           * @brief     us 软延时
     19           * @param[in] unsigned int time 延时参数
     20          */
     21          void delay_us(unsigned int time)
     22          {    
     23          	unsigned int i=0;  
     24          	while(time--)
     25          	{
     26          		i=8;  
     27          		while(i--) ;    
     28          	}
     29          }
     30          
     31          /**
     32           * @brief     ms软延时
     33           * @param[in] unsigned int time 延时参数
     34          */
     35          void delay_ms(unsigned int time)
     36          {    
     37          	unsigned int i=0;  
     38          	while(time--)
     39          	{
     40          		i=10255; 
     41          		while(i--) ;    
     42          	}
     43          }
     44          
     45          
     46          /**
     47           * @brief     初始化产生延时时基的计数器TIM2,设定计数器产生1ms的时基
     48           * @param[in] none
     49           * @param[out] none
     50           * @return none
     51           * @note   此初始化函数中调用了BSP_IntVectSet(BSP_INT_ID_TIM2, TIM2_UpdateISRHandler)这个函数，这个是设定TIM2的中断处理函数的
     52           *				 在移植的时候需要根据不同工程中设置中断处理函数的方法来稍作修改。       
     53          */
     54          void TimeBase_Init(void)
     55          {
     56          	TIM_TimeBaseInitTypeDef						TIM_TimeBaseStructure;
     57          	TIM_OCInitTypeDef							TIM_OCInitStructure;
     58          	NVIC_InitTypeDef							NVIC_InitStructure;
     59          
     60          	//初始化结构体变量
     61          	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
     62          	TIM_OCStructInit(&TIM_OCInitStructure);
     63          
     64          	/*开启相应时钟 */
     65          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);  
     66          
     67          
     68          	/* Time Base configuration */
     69          	TIM_TimeBaseStructure.TIM_Prescaler			= 1;      //72M的计数频率
     70          	TIM_TimeBaseStructure.TIM_CounterMode		= TIM_CounterMode_Up; //向上计数
     71          	TIM_TimeBaseStructure.TIM_Period			= (72000/2-1);      
     72          	TIM_TimeBaseStructure.TIM_ClockDivision		= 0x0;
     73          
     74          	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
     75          
     76          	/* Channel 1, 2, 3 and 4 Configuration in Timing mode */
     77          	TIM_OCInitStructure.TIM_OCMode				= TIM_OCMode_Timing;
     78          //   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
     79          //   TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
     80          	TIM_OCInitStructure.TIM_Pulse				= 0x0;
     81          
     82          	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
     83          
     84          	/* Enable the TIM2 Interrupt */
     85          	NVIC_InitStructure.NVIC_IRQChannel			= TIM2_IRQChannel;
     86          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     87          	NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 7;
     88          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
     89          	NVIC_Init(&NVIC_InitStructure);
     90          
     91          	//timer_isr_hook = (TimerIsrHook)0;
     92          }
     93          
     94          #if(SOFT_TIMER_FUNC_ENABLE) 
     95          #include "JMemory.h"
     96          typedef struct v_timer_t
     97          {
     98          	unsigned char	mode;
     99          	unsigned int	count;
    100          	unsigned int	dly;
    101          	TimerIsrHook	timer_hook;
    102          	struct v_timer_t	*prev;
    103          	struct v_timer_t	*next;
    104          }V_TIMER;
    105          
    106          struct 
    107          {
    108          	V_TIMER		*v_timer_tail;
    109          	unsigned int	v_timer_cnt;
    110          }v_timer_list;
    111          
    112          /**
    113           * @brief 开启定时器
    114           * @param[in] unsigned char mode		V_TIMER_MODE_ONE_SHOT		or      V_TIMER_MODE_PERIODIC
    115           * @param[in] unsigned int dly			在V_TIMER_MODE_ONE_SHOT模式下，表示延时时间
    116           *										在V_TIMER_MODE_PERIODIC模式下，表示定时周期
    117           * @param[in] TimerIsrHook hook_func	表示超时一次需要执行的回调函数
    118           * @return 0：  堆空间不够
    119           *         else  返回虚拟定时器的句柄
    120           * @note 应用在调用此接口时不知道已经有多少个虚拟定时器挂在硬件定时器下，所以返回值相当于定时器句柄的作用
    121           *       由于此虚拟定时器是基于硬件定时器TIME2实现的，TIMER2初始化为1ms中断，所以定时的最小单位为1ms
    122          */
    123          VTIMER_HANDLE start_timer(unsigned char mode,unsigned int dly, TimerIsrHook hook_func)
    124          {
    125          	V_TIMER	*p_vtimer;
    126          	p_vtimer = (V_TIMER*)Jmalloc(sizeof(V_TIMER));
    127          	if (p_vtimer == 0)
    128          	{
    129          		return 0;
    130          	}
    131          	p_vtimer->mode = mode;
    132          	p_vtimer->dly = dly;
    133          	p_vtimer->timer_hook = hook_func;
    134          	p_vtimer->prev = 0;
    135          	p_vtimer->next = 0;
    136          	p_vtimer->count = 0;
    137          
    138          	if (v_timer_list.v_timer_cnt == 0)
    139          	{
    140          		TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    141          		/* TIM counter enable */
    142          		TIM_Cmd(TIM2, ENABLE);
    143          	}
    144          	else
    145          	{
    146          		p_vtimer->prev = v_timer_list.v_timer_tail;
    147          		v_timer_list.v_timer_tail->next = p_vtimer;
    148          	}
    149          	v_timer_list.v_timer_tail = p_vtimer;
    150          	v_timer_list.v_timer_cnt ++;
    151          
    152          	return (VTIMER_HANDLE)p_vtimer;
    153          }
    154          
    155          /**
    156           * @brief 判断虚拟定时器的句柄是否合法，检查给定的虚拟定时器句柄（实际是每个定时器控制块的指针）是否在定时器链表中
    157           * @param[in]  VTIMER_HANDLE v_timer_h
    158          */
    159          static int check_vtimer_handle(VTIMER_HANDLE v_timer_h)
    160          {
    161          	V_TIMER	*p_vtimer;
    162          
    163          	p_vtimer = v_timer_list.v_timer_tail;
    164          	while (p_vtimer)
    165          	{
    166          		if (p_vtimer == (V_TIMER*)v_timer_h)
    167          		{
    168          			return 1;
    169          		}
    170          		p_vtimer = p_vtimer->prev;
    171          	}
    172          
    173          	return 0;
    174          }
    175          
    176          /**
    177           * @brief 重置某定时器
    178           * @param[in]  VTIMER_HANDLE v_timer_h
    179          */
    180          int reset_timer(VTIMER_HANDLE v_timer_h,unsigned char mode,unsigned int dly, TimerIsrHook hook_func)
    181          {
    182          	if (check_vtimer_handle(v_timer_h) == 0)
    183          	{
    184          		return -1;
    185          	}
    186          
    187          	V_TIMER	*p_vtimer = (V_TIMER*)v_timer_h;
    188          
    189          	p_vtimer->count = 0;
    190          	p_vtimer->mode = mode;
    191          	p_vtimer->dly = dly;
    192          	p_vtimer->timer_hook = hook_func;
    193          
    194          	return 0;
    195          }
    196          
    197          /**
    198           * @brief 关闭某定时器
    199           * @param[in]  VTIMER_HANDLE v_timer_h
    200          */
    201          int stop_timer(VTIMER_HANDLE v_timer_h)
    202          {
    203          	if (check_vtimer_handle(v_timer_h) == 0)
    204          	{
    205          		return 0;
    206          	}
    207          
    208          	V_TIMER	*p_vtimer = (V_TIMER*)v_timer_h;
    209          
    210          	if (p_vtimer->next)
    211          	{
    212          		p_vtimer->next->prev = p_vtimer->prev;
    213          	}
    214          	else
    215          	{
    216          		v_timer_list.v_timer_tail = p_vtimer->prev;
    217          	}
    218          	
    219          	if(p_vtimer->prev)
    220          	{
    221          		p_vtimer->prev->next = p_vtimer->next;
    222          	}
    223          
    224          	v_timer_list.v_timer_cnt--;
    225          	Jfree(p_vtimer);
    226          	
    227          	if (v_timer_list.v_timer_cnt == 0)
    228          	{
    229          		TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    230          		/* TIM counter enable */
    231          		TIM_Cmd(TIM2, DISABLE);
    232          	}
    233          
    234          	return 0;
    235          }
    236          
    237          
    238          /**
    239           * @brief 强制开启硬定时器
    240          */
    241          void start_real_timer(void)
    242          {
    243          	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    244          	/* TIM counter enable */
    245          	TIM_Cmd(TIM2, ENABLE);
    246          	return;
    247          }
    248          
    249          /**
    250           * @brief 强制关闭硬定时器
    251          */
    252          void stop_real_timer(void)
    253          {
    254          	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    255          	/* TIM counter enable */
    256          	TIM_Cmd(TIM2, DISABLE);
    257          	return;
    258          }
    259          
    260          /**
    261           * @brief TIM2的溢出中断ISR
    262           * @param[in] none
    263           * @return none
    264           * @note  TIM2的中断服务函数调用
    265          */
    266          void TIM2_UpdateISRHandler(void)
    267          {    
    268          	V_TIMER *p_vtimer;
    269          	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    270          	{
    271          		p_vtimer = v_timer_list.v_timer_tail;
    272          		while (p_vtimer)
    273          		{
    274          			p_vtimer->count++;
    275          			if (p_vtimer->count == p_vtimer->dly)
    276          			{
    277          				if (p_vtimer->mode == V_TIMER_MODE_ONE_SHOT)
    278          				{
    279          					if (p_vtimer->next)
    280          					{
    281          						p_vtimer->next->prev = p_vtimer->prev;
    282          					}
    283          					else
    284          					{
    285          						v_timer_list.v_timer_tail = p_vtimer->prev;
    286          					}
    287          
    288          					if(p_vtimer->prev)
    289          					{
    290          						p_vtimer->prev->next = p_vtimer->next;
    291          					}
    292          
    293          					v_timer_list.v_timer_cnt--;
    294          					Jfree(p_vtimer);
    295          
    296          					if (v_timer_list.v_timer_cnt == 0)
    297          					{
    298          						TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    299          						/* TIM counter enable */
    300          						TIM_Cmd(TIM2, DISABLE);
    301          					}
    302          				}
    303          				else
    304          				{
    305          					p_vtimer->count = 0;
    306          				}
    307          
    308          				if (p_vtimer->timer_hook)
    309          				{
    310          					p_vtimer->timer_hook();
    311          				}
    312          			}
    313          			p_vtimer = p_vtimer->prev;
    314          		}
    315          		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    316          	}
    317          }
    318          
    319          
    320          //===============================================利用timer提供的接口实现延时功能================================
    321          static int Delay_end_flag;
    322          //利用timer实现延时功能时的中断钩子函数
    323          void delay_func_hook(void)
    324          {
    325          	Delay_end_flag = 1;
    326          }
    327          
    328          /**
    329           * @brief 开始利用TIM2定时计数
    330           * @param[in] unsigned int nTime   单位ms
    331           * @return  none
    332          */
    333          void StartDelay(unsigned short nTime)
    334          {
    335          	int	ret;
    336              Delay_end_flag = 0;
    337          	ret = start_timer(V_TIMER_MODE_ONE_SHOT,nTime,delay_func_hook);
    338          	assert(ret != 0);
    339          }
    340          
    341          
    342          /**
    343           * @brief 判断延时时间是否到
    344           * @param[in] none
    345           * @return 1: 定时到
    346           *        0: 定时未到
    347          */
    348          unsigned char DelayIsEnd(void)
    349          {
    350          	return	Delay_end_flag; 
    351          }
    352          #else
    353          void TIM2_UpdateISRHandler(void)
    354          {
    355          	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    356          	{
    357          		//@todo....
    358          		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    359          	}
    360          }
    361          #endif

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     TIM2_UpdateISRHandler      8
     TimeBase_Init             40
     delay_ms                   0
     delay_us                   0


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     delay_us                24
     delay_ms                26
     TimeBase_Init          116
     TIM2_UpdateISRHandler   28

 
 194 bytes in section .text
 
 194 bytes of CODE memory

Errors: none
Warnings: 1
