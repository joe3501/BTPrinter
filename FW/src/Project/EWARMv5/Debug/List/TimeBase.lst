###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     20/Nov/2015  16:02:28 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\BT Printer\FW\src\Drivers\TimeBase.c                  #
#    Command line =  "E:\BT Printer\FW\src\Drivers\TimeBase.c" -D DEBUG_VER   #
#                    -lcN "E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\"  #
#                    -o "E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\"     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Full.h" -I "E:\BT      #
#                    Printer\FW\src\Project\EWARMv5\..\" -I "E:\BT            #
#                    Printer\FW\src\Project\EWARMv5\..\..\App\" -I "E:\BT     #
#                    Printer\FW\src\Project\EWARMv5\..\..\Drivers\" -I        #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\FatFs\" -I   #
#                    "E:\BT Printer\FW\src\Project\EWARMv5\..\..\Lib\inc\"    #
#                    -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\uC-C #
#                    PU\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS #
#                    \uC-LIB\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \uCOS\uCOS-II\Ports\" -I "E:\BT                          #
#                    Printer\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Source #
#                    \" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\..\uCOS\u #
#                    C-Probe\" -I "E:\BT Printer\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\" -I "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\List\TimeBase #
#                    .lst                                                     #
#    Object file  =  E:\BT Printer\FW\src\Project\EWARMv5\Debug\Obj\TimeBase. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\BT Printer\FW\src\Drivers\TimeBase.c
      1          /**
      2           * @file  Timebase.c
      3           * @brief use TIM2 to generate a time base 
      4           * @version 1.0
      5           * @author kent.zhou
      6           * @date 2015年10月10日
      7           * @note
      8          */
      9          #include "stm32f10x_lib.h" 
     10          
     11          #include "TimeBase.h"
     12          #include "JMemory.h"
     13          #include <assert.h>
     14          
     15          
     16          static TimerIsrHook	timer_isr_hook;
     17          
     18          /**
     19           * @brief     us 软延时
     20           * @param[in] unsigned int time 延时参数
     21          */
     22          void delay_us(unsigned int time)
     23          {    
     24          	unsigned int i=0;  
     25          	while(time--)
     26          	{
     27          		i=8;  
     28          		while(i--) ;    
     29          	}
     30          }
     31          
     32          /**
     33           * @brief     ms软延时
     34           * @param[in] unsigned int time 延时参数
     35          */
     36          void delay_ms(unsigned int time)
     37          {    
     38          	unsigned int i=0;  
     39          	while(time--)
     40          	{
     41          		i=10255; 
     42          		while(i--) ;    
     43          	}
     44          }
     45          /**
     46           * @brief     初始化产生延时时基的计数器TIM2,设定计数器产生1ms的时基
     47           * @param[in] none
     48           * @param[out] none
     49           * @return none
     50           * @note   此初始化函数中调用了BSP_IntVectSet(BSP_INT_ID_TIM2, TIM2_UpdateISRHandler)这个函数，这个是设定TIM2的中断处理函数的
     51           *				 在移植的时候需要根据不同工程中设置中断处理函数的方法来稍作修改。       
     52          */
     53          void TimeBase_Init(void)
     54          {
     55          	TIM_TimeBaseInitTypeDef						TIM_TimeBaseStructure;
     56          	TIM_OCInitTypeDef							TIM_OCInitStructure;
     57          	NVIC_InitTypeDef							NVIC_InitStructure;
     58          
     59          	//初始化结构体变量
     60          	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
     61          	TIM_OCStructInit(&TIM_OCInitStructure);
     62          
     63          	/*开启相应时钟 */
     64          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);  
     65          
     66          
     67          	/* Time Base configuration */
     68          	TIM_TimeBaseStructure.TIM_Prescaler			= 1;      //72M的计数频率
     69          	TIM_TimeBaseStructure.TIM_CounterMode		= TIM_CounterMode_Up; //向上计数
     70          	TIM_TimeBaseStructure.TIM_Period			= (72000/2-1);      
     71          	TIM_TimeBaseStructure.TIM_ClockDivision		= 0x0;
     72          
     73          	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
     74          
     75          	/* Channel 1, 2, 3 and 4 Configuration in Timing mode */
     76          	TIM_OCInitStructure.TIM_OCMode				= TIM_OCMode_Timing;
     77          //   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
     78          //   TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
     79          	TIM_OCInitStructure.TIM_Pulse				= 0x0;
     80          
     81          	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
     82          
     83          	/* Enable the TIM2 Interrupt */
     84          	NVIC_InitStructure.NVIC_IRQChannel			= TIM2_IRQChannel;
     85          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     86          	//NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 1;
     87          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
     88          	NVIC_Init(&NVIC_InitStructure);
     89          
     90          	//timer_isr_hook = (TimerIsrHook)0;
     91          }
     92          
     93          #if 0
     94          
     95          /**
     96           * @brief 开启定时器
     97           * @param[in] TimerIsrHook hook_func		定时中断回调函数
     98          */
     99          void start_timer(TimerIsrHook hook_func)
    100          {
    101          	if (timer_isr_hook)
    102          	{
    103          		if (timer_isr_hook == hook_func)
    104          		{
    105          			return;
    106          		}
    107          		else
    108          		{
    109          			while(1);		//error
    110          		}
    111          	}
    112          	timer_isr_hook = hook_func;
    113          	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    114          	/* TIM counter enable */
    115          	TIM_Cmd(TIM2, ENABLE);
    116          }
    117          
    118          
    119          /**
    120           * @brief 关闭定时器
    121          */
    122          void stop_timer(void)
    123          {
    124          	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    125          	/* TIM counter enable */
    126          	TIM_Cmd(TIM2, DISABLE);
    127          	timer_isr_hook = (TimerIsrHook)0;
    128          }
    129          
    130          
    131          /**
    132           * @brief TIM2的溢出中断ISR
    133           * @param[in] none
    134           * @return none
    135           * @note  TIM2的中断服务函数调用
    136          */
    137          void TIM2_UpdateISRHandler(void)
    138          {    
    139          	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    140          	{
    141          		if (timer_isr_hook)
    142          		{
    143          			timer_isr_hook();
    144          		}
    145          		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    146          	}
    147          }
    148          #endif
    149          
    150          
    151          
    152          typedef struct v_timer_t
    153          {
    154          	unsigned char	mode;
    155          	unsigned int	count;
    156          	unsigned int	dly;
    157          	TimerIsrHook	timer_hook;
    158          	struct v_timer_t	*prev;
    159          	struct v_timer_t	*next;
    160          }V_TIMER;
    161          
    162          struct 
    163          {
    164          	V_TIMER		*v_timer_tail;
    165          	unsigned int	v_timer_cnt;
    166          }v_timer_list;
    167          
    168          /**
    169           * @brief 开启定时器
    170           * @param[in] unsigned char mode		V_TIMER_MODE_ONE_SHOT		or      V_TIMER_MODE_PERIODIC
    171           * @param[in] unsigned int dly			在V_TIMER_MODE_ONE_SHOT模式下，表示延时时间
    172           *										在V_TIMER_MODE_PERIODIC模式下，表示定时周期
    173           * @param[in] TimerIsrHook hook_func	表示超时一次需要执行的回调函数
    174           * @return 0：  堆空间不够
    175           *         else  返回虚拟定时器的句柄
    176           * @note 应用在调用此接口时不知道已经有多少个虚拟定时器挂在硬件定时器下，所以返回值相当于定时器句柄的作用
    177           *       由于此虚拟定时器是基于硬件定时器TIME2实现的，TIMER2初始化为1ms中断，所以定时的最小单位为1ms
    178          */
    179          VTIMER_HANDLE start_timer(unsigned char mode,unsigned int dly, TimerIsrHook hook_func)
    180          {
    181          	V_TIMER	*p_vtimer;
    182          	p_vtimer = (V_TIMER*)Jmalloc(sizeof(V_TIMER));
    183          	if (p_vtimer == 0)
    184          	{
    185          		return 0;
    186          	}
    187          	p_vtimer->mode = mode;
    188          	p_vtimer->dly = dly;
    189          	p_vtimer->timer_hook = hook_func;
    190          	p_vtimer->prev = 0;
    191          	p_vtimer->next = 0;
    192          	p_vtimer->count = 0;
    193          
    194          	if (v_timer_list.v_timer_cnt == 0)
    195          	{
    196          		TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    197          		/* TIM counter enable */
    198          		TIM_Cmd(TIM2, ENABLE);
    199          	}
    200          	else
    201          	{
    202          		p_vtimer->prev = v_timer_list.v_timer_tail;
    203          		v_timer_list.v_timer_tail->next = p_vtimer;
    204          	}
    205          	v_timer_list.v_timer_tail = p_vtimer;
    206          	v_timer_list.v_timer_cnt ++;
    207          
    208          	return (VTIMER_HANDLE)p_vtimer;
    209          }
    210          
    211          /**
    212           * @brief 判断虚拟定时器的句柄是否合法，检查给定的虚拟定时器句柄（实际是每个定时器控制块的指针）是否在定时器链表中
    213           * @param[in]  VTIMER_HANDLE v_timer_h
    214          */
    215          static int check_vtimer_handle(VTIMER_HANDLE v_timer_h)
    216          {
    217          	V_TIMER	*p_vtimer;
    218          
    219          	p_vtimer = v_timer_list.v_timer_tail;
    220          	while (p_vtimer)
    221          	{
    222          		if (p_vtimer == (V_TIMER*)v_timer_h)
    223          		{
    224          			return 1;
    225          		}
    226          		p_vtimer = p_vtimer->prev;
    227          	}
    228          
    229          	return 0;
    230          }
    231          
    232          /**
    233           * @brief 重置某定时器
    234           * @param[in]  VTIMER_HANDLE v_timer_h
    235          */
    236          int reset_timer(VTIMER_HANDLE v_timer_h,unsigned char mode,unsigned int dly, TimerIsrHook hook_func)
    237          {
    238          	if (check_vtimer_handle(v_timer_h) == 0)
    239          	{
    240          		return -1;
    241          	}
    242          
    243          	V_TIMER	*p_vtimer = (V_TIMER*)v_timer_h;
    244          
    245          	p_vtimer->count = 0;
    246          	p_vtimer->mode = mode;
    247          	p_vtimer->dly = dly;
    248          	p_vtimer->timer_hook = hook_func;
    249          
    250          	return 0;
    251          }
    252          
    253          /**
    254           * @brief 关闭某定时器
    255           * @param[in]  VTIMER_HANDLE v_timer_h
    256          */
    257          int stop_timer(VTIMER_HANDLE v_timer_h)
    258          {
    259          	if (check_vtimer_handle(v_timer_h) == 0)
    260          	{
    261          		return 0;
    262          	}
    263          
    264          	V_TIMER	*p_vtimer = (V_TIMER*)v_timer_h;
    265          
    266          	if (p_vtimer->next)
    267          	{
    268          		p_vtimer->next->prev = p_vtimer->prev;
    269          	}
    270          	else
    271          	{
    272          		v_timer_list.v_timer_tail = p_vtimer->prev;
    273          	}
    274          	
    275          	if(p_vtimer->prev)
    276          	{
    277          		p_vtimer->prev->next = p_vtimer->next;
    278          	}
    279          
    280          	v_timer_list.v_timer_cnt--;
    281          	Jfree(p_vtimer);
    282          	
    283          	if (v_timer_list.v_timer_cnt == 0)
    284          	{
    285          		TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    286          		/* TIM counter enable */
    287          		TIM_Cmd(TIM2, DISABLE);
    288          	}
    289          
    290          	return 0;
    291          }
    292          
    293          
    294          /**
    295           * @brief 强制开启硬定时器
    296          */
    297          void start_real_timer(void)
    298          {
    299          	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    300          	/* TIM counter enable */
    301          	TIM_Cmd(TIM2, ENABLE);
    302          	return;
    303          }
    304          
    305          /**
    306           * @brief 强制关闭硬定时器
    307          */
    308          void stop_real_timer(void)
    309          {
    310          	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    311          	/* TIM counter enable */
    312          	TIM_Cmd(TIM2, DISABLE);
    313          	return;
    314          }
    315          
    316          /**
    317           * @brief TIM2的溢出中断ISR
    318           * @param[in] none
    319           * @return none
    320           * @note  TIM2的中断服务函数调用
    321          */
    322          void TIM2_UpdateISRHandler(void)
    323          {    
    324          	V_TIMER *p_vtimer;
    325          	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    326          	{
    327          		p_vtimer = v_timer_list.v_timer_tail;
    328          		while (p_vtimer)
    329          		{
    330          			p_vtimer->count++;
    331          			if (p_vtimer->count == p_vtimer->dly)
    332          			{
    333          				if (p_vtimer->mode == V_TIMER_MODE_ONE_SHOT)
    334          				{
    335          					if (p_vtimer->next)
    336          					{
    337          						p_vtimer->next->prev = p_vtimer->prev;
    338          					}
    339          					else
    340          					{
    341          						v_timer_list.v_timer_tail = p_vtimer->prev;
    342          					}
    343          
    344          					if(p_vtimer->prev)
    345          					{
    346          						p_vtimer->prev->next = p_vtimer->next;
    347          					}
    348          
    349          					v_timer_list.v_timer_cnt--;
    350          					Jfree(p_vtimer);
    351          
    352          					if (v_timer_list.v_timer_cnt == 0)
    353          					{
    354          						TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    355          						/* TIM counter enable */
    356          						TIM_Cmd(TIM2, DISABLE);
    357          					}
    358          				}
    359          				else
    360          				{
    361          					p_vtimer->count = 0;
    362          				}
    363          
    364          				if (p_vtimer->timer_hook)
    365          				{
    366          					p_vtimer->timer_hook();
    367          				}
    368          			}
    369          			p_vtimer = p_vtimer->prev;
    370          		}
    371          		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    372          	}
    373          }
    374          
    375          
    376          //===============================================利用timer提供的接口实现延时功能================================
    377          static int Delay_end_flag;
    378          //利用timer实现延时功能时的中断钩子函数
    379          void delay_func_hook(void)
    380          {
    381          	Delay_end_flag = 1;
    382          }
    383          
    384          /**
    385           * @brief 开始利用TIM2定时计数
    386           * @param[in] unsigned int nTime   单位ms
    387           * @return  none
    388          */
    389          void StartDelay(unsigned short nTime)
    390          {
    391          	int	ret;
    392              Delay_end_flag = 0;
    393          	ret = start_timer(V_TIMER_MODE_ONE_SHOT,nTime,delay_func_hook);
    394          	assert(ret != 0);
    395          }
    396          
    397          
    398          /**
    399           * @brief 判断延时时间是否到
    400           * @param[in] none
    401           * @return 1: 定时到
    402           *        0: 定时未到
    403          */
    404          unsigned char DelayIsEnd(void)
    405          {
    406          	return	Delay_end_flag; 
    407          }

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     DelayIsEnd                 0
     StartDelay                 8
     TIM2_UpdateISRHandler      8
     TimeBase_Init             40
     check_vtimer_handle        0
     delay_func_hook            0
     delay_ms                   0
     delay_us                   0
     reset_timer               24
     start_real_timer           8
     start_timer               24
     stop_real_timer            8
     stop_timer                 8


   Section sizes:

     Function/Label                             Bytes
     --------------                             -----
     delay_us                                     24
     delay_ms                                     26
     TimeBase_Init                               110
     v_timer_list                                  8
     start_timer                                 104
     check_vtimer_handle                          24
     reset_timer                                  40
     stop_timer                                  100
     start_real_timer                             26
     stop_real_timer                              26
     TIM2_UpdateISRHandler                       154
     Delay_end_flag                                4
     delay_func_hook                               8
     StartDelay                                   56
     DelayIsEnd                                    8
     ??DataTable15                                 4
     ??DataTable18                                 4
     ?<Constant "ret != 0">                       12
     ?<Constant "E:\\BT Printer\\FW\\src\\...">   40

 
  12 bytes in section .bss
  52 bytes in section .rodata
 714 bytes in section .text
 
 714 bytes of CODE  memory
  52 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: 1
